{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Risk of Rain 2 Modding Wiki !","text":"<p>This place serves as a center for guides related to Risk of Rain 2 Modding.</p> <p>These guides help to teach concepts and should prove as a useful resource to modders.</p> <p>Please feel free to contribute to anything you think should be improved !</p> <p>But before that, please read the paragraph below on how to contribute correctly.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Anyone can edit this wiki, as long as you have a GitHub account.</p>"},{"location":"#creating-a-new-page","title":"Creating a new page","text":"<p>Please head to this link and format the title of your page as follow:</p> <p><code>Required-Category_Optional-Sub-Category_Page-Name</code></p> <p>You should always put a category for your page!</p> <p>Here is how the page named <code>FirstFolder_This-is-folder2_This-is-the-file-name</code> looks in the sidebar once it gets added to the generated github pages website.</p> <p></p> <p>Note: The GitHub Pages Website only gets updated every 24 hours! If you think your awesome contribution really needs to be available asap on the website, please ask the maintainers in the modding discord.</p>"},{"location":"#editing-an-existing-page","title":"Editing an existing page","text":"<p>Head to the page you want to edit, and click the top right button which looks like a pen.</p> <p>The button should redirect you to the correct edit page, it it doesn't: - Make sure you are logged into your account - If it still leads you to an empty creation page, please report the faulty page in a new issue in the repository.</p>"},{"location":"Beginner%27s-Guide-for-Modding-Risk-of-Rain-2/","title":"Beginner's Guide for Modding Risk of Rain 2","text":""},{"location":"Beginner%27s-Guide-for-Modding-Risk-of-Rain-2/#_1","title":"#","text":""},{"location":"Mod-Creation/Cookbook/","title":"Cookbook","text":"<p>Welcome to the Risk of Rain 2 modding cookbook, explore modding best practices with common code snippets. </p> <p>Refer to the Table of Contents to the right of the page to jump to a specific snippet.</p>"},{"location":"Mod-Creation/Cookbook/#loading-assets","title":"Loading Assets","text":"<p>After the Memory Optimization Update, modders now have an opt-in system to keep load times fast and keep your mod's memory usage in check. To use the <code>GameAssetPaths</code> you'll need a reference to the <code>RoR2BepInExPack</code> package in your <code>.csproj</code>. Link to the latest version in the modding discord. <pre><code>// Example for how to properly load in assets to be used later. It's divided up for better readability, but you can put it all in one-line.\npublic Material moonMat;\nAssetReferenceT&lt;Material&gt; moonMatRef = new AssetReferenceT&lt;Material&gt;(RoR2BepInExPack.GameAssetPaths.RoR2_Base_moon.matMoonTerrain_mat);\nAssetAsyncReferenceManager&lt;Material&gt;.LoadAsset(moonMatRef).Completed += (x) =&gt; moonMat = x.Result;\n</code></pre></p> <pre><code>// Example for how to properly load in an asset then edit it. You can save it to a variable before/after editing inside of the .Completed.\nAssetReferenceT&lt;Material&gt; starPickupRef = new AssetReferenceT&lt;Material&gt;(RoR2BepInExPack.GameAssetPaths.RoR2_DLC2_Items_LowerPricedChests.PickupSaleStar_prefab);\nAssetAsyncReferenceManager&lt;GameObject&gt;.LoadAsset(starPickupRef).Completed += (x) =&gt;\n{\n  MeshCollider collider = obj.Result.transform.find(\"SaleStar\")?.GetComponent&lt;MeshCollider&gt;();\n  if (collider)\n  {\n    collider.convex = true;\n  }\n};\n</code></pre>"},{"location":"Mod-Creation/Cookbook/#creating-skills","title":"Creating Skills","text":"<p>There are multiple parts of a skill, the actual definition (SkillDef), the SkillFamily it belongs to (Primary/Secondary/Utility/Special), the SkillVariant within the family (if you have multiple SkillDefs under a family), and the GenericSkill which holds it all together. Usually the GenericSkill and SkillFamily already exists (if you're adding a skill to an existing body) so you'd need to create the SkillDef and SkillVariant. <pre><code>  private void CreateSkill(GameObject body)\n    {\n      // Creating the SkillDef\n      SkillDef skillDef = ScriptableObject.CreateInstance&lt;SkillDef&gt;();\n      skillDef.skillName = \"SKILL_NAME_TOKEN\";\n      (skillDef as ScriptableObject).name = \"SKILL_NAME_TOKEN\";\n\n      skillDef.activationState = new SerializableEntityStateType(typeof(YourEntityState));\n      skillDef.activationStateMachineName = \"Body\"; // This is usually either \"Body\" or \"Weapon\" depending on your skill\n      skillDef.interruptPriority = InterruptPriority.Skill; // If the priority is the same or \"higher\" it can interrupt this skill\n\n      skillDef.baseMaxStock = 1;\n      skillDef.baseRechargeInterval = 4f;\n\n      skillDef.rechargeStock = 1;\n      skillDef.requiredStock = 1;\n      skillDef.stockToConsume = 1;\n\n      skillDef.dontAllowPastMaxStocks = true;\n      skillDef.beginSkillCooldownOnSkillEnd = false;\n      skillDef.canceledFromSprinting = false;\n      skillDef.forceSprintDuringState = true;\n      skillDef.fullRestockOnAssign = true;\n      skillDef.resetCooldownTimerOnUse = true;\n      skillDef.isCombatSkill = false;\n      skillDef.mustKeyPress = false; // This can stay false\n      skillDef.cancelSprintingOnActivation = false;\n\n      // Creating a SkillFamily\n      SkillFamily newFamily = ScriptableObject.CreateInstance&lt;SkillFamily&gt;();\n      (newFamily as ScriptableObject).name = body.name + \"Secondary\" + \"Family\";\n      ;\n      newFamily.variants = new SkillFamily.Variant[1] { new SkillFamily.Variant { skillDef = skillDef } };\n\n      // Creating a GenericSkill\n      GenericSkill skill = body.AddComponent&lt;GenericSkill&gt;();\n      skill._skillFamily = newFamily;\n      body.GetComponent&lt;SkillLocator&gt;().secondary = skill;\n\n      // Adding your new SkillDef and SkillFamily with R2API.ContentManagement\n      ContentAddition.AddSkillFamily(newFamily);\n      ContentAddition.AddSkillDef(skillDef);\n    }\n</code></pre></p>"},{"location":"Mod-Creation/Cookbook/#getter-hooks","title":"Getter Hooks","text":"<p>HookGen doesn't generate <code>On</code> or <code>IL</code> hooks for getters, so if you want to hook a getter for extra you'll have to create it yourself. This example uses the <code>cost</code> attribute in the <code>DirectorCard</code> class which you can check using a decompiler (dnspy/ilspy) <pre><code>// These go into your Awake function\nvar target = typeof(DirectorCard).GetPropertyGetter(nameof(DirectorCard.cost));\nvar hook = new Hook(target, OnCost);\n\n// if your method isn't public you'll get an error\npublic int OnCost(Func&lt;DirectorCard, int&gt; orig, DirectorCard self)\n{\n  return orig(self);\n}\n</code></pre></p>"},{"location":"Mod-Creation/Cookbook/#creating-assetbundles","title":"Creating AssetBundles","text":"<p>This is assuming you already have the Unity editor installed as well as a project created. - Install the <code>Addressables</code> package if it's not already installed (<code>Window -&gt; Package Manager</code>) - You should now see a checkbox with <code>Addressables</code> next to it when inspecting a prefab - Check the box and rename it if you'd like - Press the <code>Select</code> button after checking the box or go to <code>Window -&gt; Asset Management -&gt; Addressables -&gt; Groups</code> to access the addressables window - You should see the added content in the group, if everything looks good, press <code>Build -&gt; New Build -&gt; Default Build Script</code> to create your asset bundle - The bundle by default will be in <code>ProjectName -&gt; Library -&gt; com.unity.addressables -&gt; aa -&gt; Windows -&gt; StandaloneWindows64</code> with a long name including \"defaultlocalgroup\", you can rename this bundle to use in your mod.</p> <p>For these steps along with example pictures, it's in the modding discord here</p>"},{"location":"Mod-Creation/Unity-Version/","title":"Unity Version","text":"<p>Risk of Rain 2 runs on Unity 2021.3.33.23082</p>"},{"location":"Mod-Creation/Assets/Artifacts/","title":"Artifacts","text":"<p>Artifacts ingame can be useful for giving your RoR2 run a bit of a twist, this guide walks you through creating an Artifact for your mod.</p> <p>While there are certainly a number of ways to create Artifacts, this guide uses KomradeSpectre's ItemModCreationBoilerplate as a base for creating the Artifact. more methods for creating custom Artifacts may come in the future...</p>"},{"location":"Mod-Creation/Assets/Artifacts/#index","title":"Index","text":"<ul> <li>Artifact Creation using ItemModCreationBoilerPlate.</li> <li>Artifact Creation in one class.</li> <li>Artifact Creation using Thunderkit.</li> <li>Artifact Code Creation.</li> <li>Artifact Compound Creation.</li> </ul>"},{"location":"Mod-Creation/Assets/Artifacts/#artifact-creation-using-itemmodcreationboilerplate","title":"Artifact creation using ItemModCreationBoilerplate","text":"<p>In Komrade's ItemModCreationBoilerplate, an artifact is composed of 2 key classes, the ArtifactBase and the Artifact class itself. We will first walk thru ArtifactBase. Keep in mind that you need to have R2API in your references for this to work properly.</p>"},{"location":"Mod-Creation/Assets/Artifacts/#artifact-base","title":"Artifact Base","text":"<p><pre><code>using BepInEx.Configuration;\nusing R2API;\nusing RoR2;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing UnityEngine;\n\nnamespace YourNamespaceHere\n{\n    public abstract class ArtifactBase\n    {\n        public abstract string ArtifactName { get; }\n        public abstract string ArtifactLangTokenName { get; }\n        public abstract string ArtifactDescription { get; }\n        public abstract Sprite ArtifactEnabledIcon { get; }\n        public abstract Sprite ArtifactDisabledIcon { get; }\n        public ArtifactDef ArtifactDef;\n        public bool ArtifactEnabled =&gt; RunArtifactManager.instance.IsArtifactEnabled(ArtifactDef);\n        public abstract void Init(ConfigFile config);\n        protected void CreateLang()\n        {\n            LanguageAPI.Add(\"ARTIFACT_\" + ArtifactLangTokenName + \"_NAME\", ArtifactName);\n            LanguageAPI.Add(\"ARTIFACT_\" + ArtifactLangTokenName + \"_DESCRIPTION\", ArtifactDescription);\n        }\n        protected void CreateArtifact()\n        {\n            ArtifactDef = ScriptableObject.CreateInstance&lt;ArtifactDef&gt;();\n            ArtifactDef.cachedName = \"ARTIFACT_\" + ArtifactLangTokenName;\n            ArtifactDef.nameToken = \"ARTIFACT_\" + ArtifactLangTokenName + \"_NAME\";\n            ArtifactDef.descriptionToken = \"ARTIFACT_\" + ArtifactLangTokenName + \"_DESCRIPTION\";\n            ArtifactDef.smallIconSelectedSprite = ArtifactEnabledIcon;\n            ArtifactDef.smallIconDeselectedSprite = ArtifactDisabledIcon;\n            ContentAddition.AddArtifactDef(ArtifactDef);\n        }\n        public abstract void Hooks();\n    }\n}\n</code></pre> Since this class is an Abstract class, it only works as a base. as such, just copy and paste this code snippet into an empty class file and create your artifact in another class that inherits from ArtifactBase. Bellow is a detailed walkthrough on each variable and the methods.</p> <p>ArtifactName: The name of your Artifact.</p> <p>ArtifactLangTokenName: The lang token of your Artifact.</p> <p>ArtifactDescription: The Description of the Artifact when you hover over it.</p> <p>ArtifactEnabled: the icon of your Artifact when its enabled.</p> <p>ArtifactDisabled: the icon of your Artifact when its disabled.</p> <p>ArtifactDef: Your Artifact Def, Basically how the game identifies your Artifact.</p> <p>ArtifactEnabled: A bool that can be used to check if the run has your artifact enabled. Which is the backbone for making your Artifact do stuff.</p> <p>CreateLang(): Method that creates the lang tokens of your Artifact</p> <p>CreateArtifact(): Method that finishes the creation of your Artifact and Registers it to the game using ArtifactAPI.</p> <p>Hooks(): The hooks your artifact uses.</p> <p>Once you finish copying and Parting ArtifactBase, all thats left to do is create the class where you will fill in the information and the logic behind your Artifact. for this, we will take a look at ItemModCreationBoilerplate's ExampleArtifact</p>"},{"location":"Mod-Creation/Assets/Artifacts/#exampleartifact","title":"ExampleArtifact","text":"<pre><code>using BepInEx.Configuration;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing UnityEngine;\nusing UnityEngine.Networking;\nusing RoR2;\nusing static YourNameSpaceHere.BaseUnityPluginInheritedClass;\nnamespace YourNameSpaceHere\n{\n    class ExampleArtifact : ArtifactBase\n    {\n        public static ConfigEntry&lt;int&gt; TimesToPrintMessageOnStart;\n        public override string ArtifactName =&gt; \"Artifact of Example\";\n        public override string ArtifactLangTokenName =&gt; \"ARTIFACT_OF_EXAMPLE\";\n        public override string ArtifactDescription =&gt; \"When enabled, print a message to the chat at the start of the run.\";\n        public override Sprite ArtifactEnabledIcon =&gt; MainAssets.LoadAsset&lt;Sprite&gt;(\"ExampleArtifactEnabledIcon.png\");\n        public override Sprite ArtifactDisabledIcon =&gt; MainAssets.LoadAsset&lt;Sprite&gt;(\"ExampleArtifactDisabledIcon.png\");\n        public override void Init(ConfigFile config)\n        {\n            CreateConfig(config);\n            CreateLang();\n            CreateArtifact();\n            Hooks();\n        }\n        private void CreateConfig(ConfigFile config)\n        {\n            TimesToPrintMessageOnStart = config.Bind&lt;int&gt;(\"Artifact: \" + ArtifactName, \"Times to Print Message in Chat\", 5, \"How many times should a message be printed to the chat on run start?\");\n        }\n        public override void Hooks()\n        {\n            Run.onRunStartGlobal += PrintMessageToChat;\n        }\n        private void PrintMessageToChat(Run run)\n        {\n            if(NetworkServer.active &amp;&amp; ArtifactEnabled)\n            {\n                for(int i = 0; i &lt; TimesToPrintMessageOnStart.Value; i++)\n                {\n                    Chat.AddMessage(\"Example Artifact has been Enabled.\");\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Copy and paste the code snippet above and replace the values with that your Artifact needs. Keep in mind that for your ArtifactEnabled and Disabled icons you'll need to create an assetbundle for it, Assetbundles are outside of this tutorial's scope, but there is a wiki entry for them here</p> <p>The final step of the process is Initializing your artifact, for this, ItemModCreationBoilerplate has its own code that we can use for initializing the Artifact. the code can be found here</p>"},{"location":"Mod-Creation/Assets/Artifacts/#artifact-initialization","title":"Artifact Initialization.","text":"<p>You need to add this List to your main class first.</p> <pre><code>public  List&lt;ArtifactBase&gt; Artifacts  =  new  List&lt;ArtifactBase&gt;();\n</code></pre> <p>The following snippet code goes in your Awake method in your BaseUnityPlugin inherited class. <pre><code>var ArtifactTypes = Assembly.GetExecutingAssembly().GetTypes().Where(type =&gt; !type.IsAbstract &amp;&amp; type.IsSubclassOf(typeof(ArtifactBase)));\nforeach (var artifactType in ArtifactTypes)\n{\n    ArtifactBase artifact = (ArtifactBase)Activator.CreateInstance(artifactType);\n    if (ValidateArtifact(artifact, Artifacts))\n    {\n        artifact.Init(Config);\n    }\n}\n</code></pre> The following method helps initializing the Artifact. this goes outside of your Awake method but still inside your BaseUnityPlugin inherited class. <pre><code>public bool ValidateArtifact(ArtifactBase artifact, List&lt;ArtifactBase&gt; artifactList)\n{\n    var enabled = Config.Bind&lt;bool&gt;(\"Artifact: \" + artifact.ArtifactName, \"Enable Artifact?\", true, \"Should this artifact appear for selection?\").Value;\n    if (enabled)\n    {\n        artifactList.Add(artifact);\n    }\n    return enabled;\n}\n</code></pre></p>"},{"location":"Mod-Creation/Assets/Artifacts/#artifact-creation-in-one-class","title":"Artifact Creation in one class","text":"<p>There are methods to create Artifacts using one class instead of using the great amount of structure that KomradeSpectre's ItemModCreationBoilerplate uses. for this, we will look at MonsterVariantsPlus, and how it creates it's Artifact of Variance artifact. it's Artifact class can be found here</p>"},{"location":"Mod-Creation/Assets/Artifacts/#artifact-class","title":"Artifact Class","text":"<p><pre><code>using RoR2;\nusing R2API;\nusing UnityEngine;\nusing MonsterVariants.Components;\nusing MonoMod.RuntimeDetour;\nusing System.Reflection;\nusing System;\nnamespace MonsterVariantsPlus.SubClasses\n{\n    public class Artifact\n    {\n        public static ArtifactDef Variance = ScriptableObject.CreateInstance&lt;ArtifactDef&gt;();\n        public static void InitializeArtifact()\n        {\n            Variance.nameToken = \"Artifact of Variance\";\n            if (ConfigLoader.ArtifactIncreasesRewards)\n            {\n                Variance.descriptionToken = \"All Variant's Spawn Rates &amp; Rewards are Multiplied by \" + ConfigLoader.SpawnRateMultiplier;\n            }\n            else\n            {\n                Variance.descriptionToken = \"All Variant's Spawn Rates are Multiplied by \" + ConfigLoader.SpawnRateMultiplier;\n            }\n            Variance.smallIconDeselectedSprite = AssetLoaderAndChecker.MainAssets.LoadAsset&lt;Sprite&gt;(\"Assets/Textures/Artifact/VarianceDisabled.png\");\n            Variance.smallIconSelectedSprite = AssetLoaderAndChecker.MainAssets.LoadAsset&lt;Sprite&gt;(\"Assets/Textures/Artifact/VarianceEnabled.png\");\n            ArtifactAPI.Add(Variance);\n        }\n        public static void MonsterVariantAwakeHook(Action&lt;VariantHandler&gt; orig, VariantHandler self)\n        {\n            var origRate = self.spawnRate;\n            if (RunArtifactManager.instance.IsArtifactEnabled(Variance))\n            {\n                self.spawnRate *= ConfigLoader.SpawnRateMultiplier;\n                //Avoid potentially bad spawn rates\n                if(self.spawnRate &lt; 0)\n                {\n                    self.spawnRate = 0;\n                }\n                else if(self.spawnRate &gt; 100)\n                {\n                    self.spawnRate = 100;\n                }\n            }\n            orig(self);\n            self.spawnRate = origRate;\n        }\n    }\n}\n</code></pre> Most of the variables found in this clase are very similar to ArtifactBase's variables. One thing to note is the use of a Custom Hook, unless you know how to create it, you can simply use a normal Hook and initialize the hook inside InitializeArtifact()</p> <p>To have your mod load the Artifact, add this snippet of code to your BaseUnityPlugin inherited class. <pre><code>Artifact.InitializeArtifact();\n</code></pre></p>"},{"location":"Mod-Creation/Assets/Artifacts/#artifact-creation-using-thunderkit","title":"Artifact Creation using Thunderkit","text":"<p>Creating an artifact using Thunderkit is not exactly difficult. It just requires you to know how Thunderkit works and how to develop with it.</p> <p>It is extremely encouraged to check Kevin from HP Customer Service's \"Creating Mods with Thunderkit\" wiki page.</p> <p>This guide assumes you already followed the steps in that page. and already have your Thunderkit project set up.</p>"},{"location":"Mod-Creation/Assets/Artifacts/#creating-your-artifactdef","title":"Creating your ArtifactDef","text":"<p>On your asset Bundle, you need to create an ArtifactDef. to do this, right click on the project folder, and go to Create -&gt; RoR2 -&gt; ArtifactDef.</p> <p></p> <p>After creating your ArtifactDef, click it, in your inspector, you'll be able to change the settings of your Artifact to your heart's desires.</p> <pre><code>* Name Token\n\n    - The name of your artifact as it appears in the Survivor select screen\n\n* Description Token\n\n    - The Description of your artifact as it appears in the Survivor select screen\n\n* Small Icon Selected Sprite\n\n    - The Sprite of your artifact when it's enabled.\n\n* Small Icon Deselected Sprite\n\n    - The sprite of your artifact when its disabled\n</code></pre> <p>Note: Filling out UnlockableDef &amp; Pickup Model Prefab is NOT necesary.</p> <p></p> <p>Once you've filled out your ArtifactDef, add it to your SerializableContentPack.</p> <p></p> <p>Congratulations, once you load your Thunderkit made mod, the game will load your Custom Artifact.</p> <p>However, Your artifact while existing in the game, it currently does nothing, this is because it's functionality is written in code.</p>"},{"location":"Mod-Creation/Assets/Artifacts/#making-your-artifact-do-stuff","title":"Making your Artifact do Stuff.","text":"<ul> <li> <p>Open up your AssemblyDef, create a new class where you will store your Artifact's code.</p> </li> <li> <p>Paste the following code snippet in your new class</p> </li> </ul> <pre><code>using RoR2;\nusing R2API;\nusing UnityEngine;\nusing MonoMod.RuntimeDetour;\nusing System.Reflection;\nusing System;\n\nnamespace YourNamespaceHere\n{\n    public class ThunderkitMadeArtifact\n    {\n        public static ArtifactDef MyArtifactDef = ContentPackProvider.contentPack.artifactDefs.Find(\"YourArtifactDef\");\n        public static void InitializeArtifact()\n        {\n            Hooks();\n        }\n        public static void Hooks()\n        {\n              Run.onRunStartGlobal += MyArtifactEffect;\n        }\n        private void MyArtifactEffect(Run run)\n        {\n               if(NetworkServer.active &amp;&amp; RunArtifactManager.instance.IsArtifactEnabled(MyArtifactDef))\n              Chat.AddMessage(\"My Artifact has been enabled!\")\n        }\n    }\n}\n</code></pre> <p>You can now modify your Hook and make your artifact do stuff when its enabled.</p> <p>Once you're finished with creating your artifact's effects, simply call the InitializeArtifact() method to initialize your artifact's effects.</p>"},{"location":"Mod-Creation/Assets/Artifacts/#artifact-code-creation","title":"Artifact Code Creation","text":"<p>With R2API version 3.0.50, the ArtifactCodeAPI was added to the plethora of R2API Submodules.</p> <p>ArtifactCodeAPI, in a nutshell,  allows mod creators to add their own Artifact Codes to the game, so they can have them appear inside the bulwark's ambry and potentially unlock the artifact the same way as vanilla artifacts.</p> <p>ArtifactCodeAPI Allows the mod creator to:</p> <ul> <li> <p>Create custom Artifact Codes easily with the ArtifactCode scriptable object.</p> </li> <li> <p>Create new Artifact Compounds.</p> </li> </ul> <p>Custom Code </p> <p></p> <p></p> <p>Custom Artifact Compound (Artifact Compound for Genetic Artifact, made by Rico.)</p> <p></p>"},{"location":"Mod-Creation/Assets/Artifacts/#artifactcode-scriptable-object","title":"ArtifactCode scriptable object.","text":"<p>The ArtifactCode Scriptable Object greatly simplifies the creation of Codes, while normally you would make codes by using a Sha256HashAsset, and inputting complex ulong based values. ArtifactCode scriptable object creates these ulong values for you by reading thru the values inputted in 3 pairs of Vector3Int.</p> <p>Here is an example on how the Artifact of Commando code would be generated using ArtifactCode</p> <pre><code>artifactCode = ScriptableObject.CreateInstance&lt;ArtifactCode&gt;();\nartifactCode.topRow = new Vector3Int(CompoundValues.Square, CompoundValues.Square, CompoundValues.Square);\nartifactCode.middleRow = new Vector3Int(CompoundValues.Square, CompoundValues.Square, CompoundValues.Square);\nartifactCode.bottomRow = new Vector3Int(CompoundValues.Triangle, CompoundValues.Triangle, CompoundValues.Triangle);\n</code></pre> <p>Please note that each Vector3Int corresponds to a row in the Artifact tablet.</p> <p>As well, keep in mind that AddCode() requires you to pass your ArtifactDef as an argument.</p>"},{"location":"Mod-Creation/Assets/Artifacts/#thunderkit-usage","title":"Thunderkit usage.","text":"<p>The ArtifactCode scriptable object can also be created from the editor and be used in conjunction with Thunderkit. It can be found in the Create Asset Menu</p> <p></p> <p></p> <p>Implementing the code is as easy as grabbing the desired ArtifactDef &amp; ArtifactCode from your assetBundle and registering the code.</p> <pre><code>var def = Assets.LoadAsset&lt;ArtifactDef&gt;(\"ArtifactDef\");\nvar hash = Assets.LoadAsset&lt;R2API.ArtifactCode&gt;(\"Code\");\nR2API.ArtifactCodeAPI.AddCode(def, hash);\n</code></pre> <p>A list of the vanilla compound's Values can be found inside the ArtifactCodeAPI itself, under ArtifactCodeAPI.CompoundValues.</p>"},{"location":"Mod-Creation/Assets/Artifacts/#artifactcompound","title":"ArtifactCompound","text":"<p>Creating a custom artifact compound can be a good way to ensure nobody else uses the same code you just created, which allows modders to avoid having code conflicts alltogether.</p> <p>These are created using the ArtifactCompoundDef scriptable object, which is part of RoR2 code.</p> <pre><code>geneArtifactCompoundDef = ScriptableObject.CreateInstance&lt;ArtifactCompoundDef&gt;();\ngeneArtifactCompoundDef.modelPrefab = GeneticsArtifactPlugin.geneticAssetBundle.LoadAsset&lt;GameObject&gt;(\"Assets/Genetics/CompoundGene.prefab\");\ngeneArtifactCompoundDef.value = 15;\nArtifactCodeAPI.AddCompound(geneArtifactCompoundDef);\n</code></pre>"},{"location":"Mod-Creation/Assets/Artifacts/#thunderkit-usage_1","title":"Thunderkit usage.","text":"<p>Just like ArtifactCodes, you can easily create an ArtifactCompound using the Scriptable object and thunderkit's tools.</p> <p></p> <pre><code>var Compound = Assets.LoadAsset&lt;ArtifactCompoundDef&gt;(\"CompoundDef\");\nR2API.ArtifactCodeAPI.AddCompound(Compound);\n</code></pre>"},{"location":"Mod-Creation/Assets/Character/","title":"Character","text":""},{"location":"Mod-Creation/Assets/Character/#henry-tutorial","title":"Henry Tutorial","text":"<p>Rob's character template, called HenryTutorial, is the recommended method of adding a custom survivor as it is the most up to date, and most complete. It does its best to abstract as much as possible under the hood that you don't have to worry about.</p>"},{"location":"Mod-Creation/Assets/Character/#thunderkit","title":"Thunderkit.","text":"<p>If you are more Unity-minded, and would like to get your hands dirty with the nitty gritty of creating characters, Thunderkit may be for you. Currently, no such template like the Henry Tutorial exists for Thunderkit, but that isn't to say it is impossible. Reach out in the modding discord for help along the way. - See here to get started with thunderkit. - RoR2EditorKit has a wizard for easily creating a CharacterBody.   - Provided your Thunderkit Import went smoothly and you have RoR2EditorKit installed, go to the toolbar at the top, and hit <code>Tools/RoR2EditorKit/Wizards/Character Body</code></p> <p>ThunderHenry was a Thunderkit-oriented version of the henry template, but it is currently out of date. It does however, have a good wiki of general RoR2 information that applies to any character, which we have yet to move to this wiki.</p>"},{"location":"Mod-Creation/Assets/Character/#before-you-begin","title":"Before You Begin","text":"<p>If you are newer to modding, then I recommend that you start out just working on the skills before you work out anything relating to custom models or animations. Doesn't matter if your character is a commando clone, so long as they're fun to play.</p> <p>To this end you should check out the custom skills page on the wiki since this will give you a working template that's a little more simple to understand than the full character template.</p> <p>It's a good place to start before you move on to a fully fledged character mod.</p> <p>Additionally, if you have all of your skill states in their own .cs files, then when it's time to switch templates it will be as easy as dragging the files from one project to the other.</p>"},{"location":"Mod-Creation/Assets/Difficulty/","title":"Difficulty","text":"<p>We're going to be starting out with this nearly empty project. Make sure you already know the modding basics for this tutorial.</p> <p>A difficulty needs a DifficultyIndex and a DifficultyDef to function. We add those to our class and make them public for other mods to access easier. <pre><code>        public static DifficultyDef ExampleModDiffDef;\n\n        public static DifficultyIndex ExampleModDiffIndex;\n</code></pre></p> <p>After that, we can add our difficulty to the game, in a somewhat playable state: <pre><code>        public void AddDifficulty()\n        {\n            ExampleModDiffDef = new(3f,\n                                   \"EXAMPLEDIFFICULTYMOD_NAME\",\n                                   \"EXAMPLEDIFFICULTYMOD_ICON\",\n                                   \"EXAMPLEDIFFICULTYMOD_DESCRIPTION\",\n                                   new Color32(255, 255, 255, 255),\n                                   \"ed\",\n                                   true);\n\n            ExampleModDiffDef.iconSprite = null;\n            ExampleModDiffDef.foundIconSprite = true;\n            ExampleModDiffIndex = DifficultyAPI.AddDifficulty(ExampleModDiffDef);\n        }\n</code></pre> * The first value passed is our difficulty scaling value - 3f is the same as Monsoon scaling, also known as 150% or +50% of Rainstorm. This is linear, so 6f is the expected 300% difficulty scaling. * * In addition, here's a reference as to what you could expect with X difficulty scaling. Feel free to make a copy and experiment. * * Difficulties in the lobby are sorted by this value. * The next three values are our language tokens, that we need to fill in order to have a proper name and description. * The color indicates the color when hovering over our difficulty, made it RGB here for simplicity sake. * \"ed\" is what is displayed in the lobby listing if people are playing on your difficulty. * And finally, the last bool indicates whether the difficulty can unlock Monsoon specific achievements and whether it has Monsoon's -40% health regeneration modifier.</p> <p>We're leaving the difficulty icon sprite null for now.</p> <p>Found icon sprite always true, don't ask me why - I don't know.</p> <p>Now to fill the tokens.</p> <p><pre><code>        public void FillTokens()\n        {\n            LanguageAPI.Add(\"EXAMPLEDIFFICULTYMOD_NAME\", \"Example Difficulty\");\n            LanguageAPI.Add(\"EXAMPLEDIFFICULTYMOD_DESCRIPTION\", \"My example difficulty description.\\n\\n\" +\n                                                                \"&lt;style=cStack&gt;&gt;Player Health Regeneration: &lt;style=cIsHealth&gt;-40%&lt;/style&gt;\\n\" +\n                                                                \"&gt;Difficulty Scaling: &lt;style=cIsHealth&gt;+50%&lt;/style&gt;&lt;/style&gt;\");\n        }\n</code></pre> Not really much to talk here, we supply <code>LanguageAPI</code> with our token, then set its value.</p> <p>Our new code should look like this: <pre><code>using BepInEx;\nusing BepInEx.Logging;\nusing R2API;\nusing R2API.Utils;\nusing RoR2;\nusing UnityEngine;\n\nnamespace ExampleDifficultyMod\n{\n    [BepInDependency(R2API.R2API.PluginGUID)]\n    [BepInDependency(LanguageAPI.PluginGUID)]\n    [BepInDependency(DifficultyAPI.PluginGUID)]\n    [BepInPlugin(PluginGUID, PluginName, PluginVersion)]\n    public class Main : BaseUnityPlugin\n    {\n        public const string PluginGUID = PluginAuthor + \".\" + PluginName;\n\n        public const string PluginAuthor = \"ExampleModAuthor\";\n        public const string PluginName = \"ExampleDifficultyMod\";\n        public const string PluginVersion = \"1.0.0\";\n\n        public static ManualLogSource EDMLogger;\n\n        public static DifficultyDef ExampleModDiffDef;\n\n        public static DifficultyIndex ExampleModDiffIndex;\n\n        public void Awake()\n        {\n            EDMLogger = Logger;\n            AddDifficulty();\n            FillTokens();\n        }\n\n        public void FillTokens()\n        {\n            LanguageAPI.Add(\"EXAMPLEDIFFICULTYMOD_NAME\", \"Example Difficulty\");\n            LanguageAPI.Add(\"EXAMPLEDIFFICULTYMOD_DESCRIPTION\", \"My example difficulty description.\\n\\n\" +\n                                                                \"&lt;style=cStack&gt;&gt;Player Health Regeneration: &lt;style=cIsHealth&gt;-40%&lt;/style&gt;\\n\" +\n                                                                \"&gt;Difficulty Scaling: &lt;style=cIsHealth+50%&lt;/style&gt;&lt;/style&gt;\");\n        }\n\n        public void AddDifficulty()\n        {\n            ExampleModDiffDef = new(3f, \"EXAMPLEDIFFICULTYMOD_NAME\", \"EXAMPLEDIFFICULTYMOD_ICON\", \"EXAMPLEDIFFICULTYMOD_DESCRIPTION\", new Color32(255, 255, 255, 255), \"ed\", true);\n            ExampleModDiffDef.iconSprite = null;\n            ExampleModDiffDef.foundIconSprite = true;\n            ExampleModDiffIndex = DifficultyAPI.AddDifficulty(ExampleModDiffDef);\n        }\n    }\n}\n</code></pre></p> <p>At this point, our difficulty should appear in-game, much like this: </p>"},{"location":"Mod-Creation/Assets/Difficulty/#but-what-if-we-want-our-scaling-to-be-configurable-and-update-in-game","title":"But what if we want our Scaling to be configurable and update in-game?","text":"<p>This is actually pretty simple, but for adding an in-game mod settings menu, it's a little more complicated. I will now go over both.</p> <p>First of all, we make a ConfigEntry in our class, <pre><code>public static ConfigEntry&lt;float&gt; Scaling { get; set; }\n</code></pre> then Bind it in <code>Awake()</code>. <pre><code>Scaling = Config.Bind(\"First Section\", \"Difficulty Scaling\", 150f, \"Percentage of difficulty scaling, 150% is +50%. Default is 150\");\n</code></pre></p> <p>Now, we have to go back to our <code>AddDifficulty()</code> method, and replace the 3f with this below, in order for our difficulty to update when restarting the game. <pre><code>ExampleModDiffDef = new(Scaling.Value / 50f, // ...\n</code></pre></p> <p>As for realtime updating...</p> <p>In <code>Awake()</code>, we hook RoR2.Language.GetLocalizedStringByToken: <pre><code>On.RoR2.Language.GetLocalizedStringByToken += // Hit tab here, should autocomplete.\n</code></pre></p> <p>In our hook method, we set our <code>DifficultyDef's scalingValue</code> again, to the same value in <code>AddDifficulty()</code>. We check if the token equals our description token and return our actual description, the same exact one as our <code>LanguageAPI's</code> additions. Of course, we replace the shown difficulty scaling in both of our descriptions as well.</p> <p>Don't forget to call orig!</p> <p>Our code should now look like this: <pre><code>// ...\n        public static ConfigEntry&lt;float&gt; Scaling { get; set; }\n\n        public void Awake()\n        {\n            EDMLogger = Logger;\n            Scaling = Config.Bind(\"General\", \"Difficulty Scaling\", 150f, \"Percentage of difficulty scaling, 150% is +50%. Difficulty order does not update visually. Vanilla is 150\");\n            AddDifficulty();\n            FillTokens();\n            On.RoR2.Language.GetLocalizedStringByToken += Language_GetLocalizedStringByToken;\n        }\n\n        private string Language_GetLocalizedStringByToken(On.RoR2.Language.orig_GetLocalizedStringByToken orig, Language self, string token)\n        {\n            ExampleModDiffDef.scalingValue = Scaling.Value / 50f;\n            if (token == \"EXAMPLEDIFFICULTYMOD_DESCRIPTION\")\n            {\n                return \"My example difficulty description.\\n\\n\" +\n                       \"&lt;style=cStack&gt;&gt;Player Health Regeneration: &lt;style=cIsHealth&gt;-40%&lt;/style&gt;\\n\" +\n                       \"&gt;Difficulty Scaling: &lt;style=cIsHealth&gt;+\" + (Scaling.Value - 100f) + \"%&lt;/style&gt;&lt;/style&gt;\";\n            }\n            return orig(self, token);\n        }\n\n        public void FillTokens()\n        {\n            LanguageAPI.Add(\"EXAMPLEDIFFICULTYMOD_NAME\", \"Example Difficulty\");\n            LanguageAPI.Add(\"EXAMPLEDIFFICULTYMOD_DESCRIPTION\", \"My example difficulty description.\\n\\n\" +\n                                                                \"&lt;style=cStack&gt;&gt;Player Health Regeneration: &lt;style=cIsHealth&gt;-40%&lt;/style&gt;\\n\" +\n                                                                \"&gt;Difficulty Scaling: &lt;style=cIsHealth&gt;+\" + (Scaling.Value - 100f) + \"%&lt;/style&gt;&lt;/style&gt;\");\n        }\n\n        public void AddDifficulty()\n        {\n            ExampleModDiffDef = new(Scaling.Value / 50f, \"EXAMPLEDIFFICULTYMOD_NAME\", \"EXAMPLEDIFFICULTYMOD_ICON\", \"EXAMPLEDIFFICULTYMOD_DESCRIPTION\", new Color32(255, 255, 255, 255), \"ed\", true);\n            ExampleModDiffDef.iconSprite = null;\n            ExampleModDiffDef.foundIconSprite = true;\n            ExampleModDiffIndex = DifficultyAPI.AddDifficulty(ExampleModDiffDef);\n        }\n// ...\n</code></pre></p> <p>And we're just missing our in-game mod settings menu now. Head on over to this site and download it. Now extract it somewhere, and add the .dll file as a Project Reference like so:</p> <p></p> <p>Add our imports: <pre><code>using RiskOfOptions;\nusing RiskOfOptions.Options;\nusing RiskOfOptions.OptionConfigs;\n</code></pre></p> <p>Add our dependency (should be above your class): <pre><code>[BepInDependency(\"com.rune580.riskofoptions\")]\n</code></pre></p> <p>Add a StepSlider in our <code>Awake()</code> like so: <pre><code>ModSettingsManager.AddOption(new StepSliderOption(Scaling, new StepSliderConfig() { increment = 25f, min = 0f, max = 300f }));\n</code></pre></p> <p>The mod page has a guide, so I highly recommend reading that if you're confused.</p> <p>When running the mod now, make sure to have <code>Risk of Options</code> installed. In your settings menu, there should be a new tab called Mod Settings, where your mod's Scaling config is displayed.</p>"},{"location":"Mod-Creation/Assets/Difficulty/#how-do-i-change-the-ambient-level-cap","title":"How do I change the ambient level cap?","text":"<p>Use the event <code>Run.onRunSetRuleBookGlobal</code>: <pre><code>Run.onRunSetRuleBookGlobal += // *tab*\n</code></pre></p> <p>In it, we perform a simple ternary or if else statement: <pre><code>Run.ambientLevelCap = (arg1.selectedDifficulty == ExampleModDiffIndex) ? 1234 : Run.ambientLevelCap;\n</code></pre> As you can see, we don't actually need the second overload. You can rename the overloads however you want, the 1234 here is our desired cap.</p>"},{"location":"Mod-Creation/Assets/Difficulty/#hmm-how-can-i-change-monster-stats-or-give-them-items","title":"Hmm, how can I change monster stats or give them items?","text":"<p>Now this is where other modders would argue, but I'm gonna be showing my way of doing it. And no, I'm not sure if this is the best or most optimized way, so please bear with me.</p> <p>We can use the run events to add and remove our hooks, depending on the difficulty. Declare a bool in your Class like so: <pre><code>        public static bool shouldRun = false;\n</code></pre></p> <p>Then, write a base in <code>Awake()</code> like this: <pre><code>Run.onRunStartGlobal += (Run run) =&gt;\n            {\n                shouldRun = false;\n                if (run.selectedDifficulty == ExampleModDiffIndex)\n                {\n                    shouldRun = true;\n                    /* Here is where our logic should run.\n                    This is nice, because even On.Hooks work greatly and there's not much hassle after setting up this base.\n                    It's worth to note that some things don't properly unhook, leaving changes after playing the difficulty and switching off of it.\n                    However, you can run a cleanup hook in destroy that resets the values to vanilla (though you will have to know them, either by logging or a unity rip of the game.\n                    You also remove the cleanup hooks here with -=.\n                    */\n                }\n            };\n            Run.onRunDestroyGlobal += (Run run) =&gt;\n            {\n                shouldRun = false;\n                // Here is where we can remove our hooks with -= for example.\n                // We can also run our cleanup hooks here, with +=.\n            };\n</code></pre> This makes all of your code only run at the start of a run, when your difficulty is selected. After ending a run, it always removes your modifiers, no matter the difficulty selected.</p> <p>The performance impact should be small, unless you're doing something incorrectly. At most, every hook increases load times slightly after hitting the \"Ready\" button.</p> <p>There's a couple more useful events we can use right now, let's go over them.</p> <p><code>CharacterMaster.onStartGlobal</code> is useful for changing AI and giving items.</p> <p><code>CharacterBody.onBodyAwakeGlobal</code> is useful for changing stats in a more \"precise\" way - potentially per body.</p> <p>For this tutorial, we're going to be using both + a hook, to give enemies items, change AI, a skill and their stats.</p> <p>We use our event in our base like so: <pre><code>if (run.selectedDifficulty == ExampleModDiffIndex)\n                {\n                    shouldRun = true;\n                    CharacterMaster.onStartGlobal += // *tab*\n                }\n</code></pre></p> <p>And in our newly created method, we check if the <code>CharacterMaster's</code> teamindex, to see whether it's a player or not. If it isn't, we give them a Cautious Slug.</p> <pre><code>        private void CharacterMaster_onStartGlobal(CharacterMaster obj)\n        {\n            if (obj.teamIndex != TeamIndex.Player &amp;&amp; obj.inventory)\n            {\n                obj.inventory.GiveItem(RoR2Content.Items.HealWhileSafe, 1);\n            }\n        }\n</code></pre> <p>It is important to null check things (obj.inventory here), as not every master has an inventory for example. If you try to add a Cautious Slug to a Pot, the game will likely break.</p> <p>Here is a quick reference to internal item names used in Risk of Rain 2.</p>"},{"location":"Mod-Creation/Assets/Difficulty/#for-the-ai-change","title":"For the AI change...","text":"<p>...let's say I want to make enemies more accurate with their aim and want to make Lemurians shoot from farther away. I'm also gonna make the change exclusive to enemies.</p> <pre><code>        private void CharacterMaster_onStartGlobal(CharacterMaster obj)\n        {\n            if (obj.teamIndex != TeamIndex.Player)\n            {\n                if (obj.inventory) obj.inventory.GiveItem(RoR2Content.Items.HealWhileSafe, 1);\n\n                if (obj.GetComponent&lt;BaseAI&gt;() != null)\n                {\n                    var ba = obj.GetComponent&lt;BaseAI&gt;();\n                    ba.aimVectorDampTime = 0.03f; // lower value is better aim\n                    ba.aimVectorMaxSpeed = 250f; // higher value is better aim\n                }\n            }\n        }\n</code></pre>"},{"location":"Mod-Creation/Assets/Difficulty/#now-to-get-a-bit-more-in-depth","title":"Now to get a bit more in-depth...","text":"<p>...I'd recommending knowing how <code>AISkillDrivers</code> work. This is what we'll be using to change how far away a Lemurian shoots from. It is the way I do it, again it might not be perfect.</p> <p>The code below is still in our team check. <pre><code>                switch (obj.name)\n                {\n                    case \"LemurianMaster(Clone)\":\n                        AISkillDriver LemurianShoot = (from x in obj.GetComponents&lt;AISkillDriver&gt;()\n                                                       where x.customName == \"StrafeAndShoot\"\n                                                       select x).First();\n                        LemurianShoot.minDistance = 10f;\n                        LemurianShoot.maxDistance = 100f;\n\n                        AISkillDriver LemurianStrafe = (from x in obj.GetComponents&lt;AISkillDriver&gt;()\n                                                        where x.customName == \"StrafeIdley\"\n                                                        select x).First();\n\n                        LemurianStrafe.minDistance = 10f;\n                        LemurianStrafe.maxDistance = 100f;\n                        break;\n                }\n</code></pre> This code searches in the <code>Scene Hierarchy</code> for a given Object name, in this case it's \"LemurianMaster(Clone)\". You can see the Hierarchy by getting mods such as this one or this one.</p> <p>After that, it iterates through every <code>AISkillDriver</code> on the Master, and finds one with a specific name. These make them shoot from a minimum distance of 10m, and a maximum of 100m.</p> <p>In general, I recommend using switches for more than 2 if else cases and caching values. It can make the difference between a lag spike every monster spawn and smooth gameplay.</p>"},{"location":"Mod-Creation/Assets/Difficulty/#the-skill-hook","title":"The skill hook...","text":"<p>...is also gonna be smooth sailing, thanks to our base. Remember to do everything in our base, under our DifficultyIndex.</p> <p>Say I want to change how many times a second a Lemurian shoots its fireball, I need to lower its fireball charging duration. <pre><code>On.EntityStates.LemurianMonster.ChargeFireball.OnEnter += // *tab*\n</code></pre></p> <p>Generates us a method, in which we can change its duration like so: <pre><code>        private void ChargeFireball_OnEnter(On.EntityStates.LemurianMonster.ChargeFireball.orig_OnEnter orig, EntityStates.LemurianMonster.ChargeFireball self)\n        {\n            EntityStates.LemurianMonster.ChargeFireball.baseDuration = 0.9f;\n            orig(self);\n        }\n</code></pre></p> <p>Now this is a bit deceptive. DnSpy clearly shows the baseDuration as 1, yet it's slower than it used to be... What you can do is Log it in the method to get the actual value like so: <pre><code>Logger.LogWarning(\"ChargeFireball Base Duration is \" + EntityStates.LemurianMonster.ChargeFireball.baseDuration);\n</code></pre> Don't forget to call orig!</p> <p>Oh nice, now it shows 0.6 (seconds) in the BepInEx console every time a lemurian charges its fireball.</p> <p>In the case that <pre><code>EntityStates.SomeMonster.SomeState.someProperty\n</code></pre> doesn't exist, also try doing this: <pre><code>self.someProperty\n</code></pre></p> <p>It's important to note that not every field is readily accessible. I would recommend joining the Risk of Rain 2 Modding discord and using the <code>!publicize</code> command in the <code>#bot-chat</code> channel to know how to bypass this.</p>"},{"location":"Mod-Creation/Assets/Difficulty/#and-for-the-last-part-the-stats","title":"And for the last part, the stats.","text":"<p>We use the event that I provided earlier to edit individual stats. Let's say I want to make lemurians and beetles extremely fast. <pre><code>CharacterBody.onBodyAwakeGlobal += // *tab*\n</code></pre></p> <p>This is done in a similar way to our AI/Master changes, where we can utilize a switch and check for the Object name: <pre><code>        private void CharacterBody_onBodyAwakeGlobal(CharacterBody cb)\n        {\n            switch (cb.name)\n            {\n                case \"LemurianBody(Clone)\":\n                    cb.baseMoveSpeed = 25f;\n                    break;\n\n                case \"BeetleBody(Clone)\":\n                    cb.baseMoveSpeed = 40f;\n                    break;\n            }\n        }\n</code></pre></p> <p>We can also make monsters gain additional stats with levels this way, as the <code>CharacterBody</code> has fields such as levelMoveSpeed (aside from health and damage, which we'd just be overwriting). This scales with the Ambient Level, the formula is:</p> <p><code>Total added stat = levelStat * (Ambient Level - 1)</code></p> <p>For the second way, we can make particular types of enemies (such as elites, bosses, etc) gain stats, but they aren't as \"precise\".</p> <p>Again in our base, we want to use the <code>RecalculateStatsAPI</code> event: <pre><code>RecalculateStatsAPI.GetStatCoefficients += // *tab*\n</code></pre></p> <p>Remember to add <code>RecalculateStatsAPI</code> as a BepInDependency!</p> <p>In our generated method we check if the body exists, and its team. After that, we can start customizing, for example like so: <pre><code>        private void RecalculateStatsAPI_GetStatCoefficients(CharacterBody sender, RecalculateStatsAPI.StatHookEventArgs args)\n        {\n            if (sender &amp;&amp; sender.teamComponent.teamIndex != TeamIndex.Player)\n            {\n                if (sender.isElite)\n                {\n                    args.moveSpeedMultAdd += 1f;\n                }\n                else\n                {\n                    args.moveSpeedMultAdd += 0.25f;\n                }\n            }\n        }\n</code></pre></p> <p>This gives +100% movement speed to elite enemies and +25% to every other enemy that isn't an elite.</p> <p>Don't forget to remove our hooks in <code>Run.onRunDestroyGlobal</code>.</p> <p>Our final final code should look like this: <pre><code>using BepInEx;\nusing BepInEx.Configuration;\nusing BepInEx.Logging;\nusing R2API;\nusing R2API.Utils;\nusing RoR2;\nusing UnityEngine;\nusing RiskOfOptions;\nusing RiskOfOptions.Options;\nusing RiskOfOptions.OptionConfigs;\nusing RoR2.CharacterAI;\nusing System.Linq;\n\nnamespace ExampleDifficultyMod\n{\n    [BepInDependency(R2API.R2API.PluginGUID)]\n    [BepInDependency(\"com.rune580.riskofoptions\")]\n    [BepInDependency(LanguageAPI.PluginGUID)]\n    [BepInDependency(DifficultyAPI.PluginGUID)]\n    [BepInDependency(RecalculateStatsAPI.PluginGUID)]\n    [BepInPlugin(PluginGUID, PluginName, PluginVersion)]\n    public class Main : BaseUnityPlugin\n    {\n        public const string PluginGUID = PluginAuthor + \".\" + PluginName;\n\n        public const string PluginAuthor = \"ExampleModAuthor\";\n        public const string PluginName = \"ExampleDifficultyMod\";\n        public const string PluginVersion = \"1.0.0\";\n\n        public static ManualLogSource EDMLogger;\n\n        public static DifficultyDef ExampleModDiffDef;\n\n        public static DifficultyIndex ExampleModDiffIndex;\n\n        public static ConfigEntry&lt;float&gt; Scaling { get; set; }\n\n        public static bool shouldRun = false;\n\n        public void Awake()\n        {\n            EDMLogger = Logger;\n            Scaling = Config.Bind(\"General\", \"Difficulty Scaling\", 150f, \"Percentage of difficulty scaling, 150% is +50%. Difficulty order does not update visually. Vanilla is 150\");\n            ModSettingsManager.AddOption(new StepSliderOption(Scaling, new StepSliderConfig() { increment = 25f, min = 0f, max = 300f }));\n            AddDifficulty();\n            FillTokens();\n            On.RoR2.Language.GetLocalizedStringByToken += Language_GetLocalizedStringByToken;\n            Run.onRunSetRuleBookGlobal += Run_onRunSetRuleBookGlobal;\n\n            Run.onRunStartGlobal += (Run run) =&gt;\n            {\n                shouldRun = false;\n                if (run.selectedDifficulty == ExampleModDiffIndex)\n                {\n                    shouldRun = true;\n                    CharacterMaster.onStartGlobal += CharacterMaster_onStartGlobal;\n                    CharacterBody.onBodyAwakeGlobal += CharacterBody_onBodyAwakeGlobal;\n                    On.EntityStates.LemurianMonster.ChargeFireball.OnEnter += ChargeFireball_OnEnter;\n                    RecalculateStatsAPI.GetStatCoefficients += RecalculateStatsAPI_GetStatCoefficients;\n                    /* Here is where our logic should run.\n                    This is nice, because even On.Hooks work greatly and there's not much hassle after setting up this base.\n                    It's worth to note that some things don't properly unhook, leaving changes after playing the difficulty and switching off of it.\n                    However, you can run a cleanup hook in destroy that resets the values to vanilla (though you will have to know them, either by logging or a unity rip of the game.\n                    You also remove the cleanup hooks here with -=.\n                    */\n                }\n            };\n            Run.onRunDestroyGlobal += (Run run) =&gt;\n            {\n                shouldRun = false;\n                CharacterMaster.onStartGlobal -= CharacterMaster_onStartGlobal;\n                CharacterBody.onBodyAwakeGlobal -= CharacterBody_onBodyAwakeGlobal;\n                On.EntityStates.LemurianMonster.ChargeFireball.OnEnter -= ChargeFireball_OnEnter;\n                RecalculateStatsAPI.GetStatCoefficients -= RecalculateStatsAPI_GetStatCoefficients;\n                // Here is where we can remove our hooks with -= for example.\n                // We can also run our cleanup hooks here, with +=.\n            };\n        }\n\n        private void RecalculateStatsAPI_GetStatCoefficients(CharacterBody sender, RecalculateStatsAPI.StatHookEventArgs args)\n        {\n            if (sender &amp;&amp; sender.teamComponent.teamIndex != TeamIndex.Player)\n            {\n                if (sender.isElite)\n                {\n                    args.moveSpeedMultAdd += 1f;\n                }\n                else\n                {\n                    args.moveSpeedMultAdd += 0.25f;\n                }\n            }\n        }\n\n        private void CharacterBody_onBodyAwakeGlobal(CharacterBody cb)\n        {\n            switch (obj.name)\n            {\n                case \"LemurianBody(Clone)\":\n                    cb.baseMoveSpeed = 25f;\n                    break;\n\n                case \"BeetleBody(Clone)\":\n                    cb.baseMoveSpeed = 40f;\n                    break;\n            }\n        }\n\n        private void ChargeFireball_OnEnter(On.EntityStates.LemurianMonster.ChargeFireball.orig_OnEnter orig, EntityStates.LemurianMonster.ChargeFireball self)\n        {\n            EntityStates.LemurianMonster.ChargeFireball.baseDuration = 0.08f;\n            orig(self);\n        }\n\n        private void CharacterMaster_onStartGlobal(CharacterMaster obj)\n        {\n            if (obj.teamIndex != TeamIndex.Player)\n            {\n                if (obj.inventory) obj.inventory.GiveItem(RoR2Content.Items.HealWhileSafe, 1);\n\n                if (obj.GetComponent&lt;BaseAI&gt;() != null)\n                {\n                    var ba = obj.GetComponent&lt;BaseAI&gt;();\n                    ba.aimVectorDampTime = 0.03f; // lower value is better aim\n                    ba.aimVectorMaxSpeed = 250f; // higher value is better aim\n                }\n\n                switch (obj.name)\n                {\n                    case \"LemurianMaster(Clone)\":\n                        AISkillDriver LemurianShoot = (from x in obj.GetComponents&lt;AISkillDriver&gt;()\n                                                       where x.customName == \"StrafeAndShoot\"\n                                                       select x).First();\n                        LemurianShoot.minDistance = 10f;\n                        LemurianShoot.maxDistance = 100f;\n\n                        AISkillDriver LemurianStrafe = (from x in obj.GetComponents&lt;AISkillDriver&gt;()\n                                                        where x.customName == \"StrafeIdley\"\n                                                        select x).First();\n\n                        LemurianStrafe.minDistance = 10f;\n                        LemurianStrafe.maxDistance = 100f;\n                        break;\n                }\n            }\n        }\n\n        private void Run_onRunSetRuleBookGlobal(Run arg1, RuleBook arg2)\n        {\n            Run.ambientLevelCap = (arg1.selectedDifficulty == ExampleModDiffIndex) ? 1234 : Run.ambientLevelCap;\n        }\n\n        private string Language_GetLocalizedStringByToken(On.RoR2.Language.orig_GetLocalizedStringByToken orig, Language self, string token)\n        {\n            ExampleModDiffDef.scalingValue = Scaling.Value / 50f;\n            if (token == \"EXAMPLEDIFFICULTYMOD_DESCRIPTION\")\n            {\n                return \"My example difficulty description.\\n\\n\" +\n                       \"&lt;style=cStack&gt;&gt;Player Health Regeneration: &lt;style=cIsHealth&gt;-40%&lt;/style&gt;\\n\" +\n                       \"&gt;Difficulty Scaling: &lt;style=cIsHealth&gt;+\" + (Scaling.Value - 100) + \"%&lt;/style&gt;&lt;/style&gt;\";\n            }\n            return orig(self, token);\n        }\n\n        public void FillTokens()\n        {\n            LanguageAPI.Add(\"EXAMPLEDIFFICULTYMOD_NAME\", \"Example Difficulty\");\n            LanguageAPI.Add(\"EXAMPLEDIFFICULTYMOD_DESCRIPTION\", \"My example difficulty description.\\n\\n\" +\n                                                                \"&lt;style=cStack&gt;&gt;Player Health Regeneration: &lt;style=cIsHealth&gt;-40%&lt;/style&gt;\\n\" +\n                                                                \"&gt;Difficulty Scaling: &lt;style=cIsHealth&gt;+\" + (Scaling.Value - 100) + \"%&lt;/style&gt;&lt;/style&gt;\");\n        }\n\n        public void AddDifficulty()\n        {\n            ExampleModDiffDef = new(Scaling.Value / 50f, \"EXAMPLEDIFFICULTYMOD_NAME\", \"EXAMPLEDIFFICULTYMOD_ICON\", \"EXAMPLEDIFFICULTYMOD_DESCRIPTION\", new Color32(255, 255, 255, 255), \"ed\", true);\n            ExampleModDiffDef.iconSprite = null;\n            ExampleModDiffDef.foundIconSprite = true;\n            ExampleModDiffIndex = DifficultyAPI.AddDifficulty(ExampleModDiffDef);\n        }\n    }\n}\n</code></pre></p>"},{"location":"Mod-Creation/Assets/Difficulty/#assetbundledifficulty-icon","title":"AssetBundle/Difficulty Icon","text":"<p>I don't have the difficulty outline template unfortunately. This tutorial's Unity section covers how to get an AssetBundle. However... * The correct unity version that ror2 uses is listed here, so you must install that. * We will be loading our AssetBundle differently for better performance.</p>"},{"location":"Mod-Creation/Assets/Difficulty/#loading-an-assetbundle-externally","title":"Loading an AssetBundle externally","text":"<p>We declare an AssetBundle in our Class like so: <pre><code>public AssetBundle exampleDifficultyModBundle;\n</code></pre> After that, we have to load it in our <code>Awake()</code>: <pre><code>exampleDifficultyModBundle = AssetBundle.LoadFromFile(Assembly.GetExecutingAssembly().Location.Replace(\"myModName.dll\", \"myBundleFileName\"));\n</code></pre> Now, make sure your AssetBundle is placed in the same folder as your .dll when launching modded. You can also set your RiskOfOptions mod icon now, with <pre><code>ModSettingsManager.SetModIcon(exampleDifficultyModBundle.LoadAsset&lt;Sprite&gt;(\"texMyModIcon.png\"));\n</code></pre> Remember to include the extension, and have <code>texMyModIcon</code> be set as Sprite in Unity.</p>"},{"location":"Mod-Creation/Assets/Difficulty/#publishing","title":"Publishing","text":"<p>While publishing the mod, don't forget to add RiskOfOptions as a dependency in your <code>manifest.json</code> and don't forget to include your assetbundle file. It's also nice to provide a screenshot of the lobby with your difficulty modifiers shown, and if it's big enough, an extensive list in your <code>readme.MD</code> file.</p>"},{"location":"Mod-Creation/Assets/Elites/","title":"Creating an Elite","text":""},{"location":"Mod-Creation/Assets/Elites/#choosing-colors-for-elites","title":"Choosing colors for Elites","text":"<p>The following is an excerpt taken from a conversation between Nebby and Buns on Risk of Rain 2 modcord. Original message chain starts here</p> <p>Ideally this page gets updated to be more official.</p> <p>Elite Ramps are just shaders  </p> <p>Shader wise, all a ramp in the game is doing is that transforms the RGBA of whatever diffuse texture into a grayscale texture and then uses the X&amp;Y values as the UV for the ramp</p> <p></p> <p>as a result, what basically happens is:</p> <p>Lighter colors in the diffuse texture will use the colors on the right side of the ramp</p> <p>Darker colors in the diffuse texture will use the colors on the left side of the ramp</p> <p>Important thing to remember is that when setting up import setting in Unity for ramp texture you need to untick \"Generate Mip Maps\" and \"Wrap Mode\" should be \"Clamp\". Otherwise it would use colours all over the place. Also don't forget about \"Alpha is Transparency\" if your ramp has transparency.</p> <p></p> <p>Example elite ramp:</p> <p></p> <p>Elder Lemurian:</p> <p></p> <p>Example Elite ramp + elder lemurian:</p> <p></p> <p>notice how the darkest parts of the elder lemurian (forearms and lower legs) are colored blue while the more neutral colors are tinted orange and the lightest color, is tinted white-ish so yeah, the base color of the diffuse map is what determines the color picked on the ramp.</p> <p>another example using huntress' default skin and the color ramp above:</p> <p></p> <p>here's another one, leeching elites from Lost In Transit:</p> <p></p> <p>the leeching elite ramp shader: </p> <p>Overall the most important thing on the ramp is knowing how to properly choose harmonious colours so the colors themselves dont clash, having a grasph on color theory (such as complementary colours, monochrome, ) works quite well.</p>"},{"location":"Mod-Creation/Assets/Elites/#example-elite-code","title":"Example Elite code","text":"<p>The following code snippet is taken from Nuxlar's MoreElites mod. Repo can be found here</p> <p>Empowering Elite code: <pre><code>using R2API;\nusing RoR2;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine;\nusing UnityEngine.AddressableAssets;\n\nnamespace MoreElites\n{\n  public class Empowering\n  {\n    public static Color AffixEmpoweringColor = new Color(1f, 0.5f, 0.0f);\n    public static EquipmentDef AffixEmpoweringEquipment;\n    public static BuffDef AffixEmpoweringBuff;\n    public static EliteDef AffixEmpoweringElite;\n    public static float healthMult = 4f;\n    public static float damageMult = 2f;\n    public static float affixDropChance = 0.00025f;\n    private static GameObject EmpoweringWard = PrefabAPI.InstantiateClone(Addressables.LoadAssetAsync&lt;GameObject&gt;(\"RoR2/Base/EliteHaunted/AffixHauntedWard.prefab\").WaitForCompletion(), \"EmpoweringWard\");\n    private static Material empoweringMat = Addressables.LoadAssetAsync&lt;Material&gt;(\"RoR2/Base/WardOnLevel/matWarbannerBuffRing.mat\").WaitForCompletion();\n    private static Texture2D eliteRamp = Addressables.LoadAssetAsync&lt;Texture2D&gt;(\"RoR2/Base/Common/ColorRamps/texRampMagmaWorm.png\").WaitForCompletion();\n    private static Sprite eliteIcon = Addressables.LoadAssetAsync&lt;Sprite&gt;(\"RoR2/Base/EliteIce/texBuffAffixWhite.tif\").WaitForCompletion();\n    // RoR2/Base/Common/ColorRamps/texRampWarbanner.png \n\n    public Empowering()\n    {\n      EmpoweringWard.transform.GetChild(0).GetChild(0).GetComponent&lt;MeshRenderer&gt;().material = empoweringMat;\n      this.AddLanguageTokens();\n      this.SetupBuff();\n      this.SetupEquipment();\n      this.SetupElite();\n      this.AddContent();\n      EliteRamp.AddRamp(AffixEmpoweringElite, eliteRamp);\n      ContentAddition.AddEquipmentDef(AffixEmpoweringEquipment);\n      On.RoR2.CharacterBody.OnBuffFirstStackGained += CharacterBody_OnBuffFirstStackGained;\n      On.RoR2.CharacterBody.OnBuffFinalStackLost += CharacterBody_OnBuffFinalStackLost;\n      On.RoR2.CombatDirector.Init += CombatDirector_Init;\n    }\n\n    private void CombatDirector_Init(On.RoR2.CombatDirector.orig_Init orig)\n    {\n      orig();\n      if (EliteAPI.VanillaEliteTiers.Length &gt; 2)\n      {\n        // HONOR\n        CombatDirector.EliteTierDef targetTier = EliteAPI.VanillaEliteTiers[2];\n        List&lt;EliteDef&gt; elites = targetTier.eliteTypes.ToList();\n        AffixEmpoweringElite.healthBoostCoefficient = 2.5f;\n        AffixEmpoweringElite.damageBoostCoefficient = 1.5f;\n        elites.Add(AffixEmpoweringElite);\n        targetTier.eliteTypes = elites.ToArray();\n      }\n      if (EliteAPI.VanillaEliteTiers.Length &gt; 1)\n      {\n        CombatDirector.EliteTierDef targetTier = EliteAPI.VanillaEliteTiers[1];\n        List&lt;EliteDef&gt; elites = targetTier.eliteTypes.ToList();\n        AffixEmpoweringElite.healthBoostCoefficient = 4f;\n        AffixEmpoweringElite.damageBoostCoefficient = 2f;\n        elites.Add(AffixEmpoweringElite);\n        targetTier.eliteTypes = elites.ToArray();\n      }\n    }\n\n    private void CharacterBody_OnBuffFirstStackGained(\n       On.RoR2.CharacterBody.orig_OnBuffFirstStackGained orig,\n       CharacterBody self,\n       BuffDef buffDef\n       )\n    {\n      orig(self, buffDef);\n      if (buffDef == AffixEmpoweringBuff)\n      {\n        GameObject gameObject = Object.Instantiate&lt;GameObject&gt;(EmpoweringWard);\n        BuffWard component = gameObject.GetComponent&lt;BuffWard&gt;();\n        gameObject.GetComponent&lt;TeamFilter&gt;().teamIndex = self.teamComponent.teamIndex;\n        component.buffDef = RoR2Content.Buffs.Warbanner;\n        component.Networkradius = 25f + self.radius;\n        gameObject.GetComponent&lt;NetworkedBodyAttachment&gt;().AttachToGameObjectAndSpawn(self.gameObject);\n      }\n    }\n\n    private void CharacterBody_OnBuffFinalStackLost(\n  On.RoR2.CharacterBody.orig_OnBuffFinalStackLost orig,\n  CharacterBody self, BuffDef buffDef)\n    {\n      orig(self, buffDef);\n      if (buffDef == AffixEmpoweringBuff)\n      {\n        BuffWard buffWard = self.gameObject.GetComponentInChildren&lt;BuffWard&gt;();\n        Object.Destroy(buffWard);\n      }\n    }\n\n    private void AddContent()\n    {\n      ItemDisplays itemDisplays = new ItemDisplays();\n      ContentAddition.AddEliteDef(AffixEmpoweringElite);\n      ContentAddition.AddBuffDef(AffixEmpoweringBuff);\n    }\n\n    private void SetupBuff()\n    {\n      AffixEmpoweringBuff = ScriptableObject.CreateInstance&lt;BuffDef&gt;();\n      AffixEmpoweringBuff.name = \"EliteEmpoweringBuff\";\n      AffixEmpoweringBuff.canStack = false;\n      AffixEmpoweringBuff.isCooldown = false;\n      AffixEmpoweringBuff.isDebuff = false;\n      AffixEmpoweringBuff.buffColor = AffixEmpoweringColor;\n      AffixEmpoweringBuff.iconSprite = eliteIcon;\n    }\n\n    private void SetupEquipment()\n    {\n      AffixEmpoweringEquipment = ScriptableObject.CreateInstance&lt;EquipmentDef&gt;();\n      AffixEmpoweringEquipment.appearsInMultiPlayer = true;\n      AffixEmpoweringEquipment.appearsInSinglePlayer = true;\n      AffixEmpoweringEquipment.canBeRandomlyTriggered = false;\n      AffixEmpoweringEquipment.canDrop = false;\n      AffixEmpoweringEquipment.colorIndex = ColorCatalog.ColorIndex.Equipment;\n      AffixEmpoweringEquipment.cooldown = 0.0f;\n      AffixEmpoweringEquipment.isLunar = false;\n      AffixEmpoweringEquipment.isBoss = false;\n      AffixEmpoweringEquipment.passiveBuffDef = AffixEmpoweringBuff;\n      AffixEmpoweringEquipment.dropOnDeathChance = affixDropChance;\n      AffixEmpoweringEquipment.enigmaCompatible = false;\n      AffixEmpoweringEquipment.pickupModelPrefab = PrefabAPI.InstantiateClone(Addressables.LoadAssetAsync&lt;GameObject&gt;(\"RoR2/Base/EliteFire/PickupEliteFire.prefab\").WaitForCompletion(), \"PickupAffixEmpowering\", false);\n      foreach (Renderer componentsInChild in AffixEmpoweringEquipment.pickupModelPrefab.GetComponentsInChildren&lt;Renderer&gt;())\n        componentsInChild.material = empoweringMat;\n      AffixEmpoweringEquipment.nameToken = \"EQUIPMENT_AFFIX_EMPOWERING_NAME\";\n      AffixEmpoweringEquipment.descriptionToken = \"EQUIPMENT_AFFIX_EMPOWERING_DESC\";\n      AffixEmpoweringEquipment.pickupToken = \"EQUIPMENT_AFFIX_EMPOWERING_PICKUP\";\n      AffixEmpoweringEquipment.loreToken = \"EQUIPMENT_AFFIX_EMPOWERING_LORE\";\n      AffixEmpoweringEquipment.name = \"AffixEmpowering\";\n    }\n\n    private void SetupElite()\n    {\n      AffixEmpoweringElite = ScriptableObject.CreateInstance&lt;EliteDef&gt;();\n      AffixEmpoweringElite.color = AffixEmpoweringColor;\n      AffixEmpoweringElite.eliteEquipmentDef = AffixEmpoweringEquipment;\n      AffixEmpoweringElite.modifierToken = \"ELITE_MODIFIER_EMPOWERING\";\n      AffixEmpoweringElite.name = \"EliteEmpowering\";\n      AffixEmpoweringElite.healthBoostCoefficient = healthMult;\n      AffixEmpoweringElite.damageBoostCoefficient = damageMult;\n      AffixEmpoweringBuff.eliteDef = AffixEmpoweringElite;\n    }\n\n    private void AddLanguageTokens()\n    {\n      LanguageAPI.Add(\"ELITE_MODIFIER_EMPOWERING\", \"Empowering {0}\");\n      LanguageAPI.Add(\"EQUIPMENT_AFFIX_EMPOWERING_NAME\", \"Empowering Aspect\");\n      LanguageAPI.Add(\"EQUIPMENT_AFFIX_EMPOWERING_PICKUP\", \"Become an aspect of Empowering\");\n      LanguageAPI.Add(\"EQUIPMENT_AFFIX_EMPOWERING_DESC\", \"Become an aspect of Empowering\");\n      LanguageAPI.Add(\"EQUIPMENT_AFFIX_EMPOWERING_LORE\", \"Empowering Aspect Lore\");\n    }\n  }\n}\n</code></pre></p>"},{"location":"Mod-Creation/Assets/Extraction/","title":"Extraction","text":""},{"location":"Mod-Creation/Assets/Extraction/#why","title":"Why","text":"<p>Extracting / Ripping the game assets, but also:</p> <p>Getting the game YAML shaders from the game, which can then later be used on your modding Unity Project directly.</p>"},{"location":"Mod-Creation/Assets/Extraction/#how","title":"How","text":""},{"location":"Mod-Creation/Assets/Extraction/#extracting","title":"Extracting","text":"<p>Download the AssetRipper GUI - Open AssetRipper.exe. A console window will open, as well as a browser window with the GUI. If it doesn't, copy the link in the console and open it yourself. </p> <ul> <li> <p>If it doesn't look like this, you may have an older version. Skip to the Version 0.3.4.0 and Older section below.</p> </li> <li> <p>Go to Settings at the top and configure as follows. Main things to note are Shader Export Format, and Script Export Format.</p> </li> <li> <p>Post-SOTS Shaders: Dummy Shaders</p> </li> <li>Pre-SOTS Shaders: YAML Assets</li> </ul> <p></p> <ul> <li>Go to Commands at the top, and enter the path to your Risk of Rain 2 folder in the field. </li> <li>Hit Load.</li> <li>It should take you to the home page with the files now loaded.</li> <li>Go back to the Commands page, enter the path to an EMPTY folder to which you would like to extract the project, and hit Export. </li> </ul>"},{"location":"Mod-Creation/Assets/Extraction/#after-extracting","title":"After Extracting","text":"<p>Chances are if you try to open this project in Unity (make sure you have the right version), it will crash on startup.</p> <ul> <li>Go to your exported folder, navigate to ExportedProject\\Assets\\LightingDataAsset and delete this whole folder.</li> <li>Back to your exported folder, navigate to AuxiliaryFiles\\GameAssemblies, find UnityEngine.UI.dll, and copy this to ExportedProject\\Assets\\Plugins.</li> </ul>"},{"location":"Mod-Creation/Assets/Extraction/#version-0340-and-older","title":"Version 0.3.4.0 and older:","text":"<ul> <li>Open AssetRipper.exe</li> <li>Configuration as follow </li> </ul> <ul> <li>File -&gt; Open File</li> </ul> <ul> <li>Select game executable (Risk of Rain 2.exe)</li> <li>Export -&gt; Export all files</li> </ul> <ul> <li>Select an empty folder where the game will be extracted in.</li> </ul>"},{"location":"Mod-Creation/Assets/Extraction/#after-extracting_1","title":"After Extracting","text":"<p>Chances are if you try to open this project in Unity (make sure you have the right version), it will crash on startup</p> <ul> <li>Go to your exported folder, navigate to ExportedProject\\Assets\\LightingDataAsset and delete this whole folder</li> <li>Back to your exported folder, navigate to AuxiliaryFiles\\GameAssemblies, find UnityEngine.UI.dll, and copy this to ExportedProject\\Assets\\Plugins</li> </ul>"},{"location":"Mod-Creation/Assets/Icons/","title":"Icons","text":""},{"location":"Mod-Creation/Assets/Icons/#overview","title":"Overview","text":"<p>Making icons is really cool, and one of the easier things to do for Risk of Rain 2 modding. Very little coding is required to make it work, so if you ever feel like you're struggling with making the 3d model or skills, take a break and try making some icons instead.</p> <p>We'll go over stuff like - Skin Palette Icons - Ability Icons - Expansion Icons - Artifact Icons - Eventually survivor lobby icons.</p>"},{"location":"Mod-Creation/Assets/Icons/#tools","title":"Tools","text":""},{"location":"Mod-Creation/Assets/Icons/#free-software-try-these-first","title":"Free Software (Try these first)","text":"<ul> <li>Photopea</li> <li>Gimp</li> <li>Aseprite, (Available on Steam but also has a github!)</li> </ul>"},{"location":"Mod-Creation/Assets/Icons/#paid-software","title":"Paid Software","text":"<ul> <li>IcoFX</li> <li>Photoshop, (Honestly, only use this if you already have it. It costs a lot)</li> </ul> <p>Feel free to use any other software you find. To check if it will work, make sure you can do a couple of things - Export to PNG (Super Important) - Adjust canvas size (Most icons are 256 x 256, exceptions will say otherwise) - Choose colors in a variety of ways (RGBA, Hexadecimal etc.)</p> <p>At a bare minimum color must be able to be chosen via RGBA value.</p> <p>Here is an RGBA Image Color Picker That has been found to be useful. (This website also has converters for RGBA to Hexadecimal etc.)</p>"},{"location":"Mod-Creation/Assets/Icons/#importing-icons-to-unity","title":"Importing Icons to Unity","text":"<p>It's really simple:</p> <ul> <li>Export icon to PNG file</li> </ul> <p></p> <ul> <li>Import into desired Unity folder (Drag and drop)</li> </ul> <p></p> <p></p> <ul> <li>Change Texture Type to 2D Sprite</li> <li>Change Compression to None</li> </ul> <p> </p> <ul> <li>Apply Changes</li> <li>Double check the icon name. Typically we name them as <code>texAbilityNameIcon.png</code>, <code>texDefaultSkin.png</code> or <code>texMasterySkin.png</code></li> <li>Double check that the icon is included in your Asset Bundle and Rebuild your bundle.</li> </ul> <p>Note: If you for some reason want to use an icon size such as 128x128. You will want to adjust Pixels Per Units to 50. If you want half the resolution, halving the pixels per unit as well is a decent rule.</p>"},{"location":"Mod-Creation/Assets/Icons/#loading-icons-into-a-mod","title":"Loading Icons into a Mod","text":"<p>If you do not have an asset bundle I recommend look at the Henry Tutorial's method of loading assets from an asset bundle. It is well done and makes loading assets from your asset bundle a bit easier and safer.</p> <p>First you need to double check if you have rebuilt your asset bundle with your icon within it, and have moved the bundle into the right file directory. </p> <p>Create or have a Sprite field and then load from the asset bundle;</p> <p> </p> <p>This expansionDef variant shows two methods of using icons, the addressables and then importing an icon from our asset bundle</p> <p></p>"},{"location":"Mod-Creation/Assets/Icons/#color-notes","title":"Color Notes","text":"<p>Quick Notes about colors, they have: - Hue - What color is it. - Saturation - How intense is that color. - Value - How close it that color to black or white. (0-&gt;100% is black-&gt;white) - Alpha - How transparent is the color as a whole (For most icons this is set to the max of 255)</p>"},{"location":"Mod-Creation/Assets/Icons/#skin-palette-icons","title":"Skin Palette Icons","text":"<p>Feel free to download any of the palettes on this page (I recommend doing so), the middle would be easiest to work with due to higher contrasting colors.</p> <p> </p> <p>Skin icons do a lot for your character and tell a lot of information very simply. The skin icons are closer to survivor color palettes with the following colors and typical locations: - Primary (North/Up) - Secondary (West/Left) - Tertiary (South/Down) - Accents (East/Right)</p> <p>Skin palletes don't always follow the same orientation but typically try keep this pattern. For instance, look at our template palette;</p> <p></p> <p>It is very clear the locations of primary, secondary colors etc. Comparatively, Providence's palette appears to be rotated 90 degrees to the left.</p> <p></p> <p>The palette still looks good and maintains the pattern while differing itself from others. This can be a useful trick when used sparingly. </p>"},{"location":"Mod-Creation/Assets/Icons/#making-your-own","title":"Making Your Own","text":"<p>If you've downloaded one of the palettes from this page, then it will be as simple as filling in each section with a bucket tool. It is recommended to use RGBA values, the color picker provided can help you find colors from specific images if you love them that much. </p> <p>Remember that these are related heavily to the survivor that you make so try not to put anything that doesn't make sense for your character. The benefit of making these skin palette icons is that at any time, you can open them up and snag the colors when painting your 3d character model.</p> <p>When recoloring the palettes, the inner colors are nice and bold, with higher saturation. The borders are relative to the inner colors, typically being a tiny bit less saturated and having higher value. </p> <p>On the left is an inside base color. On the right is an outside border for the same color</p> <p> </p>"},{"location":"Mod-Creation/Assets/Icons/#ability-icons","title":"Ability Icons","text":"<p>Ability icons are also really important, they inform the player as to how their abilities should either work or be from a single picture. </p> <p>Let's not go too overboard and create some placeholder icons, if you're already a decent-&gt;great artist then you might be able to make the final ability icon right off the bat. However, depending on where the ability is in development, you may not want to put a bunch of effort just yet.</p> <p></p> <p>Notice a few things about the ability icon: - It takes up the entire canvas - Part of the icon is behind the border while other are over the border. This gives a slight illusion as if the ability is 3d and coming out of the image. - The colors are related to the survivor in a hierarchy. Ability identity first, survivor identity Second. This ability tells you that you are firing something green/life related before telling you that it comes from a specific Survivor. If the ability were to have a survivor involved, for instance firing a flare into the sky, that would be one of the few times you may want the survivor to appear.  - There are many ways of portraying an ability that do and don't involve a survivor. - This also tells you a lot about the ability, it may not surprise you if I were to say that this icon was for a shotgun ability.</p> <p>Let's do some low effort examples that break rules but allows us to get an idea of what our abilities will do.  From Left to right: Grenade, Fire Grenade, Mortar</p> <p> </p> <p>These aren't great but they're not meant to be great, they're meant to signal to the developer what ability the Survivor currently has.</p>"},{"location":"Mod-Creation/Assets/Icons/#expansion-icons","title":"Expansion Icons","text":"<p>Okay so expansion icons are the ones that pop up in the lobby and tell you that you're using content from a specific expansion/mod. These are not necessary for many mods but for larger mods that bring in multiple survivors, locations and items, it can be nice to have something that represents all that hard work.</p> <p>Expansion Icons are \"weird\" so to speak for a few reasons as they have. - 512 x 512 canvas size - A primary foreground shape - Translucent detailed background - Transparent background - No border on the canvas but an outline around the central shape</p> <p>Note: Remember that when you import to Unity, you will have to increase Pixels Per Unit to 200 due to the canvas size increase</p> <p> </p> <p>When you make your own try keeping a consistent color throughout the entirety of the expansion icon. If it is blue, have the foreground object be blue, with translucent blue background details.</p>"},{"location":"Mod-Creation/Assets/Icons/#translucent-details","title":"Translucent Details","text":"<p>Because these icons have transparent and translucent background details, it may prove to be useful to have a dark background layer that you hide before exporting to the final product. These details are relatively simple, it can be some connected circles, 3 lines in a claw mark fashion, or in the example above an assortment of broken planets and moons.</p> <p>For the translucent layer of the background an Alpha value of around 63 -&gt; 186 can work, this depends on the color you are choosing for your expansion.</p> <ul> <li>Brighter colors such as yellows and blues you can get away with a higher Alpha closer to 186.</li> <li>Reds and Greens are a bit bolder even when translucent and should be pushed closer to an Alpha of 63.</li> <li>For reference the <code>Survivors of the Void</code> icon uses an Alpha of 61.</li> </ul>"},{"location":"Mod-Creation/Assets/Icons/#artifact-icons","title":"Artifact Icons","text":"<p>These are similar to expansion icons, where they make use of both bold full-fledged colors and translucent colors but have details that can make them tricky to design. </p> <p>Breakdown: - 64 x 64 canvas size - These icons do not take up the entire canvas - Enabled and Disabled versions - Borders with Translucent outlines</p> <p>Having a dark background layer can help picture what the icon will look like in game. But it may alter the colors if you draw with the background on </p> <p>If you already know how and just need color reference here are some resources:</p> <p> </p>"},{"location":"Mod-Creation/Assets/Icons/#disabled-icon-colors","title":"Disabled Icon Colors","text":"Color RGBA Grey <code>74, 60, 66, 255</code> Black <code>16, 18, 16, 244</code> Translucent Grey <code>2, 0, 0, 62</code>"},{"location":"Mod-Creation/Assets/Icons/#enabled-icon-colors","title":"Enabled Icon Colors","text":"Color RGBA Highlight Pink <code>245, 231, 245, 255</code> Pink <code>231, 199, 230, 255</code> Dark Pink <code>216, 168, 216, 255</code> Translucent Dark Purple <code>66, 49, 122, 206</code> Translucent Purple <code>14, 4, 96, 137</code> Translucent Light Purple <code>14, 4, 96, 80</code> <p>It is also possible to get the Translucent Dark Purple by painting a Purple of (<code>72, 54, 133, 190</code>) on top of the Translucent Grey</p>"},{"location":"Mod-Creation/Assets/Icons/#style-matching","title":"Style Matching","text":"<p>Something nice to try to do is style matching. This means making artifact icons that feel like they already are a part of the game. </p> <p>Risk of Rain icons tend to stay very simple. Squares, circles, or adjacent shapes. There are those that get more complex (Devotion and Delusion) but simple is the goal (Evolution and Honor). If you decide/have an idea for an artifact's shape and design that does not match the style of Risk of Rain, still go ahead and make it. Having multiple versions of these icons can help you make minor or major changes in the future as you see fit.</p>"},{"location":"Mod-Creation/Assets/Icons/#disabled-icons","title":"Disabled Icons","text":"<p>Try making an artifact icon by making the disabled version first. Why? Because by doing so we use fewer colors, can focus on the silhouette of the artifact more and can make changes more quickly without ripping our hair out over things we do and don't like about the design.</p> <p>When doing your borders and can control how pixel perfect your border is, remember that the border is a circle rather than a square fit around your shape.</p> <p> </p> <p>Example: Disabled Artifact of Glory</p> <p>Reminder: The entire canvas is not used for the artifacts; the artifact just sits in the center of our canvas as much as it can.</p>"},{"location":"Mod-Creation/Assets/Icons/#enabled-icons","title":"Enabled Icons","text":"<p>If you made the disabled version of your icon first, this gets to be pretty simple. Color replacement and then a few more borders.</p>"},{"location":"Mod-Creation/Assets/Icons/#color-evolution","title":"Color Evolution","text":"<ul> <li>Grey -&gt; Pink</li> <li>Black -&gt; Dark Pink</li> <li>Translucent Grey -&gt; Translucent Dark Purple</li> </ul> <p>When handling overlapping shapes, you may have to manually add in the color transition rather than relying on an outline tool</p> <p>Example: Left - Enabled Artifact of Glory, Right - Enabled Artifact of War</p> <p> </p> <p>Note: In either of these artifacts, highlights are not involved. Your artifacts can have highlighting, but it is not a requirement.</p>"},{"location":"Mod-Creation/Assets/Icons/#survivor-profile-lobby-icons","title":"Survivor Profile Lobby Icons","text":"<p>To start, download the Body Icon Template from the Risk of Rain 2 Modding Discord. It's also pinned in the #character-creation channel.</p> <p>This section will use GIMP, but should be possible in other software. As an example, we're going to use the blue Lemurian icon already present and add the signature blue outline other lobby icons have to the best of our ability. This process can be copied exactly for custom survivor icons, just follow the instructions in the Discord message to create your own icon to use.</p> <p>Open the .psd file using GIMP.</p> <p>First, you'll see the following prompt. Selecting either option is fine and is up to personal preference.</p> <p></p> <p>Next, click here to show the Lemurian icon we'll be working with. You'll see an Eye icon appear once you do, and the image will be visible in the center.</p> <p></p> <p>Click on Layer 10, then right click on the main image in the center and choose Layer &gt; Layer to Image Size.</p> <p>On the left side, change the Active foreground color to the following:</p> Color RGBA Light Sky Blue Outline <code>146, 178, 236, 255</code> <p>Press U to enable the Fuzzy Select tool, and set Threshold on the left to 255.</p> <p></p> <p>Click anywhere on the Lemurian to select the entire thing, and it should now have a black and white dashed outline.</p> <p>Here's the process to create an outline that's the same every time. - Right click on the image, then choose Select &gt; Grow, and grow the selection by 9 pixels. - Right click again, this time choosing Select &gt; Border, setting it to the following:</p> <p></p> <ul> <li>Select the Bucket Fill tool using Shift+B and click inside the selection. You should now have a nice outline around the lemurian!</li> <li>Press Ctrl+Shift+E to open the export menu, and change the name to texSurvivorIcon.png or something similar.</li> <li>Click Export, then Export again in the new popup, and you should now have a proper lobby icon!</li> </ul> <p></p>"},{"location":"Mod-Creation/Assets/Interactables/","title":"Interactables","text":""},{"location":"Mod-Creation/Assets/Interactables/#step-by-step-tutorial","title":"Step-by-Step Tutorial","text":"<ul> <li>Have your mod project set up, check the First Mod template if you haven't already. We'll be making a Beetle Memorial statue as the example interactable, the repo with the complete code is here.</li> <li>Load the required assets, if you're using an existing game asset, you'll need to use PrefabAPI to clone the object so you don't affect the original. The below code includes code for both, choose one \"beebleStatue\". Note: If you use your own model, you'll need to register it using PrefabAPI after setting it up, <code>PrefabAPI.RegisterNetworkPrefab(InteractableModel);</code></li> </ul> <pre><code>private GameObject beebleStatue = Addressables.LoadAssetAsync&lt;GameObject&gt;(\"RoR2/Base/Beetle/mdlBeetle.fbx\").WaitForCompletion();\nprivate GameObject beebleStatue = PrefabAPI.InstantiateClone(Addressables.LoadAssetAsync&lt;GameObject&gt;(\"RoR2/Base/Beetle/mdlBeetle.fbx\").WaitForCompletion(), \"BeebleMemorialStatue\");\nprivate Material beebleStatueMat = Addressables.LoadAssetAsync&lt;Material&gt;(\"RoR2/Base/MonstersOnShrineUse/matMonstersOnShrineUse.mat\").WaitForCompletion();\n</code></pre> <ul> <li>Now that we have the assets, let's prep the beetle model to be turned into a shrine.</li> </ul> <pre><code>// Changing the name to what you'd like it to be called\nbeebleStatue.name = \"BeebleMemorialStatue\"; \n\n// If the GameObject you're using doesn't have a NetworkIdentity, add one for multiplayer compat\nbeebleStatue.AddComponent&lt;NetworkIdentity&gt;(); \n\n// Scaling the model up 3x since we want a nice, large shrine\nbeebleStatue.transform.localScale = new Vector3(3f, 3f, 3f); \n\n// This applies the statue material to the mesh\nbeebleStatue.transform.GetChild(1).GetComponent&lt;SkinnedMeshRenderer&gt;().sharedMaterial = beebleStatueMat; \n\n// Adding a collider so the statue is solid, though it uses a SkinnedMeshRenderer so it doesn't easily work with a MeshCollider, for simplicity sake we're using a simple BoxCollider\nbeebleStatue.transform.GetChild(1).gameObject.AddComponent&lt;BoxCollider&gt;(); \n</code></pre> <ul> <li>After the asset has been prepped, now we'll need to turn it into an interactable</li> </ul> <pre><code>// Add main necessary component PurchaseInteraction, this will add a Highlight component as well\nPurchaseInteraction interaction = beebleStatue.AddComponent&lt;PurchaseInteraction&gt;(); \n\n// What the shrine displays when near\ninteraction.contextToken = \"Beeble Memorial (E to pay respects)\"; \n\n// What the shrine displays on ping\ninteraction.NetworkdisplayNameToken = \"Beeble Memorial (E to pay respects)\"; \n\n// The renderer that will be highlighted by our Highlight component\nbeebleStatue.GetComponent&lt;Highlight&gt;().targetRenderer = beebleStatue.GetComponentInChildren&lt;SkinnedMeshRenderer&gt;(); \n\n// Create a new GameObject that'll act as the trigger\nGameObject trigger = Instantiate(new GameObject(\"Trigger\"), beebleStatue.transform);\n\n// Adding a BoxCollider and setting it to be a trigger so it's not solid \ntrigger.AddComponent&lt;BoxCollider&gt;().isTrigger = true; \n\n// EntityLocator is necessary for the interactable highlight\ntrigger.AddComponent&lt;EntityLocator&gt;().entity = beebleStatue; \n</code></pre> <ul> <li>Great, we now have an interactable, but it does nothing at the moment, so let's create a component that adds functionality</li> </ul> <pre><code>    public class BeebleMemorialManager : NetworkBehaviour\n    {\n      public PurchaseInteraction purchaseInteraction;\n      private GameObject shrineUseEffect = Addressables.LoadAssetAsync&lt;GameObject&gt;(\"RoR2/Base/Common/VFX/ShrineUseEffect.prefab\").WaitForCompletion();\n\n      public void Start()\n      {\n        if (NetworkServer.active &amp;&amp; Run.instance)\n        {\n          purchaseInteraction.SetAvailable(true);\n        }\n\n        purchaseInteraction.onPurchase.AddListener(OnPurchase);\n      }\n\n      [Server]\n      public void OnPurchase(Interactor interactor)\n      {\n        if (!NetworkServer.active)\n        {\n          Debug.LogWarning(\"[Server] function 'BeebleMemorialManager::OnPurchase(RoR2.Interactor)' called on client\");\n          return;\n        }\n\n        EffectManager.SpawnEffect(shrineUseEffect, new EffectData()\n        {\n          origin = gameObject.transform.position,\n          rotation = Quaternion.identity,\n          scale = 3f,\n          color = Color.cyan\n        }, true);\n        Chat.SendBroadcastChat(new Chat.SimpleChatMessage() { baseToken = \"&lt;style=cEvent&gt;&lt;color=#307FFF&gt;o7 to the Beebles we lost in the great lunar war.&lt;/color&gt;&lt;/style&gt;\" });\n      }\n    }\n</code></pre> <ul> <li>Now we'll need to go back and add this component to the shrine and also add the purchaseinteraction to our new component</li> </ul> <pre><code>BeebleMemorialManager mgr = beebleStatue.AddComponent&lt;BeebleMemorialManager&gt;();\nPurchaseInteraction interaction = beebleStatue.AddComponent&lt;PurchaseInteraction&gt;();\ninteraction.contextToken = \"Beeble Memorial (E to pay respects)\";\ninteraction.NetworkdisplayNameToken = \"Beeble Memorial (E to pay respects)\";\nmgr.purchaseInteraction = interaction;\n</code></pre> <ul> <li>So the interactable is now done, you can spawn it directly wherever you want if that's what you're going for, though if you want it to be a normal interactable selectable by the stage director, you'll need to register it using DirectorAPI. First we'll need to create an InteractableSpawnCard that'll contain information that the director will need to spawn it.</li> </ul> <pre><code>InteractableSpawnCard interactableSpawnCard = ScriptableObject.CreateInstance&lt;InteractableSpawnCard&gt;();\ninteractableSpawnCard.name = \"iscBeebleMemorialStatue\";\ninteractableSpawnCard.prefab = beebleStatue;\ninteractableSpawnCard.sendOverNetwork = true;\n// The size of the interactable, there's Human, Golem, and BeetleQueen\ninteractableSpawnCard.hullSize = HullClassification.Golem; \n// Which nodegraph should it spawn on, air or ground\ninteractableSpawnCard.nodeGraphType = RoR2.Navigation.MapNodeGroup.GraphType.Ground; \ninteractableSpawnCard.requiredFlags = RoR2.Navigation.NodeFlags.None;\n// Nodes have flags that help define what can be spawned on it, any node marked \"NoShrineSpawn\" shouldn't spawn our shrine on it\ninteractableSpawnCard.forbiddenFlags = RoR2.Navigation.NodeFlags.NoShrineSpawn;\n// How much should it cost the director to spawn your interactable\ninteractableSpawnCard.directorCreditCost = 0;\ninteractableSpawnCard.occupyPosition = true;\ninteractableSpawnCard.orientToFloor = false;\ninteractableSpawnCard.skipSpawnWhenSacrificeArtifactEnabled = false;\n</code></pre> <ul> <li>Now we'll need to create the DirectorCard and the DirectorCardHolder</li> </ul> <pre><code>DirectorCard directorCard = new DirectorCard\n{\n  selectionWeight = 100, // The higher this number the more common it'll be, for reference a normal chest is about 230\n  spawnCard = interactableSpawnCard,\n};\n\nDirectorAPI.DirectorCardHolder directorCardHolder = new DirectorAPI.DirectorCardHolder\n{\n  Card = directorCard,\n  InteractableCategory = DirectorAPI.InteractableCategory.Shrines\n};\n</code></pre> <ul> <li>Final step, we need to register it with the DirectorAPI, you can register it with all stages or specific stages</li> </ul> <pre><code>// Registers the interactable on every stage\nDirectorAPI.Helpers.AddNewInteractable(directorCardHolder);\n// Or create your stage list and register it on each of those stages\nList&lt;DirectorAPI.Stage&gt; stageList = new List&lt;DirectorAPI.Stage&gt;();\n\nstageList.Add(DirectorAPI.Stage.DistantRoost);\nstageList.Add(DirectorAPI.Stage.AbyssalDepthsSimulacrum);\n\nforeach (DirectorAPI.Stage stage in stageList)\n{\n  DirectorAPI.Helpers.AddNewInteractableToStage(directorCardHolder, stage);\n}\n</code></pre> <ul> <li>Congrats! You can now pay respect to the beetles who bravely gave their lives in the Great Lunar War</li> </ul>"},{"location":"Mod-Creation/Assets/Items/","title":"Items","text":"<p>This tutorial outlines the basic steps of how to create an item, use 3d assets, and implement its behaviour.</p> <p>Warning: Some parts of this tutorial are outdated:</p> <ul> <li> <p>The CustomItem C# project.</p> </li> <li> <p>The way of loading assets, outdated embedded assets technique instead of just putting files next to your bepinex plugin dll.</p> </li> <li> <p>The way the assetbundle is made should be done through the Unity Official AssetBundle Browser or by using ThunderKit</p> </li> </ul> <p>The boilerplate mod implements a very simple item, so using it as a reference point is useful.</p>"},{"location":"Mod-Creation/Assets/Items/#itemapi","title":"ItemAPI","text":"<p>ItemAPI is the submodule of R2API that manages the registration of custom Items, Equipment, and their respective ItemDisplays. When using it you should also declare a dependency to it at the top of your class inheriting from BaseUnityPlugin by adding the attribute <code>[BepInDependency(ItemAPI.PluginGUID)]</code></p> <p>To add an item to the game, a mod maker will have to call the  ItemAPI.Add(CustomItem item) or its equipement counterpart, ItemAPI.Add(CustomEquipment item) method. Once the method is called, a boolean will be returned by ItemAPI to indicate the successful registration of the Item/Equipment. Note that the actual item will be added at the initialisation of the relevant catalog at a later time and until then it will not have an <code>ItemIndex</code>/<code>EquipmentIndex</code> assigned.</p> <p>CustomItem / CustomEquipment is a class that holds 2 variables:</p> <ul> <li> <p>An <code>ItemDef</code> / <code>EquipmentDef</code>: These are classes from the game code, which basically hold all the needed informations for the game to define an item or an equipment, its name, its tier, the text that will show up when you look at its logbook entry, and so on. To create an instance of this class, use <code>ScriptableObject.CreateInstance&lt;ItemDef&gt;()</code>.</p> </li> <li> <p>An array of <code>ItemDisplayRule</code>: This allows to define one rule, or multiple rules that will dictate where the item 3d model will show up on the survivors.</p> </li> </ul>"},{"location":"Mod-Creation/Assets/Items/#unity-assets","title":"Unity assets","text":""},{"location":"Mod-Creation/Assets/Items/#todo-ideally-a-dedicated-page-with-a-tutorial-on-how-to-create-and-export-assets-that-can-be-linked-from-anywhere-else-would-be-better-for-now-keeping-the-item-asset-example-here","title":"TODO: Ideally a dedicated page with a tutorial on how to create and export assets that can be linked from anywhere else would be better. For now keeping the item asset example here.","text":"<p>You can find the Unity version that Risk of Rain 2 uses here. I did an .unitypackage out of my Rampage mod, that you can download here, it'll serve as a base for this part.</p> <p>Launch the editor and create a new project. Once that done, double click the .unitypackage, it should make a popup, every files should be checked by default, press Import, once its imported, you should see various new files in your Assets/ folder.</p> <p>Click on <code>Window</code> -&gt; <code>PackageManager</code> and search for <code>AssetBundleBrowser</code> and install it, if not already done so.</p> <p>Let's start with the Import/ folder. As you can see when going into the Import/belt/ folder, a prefab called is already configured to be included in a future exampleitemmod assetbundle :</p> <p></p> <p>Same goes for the icon located in the Import/belt_icon/ folder : </p> <p></p> <p>You can change the name of the future assetbundle by selecting New on the dropdown menu when clicking on it.</p> <p>Once all the assets you wanted to package are correctly assigned an assetbundle, simply right click on the window explorer of Unity and click on <code>AB Make</code>, it'll be created in the Assets/AssetBundle folder.</p> <p></p> <p></p> <p>Now that we have our assetbundle, we can finally do the best part, the code. ;)</p>"},{"location":"Mod-Creation/Assets/Items/#building-from-source","title":"Building from source","text":"<ul> <li>Clone / Download as zip the Boilerplate Item Solution</li> <li>Open <code>CustomItem.sln</code></li> <li>The code is honestly pretty straight forward, though there is one thing to do still :</li> </ul>"},{"location":"Mod-Creation/Assets/Items/#importing-the-assetbundle-into-the-visual-studio-project","title":"Importing the assetbundle into the Visual Studio Project :","text":"<ul> <li>Right click the project name in the solution explorer </li> <li>Add </li> <li>Existing item </li> <li>Add the assetbundle</li> <li>Properties of assetbundle</li> <li>Select Embedded resource</li> </ul> <p>Then, in the <code>Assets.cs</code> file, make sure that the namespace and the filename of the assetbundle is correctly set. <pre><code>using (var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(\"CustomItem.rampage\"))\n</code></pre></p> <p>You can now compile and test your plugin !</p>"},{"location":"Mod-Creation/Assets/Items/#item-behavior","title":"Item Behavior","text":"<p>Writing code is what makes any item exhibit a behavior, spawn any effects, etc.</p> <p>Below are some APIs or source code methods that are likely to be used or hooked for implementing an item's behavior: - R2API.RecalculateStats for modifying character stats - <code>RoR2.GlobalEventManager.OnHitEnemy</code> for item procs - <code>RoR2.GlobalEventManager.OnCharacterDeath</code> for on-kill procs - <code>RoR2.HealthComponent.TakeDamage</code> for damage modifying effects - <code>RoR2.EquipmentSlot.PerformEquipmentAction</code> for activating an equipment</p> <p>If your item can represent multiple states, .e.g, active and on cooldown, you will need an accompanying ItemBehavior component attached to the character's body game object. The game provides two such mechanisms that are similar in functionality.</p>"},{"location":"Mod-Creation/Assets/Items/#ror2characterbodyitembehavior","title":"<code>RoR2.CharacterBody.ItemBehavior</code>","text":"<p>This class gives you access to two fields: - <code>body</code>, which is the character owning this behavior - <code>stack</code>, which is the number of stacks of the related item</p> <pre><code>public class CustomItemBehavior : CharacterBody.ItemBehavior\n{\n    private void Awake()\n    {\n        // This is important because it prevents OnEnable from getting called\n        // before `this.body` has been assigned a value. If you skip this, you\n        // need to null check for it in OnEnable if you need it.\n        base.enabled = false;\n    }\n\n    private void OnEnable()\n    {\n        // Any initialisation logic, null check for `this.body` as necessary\n        // `this.stack` is still unassigned at this point so use `this.body.inventory`\n    }\n\n    private void FixedUpdate()\n    {\n        // logic\n    }\n\n    private void OnDisable()\n    {\n        // Any clean-up logic, null check for `this.body` as necessary\n    }\n}\n</code></pre> <p>To activate this behavior, hook on <code>RoR2.CharacterBody.OnInventoryChanged</code> and do an inventory check to add the component.</p> <pre><code>On.RoR2.CharacterBody.OnInventoryChanged += CharacterBody_OnInventoryChanged;\n\nprivate void CharacterBody_OnInventoryChanged(On.RoR2.CharacterBody.orig_OnInventoryChanged orig, CharacterBody self)\n{\n    if (NetworkServer.active)\n    {\n        // Setting the behavior stacks to 1 or 0 may be more appropriate\n        // by checking if it exists in the inventory at all.\n        self.AddItemBehavior&lt;CustomItemBehavior&gt;(self.inventory.GetItemCount(customItemDef));\n    }\n    orig(self);\n}\n</code></pre>"},{"location":"Mod-Creation/Assets/Items/#ror2itemsbaseitembodybehavior","title":"<code>RoR2.Items.BaseItemBodyBehavior</code>","text":"<p>This approach also gives you access to <code>body</code> and <code>stack</code> and it's handled in an automatic way where you don't have to manually add or remove the component. This only requires a little bit of boilerplate to achieve.</p> <p>First of all, you need to add the <code>SearchableAttribute</code> to your assembly so any item behaviors in your mod can be detected.</p> <pre><code>using BepInEx;\nusing R2API;\n\n[assembly: HG.Reflection.SearchableAttribute.OptIn]\n\nnamespace MyMod\n{\n    [BepInDependency(ItemAPI.PluginGUID)]\n    [BepInPlugin(PluginGUID, PluginName, PluginVersion)]\n    public class MyMod : BaseUnityPlugin\n    // etc\n}\n</code></pre> <p>Then implement the behavior as follows.</p> <pre><code>public class CustomItemBehavior : BaseItemBodyBehavior\n{\n    [BaseItemBodyBehavior.ItemDefAssociationAttribute(useOnServer = true, useOnClient = false)]\n    public static ItemDef GetItemDef()\n    {\n        return customItemDef;\n    }\n\n    // Any other lifecycle methods you need, such as OnEnable, FixedUpdate, etc.\n}\n</code></pre> <p>It is the method <code>GetItemDef</code> that ensures the game maps this behavior to a certain item. The <code>ItemDefAssociationAttribute</code> declares whether this component is to be handled either by the server, clients, or both. In the majority of the cases due to handling buffs, spawning game objects, etc, just the server is what is needed.</p>"},{"location":"Mod-Creation/Assets/Items/#item-tags","title":"Item tags","text":"<p>Item tags are used by droptables to either require or ban specific categories of items from being selected as loot. The following is a list of the uses of any item tags, compiled by RandomlyAwesome: - <code>AIBlacklist</code> means enemies aren't allowed to have it, in practice it means Scavengers or Artifact of Evolution can't roll for it + some (but not all) ItemStealController behavior is disabled by default - <code>BrotherBlacklist</code> means that specifically Mithrix isn't allowed to have it, usually it's on things that can softlock his fight like tougher times. - <code>CannotSteal</code> prevents being taken by ItemStealController - <code>CannotCopy</code> means things that inherit an inventory (turrets minions etc) won't copy it from their master - <code>CannotDuplicate</code> prevents that item from showing up in 3D printers - <code>WorldUnique</code> items won't show up in any drop tables/random drops (unless manually added) - <code>LowHealth</code> adds the health threshold marker to your health bar - <code>Scrap</code> is prioritised for things that consume items, PriorityScrap is used before Scrap - <code>Cleansable</code> is old/unimplemented behavior for cleansing pools - Gamemodes can remove items with specific tags from the pool, <code>InteractableRelated</code> and <code>ObliterationRelated</code> are disabled in Simulacrum - The rest are pure categorisation, specific drop tables might exclude items with relevant tags. <code>Damage</code>, <code>Healing</code>, and <code>Utility</code> have category chests, the rest don't.</p>"},{"location":"Mod-Creation/Assets/Loading-Assets/","title":"Loading Assets","text":""},{"location":"Mod-Creation/Assets/Loading-Assets/#overview","title":"Overview","text":"<p>This guide covers a method for loading different resources (Such as Soundbanks, Assetbundles, and Language files) without the need to Embed your resources.</p>"},{"location":"Mod-Creation/Assets/Loading-Assets/#why-do-things-this-way","title":"Why do things this way?","text":"<ul> <li>Loading assets from Assetbundles directly consumes less memory overall.</li> <li>No need to rebuild the DLL every time you build your Assetbundle or SoundBank, you can simply build the bundle and have it be moved directly to your mod's folder.</li> <li>Having language files allows anyone to contribute to them via Github, without the need to touch code.</li> <li>Essential for Thunderkit mods, as Thunderkit doesnt allow you to embed resources to the DLL.</li> </ul>"},{"location":"Mod-Creation/Assets/Loading-Assets/#folder-structure","title":"Folder Structure","text":"<p>The structure of your Plugin folder is one of the most important things to load your resources directly, For ease of loading stuff like Bundles, Banks and Language files, it is extremely recommended to leave all the resources you want to load directly on the same directory as your DLL, or on a folder that's in the same directory as your DLL.</p> <p></p>"},{"location":"Mod-Creation/Assets/Loading-Assets/#example-folder-structure-of-starstorm2-nightly-all-the-assetbundles-are-in-the-assetbundles-folder-all-the-language-files-are-in-languages-and-the-soundbank-is-in-soundbanks","title":"example folder structure of Starstorm2 nightly, all the assetbundles are in the assetbundles folder, all the language files are in languages, and the soundbank is in soundbanks.","text":"<p>When going to make a .zip for thunderstore (or to import to r2modman locally), wrap these in a folder called \"plugins\" and have that folder next to your manifest.json and icon.png in the root of your zip.</p>"},{"location":"Mod-Creation/Assets/Loading-Assets/#file-location","title":"File Location","text":"<p>The easiest and safest way of getting the location of your DLL is thru your main plugin, via the Info property. To easily get access to the Info property, you can create a static field in your MainPlugin of type PluginInfo, and set it on Awake.</p> <pre><code>public class MainClass : BaseUnityPlugin\n{\n    public static PluginInfo PInfo {get; private set;}\n    public void Awake()\n    {\n        PInfo = Info;\n    }\n}\n</code></pre>"},{"location":"Mod-Creation/Assets/Loading-Assets/#loading-assetbundles","title":"Loading AssetBundles","text":"<p>For loading the AssetBundle for your mod, you can use the following class as an example.</p> <pre><code>using UnityEngine;\nusing System.IO;\n\n//Static class for ease of access\npublic static class Asset\n{\n    //You will load the assetbundle and assign it to here.\n    public static AssetBundle mainBundle;\n    //A constant of the AssetBundle's name.\n    public const string bundleName = \"mybundle\";\n    // Uncomment this if your assetbundle is in its own folder. Of course, make sure the name of the folder matches this.\n    // public const string assetBundleFolder = \"AssetBundles\";\n\n    //The direct path to your AssetBundle\n    public static string AssetBundlePath\n    {\n        get\n        {\n            //This returns the path to your assetbundle assuming said bundle is on the same folder as your DLL. If you have your bundle in a folder, you can instead uncomment the statement below this one.\n            return Path.Combine(Path.GetDirectoryName(MainClass.PInfo.Location), bundleName);\n            //return Path.Combine(Path.GetDirectoryName(MainClass.PInfo.Location), assetBundleFolder, bundleName);\n        }\n    }\n\n    public static void Init()\n    {\n        //Loads the assetBundle from the Path, and stores it in the static field.\n        mainBundle = AssetBundle.LoadFromFile(AssetBundlePath);\n    }\n}\n</code></pre> <p>You can also load multiple assetBundles for your mod, but the loading of multiple bundles is outside of the scope of this guide.</p>"},{"location":"Mod-Creation/Assets/Loading-Assets/#loading-soundbanks","title":"Loading SoundBanks","text":""},{"location":"Mod-Creation/Assets/Loading-Assets/#loading-soundbanks-from-a-folder","title":"Loading SoundBanks from a folder","text":"<pre><code>using System.IO;\n\npublic static class SoundBank\n{\n    //The folder where your SoundBanks are, it is required for them to be in a folder.\n    public const string soundBankFolder= \"SoundBanks\";\n    public const string soundBankFileName = \"MySoundBank.bnk\";\n    public const string soundBankName = \"MySoundBank\";\n    public static string SoundBankDirectory\n    {\n        get\n        {\n            return Path.Combine(Path.GetDirectoryName(MainClass.PInfo.Location), soundBankFolder);\n        }\n    }\n\n    public static void Init()\n    {\n        var akResult = AkSoundEngine.AddBasePath(SoundBankDirectory);\n        if (akResult == AKRESULT.AK_Success)\n        {\n            Log.Info($\"Added bank base path : {SoundBankDirectory}\");\n        }\n        else\n        {\n            Log.Error(\n                $\"Error adding base path : {SoundBankDirectory} \" +\n                $\"Error code : {akResult}\");\n        }\n\n        akResult = AkSoundEngine.LoadBank(soundBankFileName, out _soundBankId);\n        if (akResult == AKRESULT.AK_Success)\n        {\n            Log.Info($\"Added bank : {soundBankFileName}\");\n        }\n        else\n        {\n            Log.Error(\n                $\"Error loading bank : {soundBankFileName} \" +\n                $\"Error code : {akResult}\");\n        }\n    }\n}\n</code></pre>"},{"location":"Mod-Creation/Assets/Loading-Assets/#loading-soundbanks-with-r2api","title":"Loading Soundbanks with R2API","text":"<p>Loading a soundbank with R2API doesn't require any code from the mod creator. You need to put your soundBank file in the bepinex/plugins folder and change its extension from <code>.bnk</code> to <code>.sound</code>. R2API.Sound module will load it. Note you need to add a reference to R2API.Sound in your thunderstore package manifest if you do not already have it!</p>"},{"location":"Mod-Creation/Assets/Loading-Assets/#loading-language-files","title":"Loading Language Files","text":"<p>Loading LanguageFiles requires a special setup of the Languages folder, an example \"Language Folder Tree\" can be seen here.</p> <p></p>"},{"location":"Mod-Creation/Assets/Loading-Assets/#example-language-folder-tree-of-starstorm-notice-how-the-root-folder-named-languages-contains-a-set-of-subfolders-and-each-subfolder-has-the-name-of-one-of-the-languages-in-ror2-en-is-for-english-es-419-for-spanish-etc-while-each-of-those-subfolders-has-a-json-file-with-the-language-tokens-and-strings","title":"Example language folder tree of starstorm, Notice how the root folder named Languages contains a set of subFolders, and each subFolder has the name of one of the Languages in ROR2, en is for English, es-419 for spanish, etc. While each of those subFolders has a .json file with the Language Tokens and strings.","text":""},{"location":"Mod-Creation/Assets/Loading-Assets/#loading-language-files-with-ror2s-language-system","title":"Loading Language Files with RoR2's Language system","text":"<p>Loading your language files with a delegate within the game allows them to be loaded directly to ROR2's language systems, which means you're avoiding depending on LanguageAPI for loading tokens. Keep in mind this has to be before the Language system is initialized.</p> <pre><code>using RoR2;\nusing System.Collections.Generic;\n\npublic static class Languages\n{\n    //The name of the folder that contains the language tree\n    public const string LanguageFolder = \"Languages\";\n    public string RootLanguageFolderPath =&gt; Path.Combine(Path.GetDirectoryName(MainClass.PInfo.Location), LanguageFolder);\n\n    public static void Init()\n    {\n        //This makes sure that there's no conflicts with R2API's Language systems. Important!\n        if(Directory.Exists(RootLanguageFolderPath))\n        {\n            RoR2.Language.collectLanguageRootFolders += AddOurFolder;\n        }\n    }\n\n    private static void AddOurFolder(List&lt;string&gt; list)\n    {\n        //Adding our root folder with the languages means ror2 will automatically load our language files.\n        list.Add(RootLanguageFolderPath);\n    }\n}\n</code></pre>"},{"location":"Mod-Creation/Assets/Loading-Assets/#loading-languagefiles-with-r2api","title":"Loading LanguageFiles with R2API","text":"<p>R2API automatically loads any file with extension .language if it detects one in the bepinex/plugins folder More details in this page</p> <p>If you want to load language files manually instead, you can do something like this:</p> <pre><code>//The code below assumes you only have 1 language file, and said file is in the same directory as your DLL.\nusing R2API;\npublic static class Languages\n{\n    public const string LanguageFileName = \"LITLanguage.language\";\n\n    public static void Init()\n    {\n        LanguageAPI.AddPath(Path.GetDirectoryName(MainClass.PInfo.Location), languageFileName);\n    }\n}\n</code></pre> <p>Either way, when deploying your mod, the language files should be placed in the same folder as your mod's .dll with the correct folder structure or your mod won't be able to access them.</p>"},{"location":"Mod-Creation/Assets/Localization/","title":"Localization","text":"<p>No code is required for custom tokens, you can use R2API as a dependency of your mod for this.</p> <p>Download the following template : mylangmod.zip * Change README * Change manifest.json</p> <p>The folder and the .language file (both named \"RENAME_ME_MOD_MAKER_BEFORE_RELEASE_MyLanguageMod\") should be renamed to a more fitting name, for example renaming the folder to \"lang\" and the .language file to \"en_lang.language\" (make sure the file still has the .language extension so that R2API can load the file). The .language file and its parent category must then be placed in the <code>bepinex/plugins/{your_mod}</code> folder for it to be loaded and used. * Thunderstore example: <code>Thunderstore Mod Manager\\DataFolder\\RiskOfRain2\\profiles\\{Profile}\\BepInEx\\plugins\\{your_mod}</code></p>"},{"location":"Mod-Creation/Assets/Localization/#language-file-format","title":".language File Format","text":"<p><code>strings</code> determines the default translation, or the translation that the game falls back on if no other translation is specified. Language identifiers are specified using the first two letters of that languages name (French -&gt; fr | English -&gt; en) and the capitalization does not matter so long as the correct id is used. A list of all supported languages can be found in the <code>Risk of Rain 2\\Risk of Rain 2_Data\\StreamingAssets\\Language</code> folder.</p> <p>Example: <pre><code>{\n  \"strings\": {\n    \"TOKEN1\": \"Hustling Fungus\",\n    \"TOKEN_DESC\": \"This will provide a default translation to TOKEN_DESC\",\n  },\n  \"fr\": {\n    \"TOKEN1\": \"Champignons qui se bousculent\",\n    \"TOKEN_DESC\": \"This will provide a French translation to TOKEN_DESC\",\n  },\n  \"en\": {\n    \"TOKEN1\": \"Hustling Fungus\",\n    \"TOKEN_DESC\": \"This will provide an english translation to TOKEN_DESC\",\n  }\n}\n</code></pre></p>"},{"location":"Mod-Creation/Assets/Merging-Materials/","title":"Merging Materials","text":"<p>This guide you help you fellow developer get your model nicely textured in-game with no issues. </p>"},{"location":"Mod-Creation/Assets/Merging-Materials/#requirements","title":"Requirements","text":"<p>image editing software (this guide uses Photoshop) and Blender - preferably 2.8+.</p>"},{"location":"Mod-Creation/Assets/Merging-Materials/#getting-started","title":"Getting Started","text":"<p>I'm gonna assume you already have your model extracted from the game and imported in Blender. (Don't ask anyone for a guide for this, because it's a different method for each game).</p> <p>So for this guide I'll be using Shiva from FF VII Remake.</p> <p>Here I have her mesh with several materials.</p> <p></p> <p>First we'll separate each part of her mesh that has a different material attached to it. Press Tab to go into Edit mode, and select all by pressing A once.</p> <p></p> <p>Now Press P-&gt; Separate By Material</p> <p></p> <p>Tip: After unrapping you can use an addon to orgnize your UVMap such as uvpackmaster2, it not only looks nice, but also correctly resizes, distances the uv islands and makes sure they don't overlap. It is paid, either download it somewhere or find an alternative.</p> <p>It looks like this when using uvpackmaster2:</p> <p></p> <p>Now we have all meshes with their materials ready to be merged, and there's two ways of doing this.</p> <ul> <li> <p>The first method is baking a new texture, which is easier, but loses a bit of texture quality. </p> </li> <li> <p>Second method is merging all textures into one, maintains quality, but it's a bit time consuming.</p> </li> </ul> <p>NOTE: Second method is always recommended, baking a new texture is only recommended when you have a model with too many materials which makes second method process tedious.</p>"},{"location":"Mod-Creation/Assets/Merging-Materials/#baking-a-new-texture","title":"Baking a new texture","text":"<p>We'll go over each material and add a new texture of size 2048 no Alpha. If you want more quality you can make it 4096+, but keep in mind that this will increase the texture file size, we can reduce it's size in unity later though.</p> <p></p> <p>Then we'll go over each mesh and add a new UVMap.</p> <p></p> <p>Now make sure each material has the new texture selected and each mesh has it's new UVMap selected. After that, select all meshes and go into Edit mode. Select all by pressing A and open a new UV Editor tab so we can view all the meshes UVs. </p> <p></p> <p>In the UV Editor tab we'll select all UVs by pressing A once and then, in the 3d View tab in Edit mode, we'll unrap the UVs by pressing U and selecting either Unrap or Smart UV Unrap, the latter being better, but sometimes just Unrap helps. If you do use Smart UV Unrap make sure you set IslandMargin to 0.003+. Play around with the settings until you get a good UV unrap. If that doesn't help lookup some guides on uv mapping.</p> <p></p> <p>Now that we have our new UV Map, all we have to do is bake a new texture into this new UV Map. Go to Render Properties tab, select Render Engine Cycles. Adjust the settings the same as the screenshot. NOTE: Adjust margin to be half your Island Margin you set when you unrapped your UV.</p> <p></p> <p>Now click Bake and watch the magic happen. After blender is done baking your new texture, you'll notice no difference. That's because you havent attached the new texture node as the Base Color of your shader and your new UVMap isn't active. So go ahead and do that for every mesh. You should delete the other UVMaps so you don't have issues when you import your mesh in Unity. </p> <p>Troubleshoot: In case it doesn't work and some mats aren't being baked into the new texture. </p> <ol> <li> <p>Sometimes Blender doesn't like you, and it may ignore that the new texture is actually selected. So make sure you click out to deselect it and select it again.</p> </li> <li> <p>Retrace your steps. Make sure everything is correct, and always double check if any mesh has multiple materials.</p> </li> <li> <p>Make sure all meshes have the new UV Map selected but not active. </p> </li> </ol> <p></p> <p>Now all you have to do is select all meshes and press Ctrl+J to merge them together. Done. NOTE: Don't forget to save your baked texture, because unless you have selected to save External Data you will lose it!</p> <p></p>"},{"location":"Mod-Creation/Assets/Merging-Materials/#merging-textures","title":"Merging textures","text":"<p>This one is simple and easy, just time consuming. </p> <p>First thing we're gonna do is get all the textures loaded in Photoshop (or whatever other image editing software you have).</p> <p>We're gonna set them side by side or on top of eachother (preferably side by side to make it easier later).</p> <p></p> <p>Write down the canvas size, we're gonna need it later.</p> <p>Now in blender, make sure you have the separated meshes each with their own material.</p> <p>Select a mesh, and add the new texture (with all merged textures) to the texture node and link it to your shader.</p> <p></p> <p>Go into Edit Mode and select all, and have a UV Editing window open. There we will rescale the UV to fit the new texture, also you'll notice the UV will get stretched.</p> <p>Shiva's face texture (by itself) has the size of 2048x2048, and since I merged the textures side by side I only have to rescale the X axis of the UV.</p> <p>I'll get the width of the original texture (2048) and divide by the width of the new merged texture which in my case is 5120. The result is 0.4, and that is what I will rescale the X axis of my UV by.</p> <p>In the UV Editing tab have your entire UV selected and press S+X and input the value you got, then drag the UV by pressing G+X until it matches the texture.</p> <p></p> <p></p> <p>Do that for every mesh, then merge them by pressing Ctrl+J and you're done.</p> <p>After you merged you texture, it will probably be above 2k if your model is a real well done HD model.</p> <p>So we can compress it a bit in unity, after importing. I recommend only reducing it's max size, no need for compression, unless your texture is like 15-30 MB.</p> <p></p> <p>That's it, I hope this guide helped you get your mods going and you learned something new.</p> <p>Any questions can be directed to breadguy#5000, knowledge about everything is known and no question will be unanswered. Thank you bb.</p>"},{"location":"Mod-Creation/Assets/Skills/","title":"Skills","text":"<p>This walk-through assumes you know how to make a mod and implement it using BepInEx, if not go to First Mod</p> <p>We will be creating a custom skill for the Commando, with as little fuss as possible</p>"},{"location":"Mod-Creation/Assets/Skills/#step-1-creating-our-skilldef","title":"Step 1: Creating Our SkillDef","text":"<p>To begin your mod, copy and paste the code below, substituting for your own names where suitable.</p> <pre><code>using System;\nusing BepInEx;\nusing EntityStates;\nusing R2API;\nusing RoR2;\nusing RoR2.Skills;\nusing UnityEngine;\nusing UnityEngine.AddressableAssets;\n\nnamespace CustomSkillsTutorial\n{\n    [BepInDependency(R2API.ContentManagement.R2APIContentManager.PluginGUID)]\n    [BepInDependency(LanguageAPI.PluginGUID)]\n\n    [BepInPlugin(\n        \"com.MyName.IHerebyGrantPermissionToDeprecateMyModFromThunderstoreBecauseIHaveNotChangedTheName\",\n        \"IHerebyGrantPermissionToDeprecateMyModFromThunderstoreBecauseIHaveNotChangedTheName\",\n        \"1.0.0\")]\n    public class CustomSkillTutorial : BaseUnityPlugin\n    {\n        public void Awake()\n        {\n            // First we must load our survivor's Body prefab. For this tutorial, we are making a skill for Commando\n            // If you would like to load a different survivor, you can find the key for their Body prefab at the following link\n            // https://xiaoxiao921.github.io/GithubActionCacheTest/assetPathsDump.html\n            GameObject commandoBodyPrefab = Addressables.LoadAssetAsync&lt;GameObject&gt;(\"RoR2/Base/Commando/CommandoBody.prefab\").WaitForCompletion();\n\n            // We use LanguageAPI to add strings to the game, in the form of tokens\n            // Please note that it is instead recommended that you use a language file.\n            // More info in https://risk-of-thunder.github.io/R2Wiki/Mod-Creation/Assets/Localization/\n            LanguageAPI.Add(\"COMMANDO_PRIMARY_SIMPLEBULLET_NAME\", \"Simple Bullet Attack\");\n            LanguageAPI.Add(\"COMMANDO_PRIMARY_SIMPLEBULLET_DESCRIPTION\", $\"Fire a bullet from your right pistol for &lt;style=cIsDamage&gt;300% damage&lt;/style&gt;.\");\n\n            // Now we must create a SkillDef\n            SkillDef mySkillDef = ScriptableObject.CreateInstance&lt;SkillDef&gt;();\n\n            //Check step 2 for the code of the CustomSkillsTutorial.MyEntityStates.SimpleBulletAttack class\n            mySkillDef.activationState = new SerializableEntityStateType(typeof(CustomSkillsTutorial.MyEntityStates.SimpleBulletAttack));\n            mySkillDef.activationStateMachineName = \"Weapon\";\n            mySkillDef.baseMaxStock = 1;\n            mySkillDef.baseRechargeInterval = 0f;\n            mySkillDef.beginSkillCooldownOnSkillEnd = true;\n            mySkillDef.canceledFromSprinting = false;\n            mySkillDef.cancelSprintingOnActivation = true;\n            mySkillDef.fullRestockOnAssign = true;\n            mySkillDef.interruptPriority = InterruptPriority.Any;\n            mySkillDef.isCombatSkill = true;\n            mySkillDef.mustKeyPress = false;\n            mySkillDef.rechargeStock = 1;\n            mySkillDef.requiredStock = 1;\n            mySkillDef.stockToConsume = 1;\n            // For the skill icon, you will have to load a Sprite from your own AssetBundle\n            mySkillDef.icon = null;\n            mySkillDef.skillDescriptionToken = \"COMMANDO_PRIMARY_SIMPLEBULLET_DESCRIPTION\";\n            mySkillDef.skillName = \"COMMANDO_PRIMARY_SIMPLEBULLET_NAME\";\n            mySkillDef.skillNameToken = \"COMMANDO_PRIMARY_SIMPLEBULLET_NAME\";\n\n            // This adds our skilldef. If you don't do this, the skill will not work.\n            ContentAddition.AddSkillDef(mySkillDef);\n\n            // Now we add our skill to one of the survivor's skill families\n            // You can change component.primary to component.secondary, component.utility and component.special\n            SkillLocator skillLocator = commandoBodyPrefab.GetComponent&lt;SkillLocator&gt;();\n            SkillFamily skillFamily = skillLocator.primary.skillFamily;\n\n            // If this is an alternate skill, use this code.\n            // Here, we add our skill as a variant to the existing Skill Family.\n            Array.Resize(ref skillFamily.variants, skillFamily.variants.Length + 1);\n            skillFamily.variants[skillFamily.variants.Length - 1] = new SkillFamily.Variant\n            {\n                skillDef = mySkillDef,\n                unlockableName = \"\",\n                viewableNode = new ViewablesCatalog.Node(mySkillDef.skillNameToken, false, null)\n            };\n        }\n    }\n}\n</code></pre>"},{"location":"Mod-Creation/Assets/Skills/#step-2-coding-our-skill","title":"Step 2: Coding Our Skill","text":"<p>The actual code that governs the behavior of the skill exists in an entity state class.</p> <p>To create a new skill it needs to be inside a <code>public class</code> with its base class being <code>BaseState</code>; for this it must have <code>using RoR2</code>.</p> <p>The namespace of this class shouldn't be in EntityStates.</p> <p>Each skill class must contain the following methods</p> <pre><code>public override void OnEnter()\n{\n    base.OnEnter();\n}\n\npublic override void OnExit()\n{\n    base.OnExit();\n}\n\npublic override void FixedUpdate()\n{\n    base.FixedUpdate();\n}\n\npublic override InterruptPriority GetMinimumInterruptPriority()\n{\n    return InterruptPriority.ChooseYourPriorityHere;\n}\n</code></pre> <p><code>OnEnter()</code> is run once at the start of the skill.</p> <p>It needs to begin with <code>base.OnEnter()</code> after that you can add any code you like to the function an example being <code>Chat.AddMessage(\"IT'S ALIVE\")</code> which shows \"IT'S ALIVE\" when it's called.</p> <p><code>OnExit()</code> is run once at the end of the skill. It needs to end with <code>base.OnExit()</code> and before that you can add any code you like.</p> <p><code>FixedUpdate()</code> is run (almost) every frame of the skill.</p> <p>Example usage of this would be to add a delay to an attack, or to count down the attack interval for multi-hit moves like Commando's Barrage or Merc's Eviscerate.</p> <p>This needs to begin with <code>base.FixedUpdate</code> and needs to contain a block of code which checks if the skill can end, otherwise the character will get stuck in the skill state.</p> <p>Almost all skills in the game have the following block of code, or something similar:</p> <pre><code>if (fixedAge &gt;= this.totalDuration &amp;&amp; isAuthority)\n{\n    outer.SetNextStateToMain();\n    return;\n}\n</code></pre> <p>This requires a variable in the skill <code>float totalDuration</code>.</p> <p><code>GetMinimumInterruptPriority()</code> controls which skills get a priority over others.</p> <p>When a skill is activated, if it has the same or higher priority than the priority returned by this method, it calls <code>OnExit()</code> in the canceled skill function and calls its own <code>OnEnter()</code>.</p> <p>Skills with lower priority do nothing while the skill is running.</p> <p>It is usually recommended that the <code>InterruptPriority</code> returned by this method be higher than the <code>InterruptPriority</code> defined in the <code>SkillDef</code>, otherwise a skill will be able to cancel itself on frame 1 as long as the button is held down.</p> <p><code>GetMinimumInterruptPriority()</code> needs to contain <code>return InterruptPriority.yourpriority;</code></p> <p>For this tutorial, we will simply be firing a single bullet from Commando's right pistol.</p> <p>Our skill state class will look like this:</p> <pre><code>using EntityStates;\nusing RoR2;\nusing UnityEngine;\n//Since we are using effects from Commando's Barrage skill, we will also be using the associated namespace\n//You can also use Addressables or LegacyResourcesAPI to load whichever effects you like\nusing EntityStates.Commando.CommandoWeapon;\n\nnamespace CustomSkillsTutorial.MyEntityStates\n{\n    public class SimpleBulletAttack : BaseSkillState\n    {\n        public float baseDuration = 0.5f;\n        private float duration;\n\n        public GameObject hitEffectPrefab = FireBarrage.hitEffectPrefab;\n        public GameObject tracerEffectPrefab = FireBarrage.tracerEffectPrefab;\n\n        //OnEnter() runs once at the start of the skill\n        //All we do here is create a BulletAttack and fire it\n        public override void OnEnter()\n        {\n            base.OnEnter();\n            this.duration = this.baseDuration / base.attackSpeedStat;\n            Ray aimRay = base.GetAimRay();\n            base.StartAimMode(aimRay, 2f, false);\n            base.PlayAnimation(\"Gesture Additive, Right\", \"FirePistol, Right\");\n            Util.PlaySound(FireBarrage.fireBarrageSoundString, base.gameObject);\n            base.AddRecoil(-0.6f, 0.6f, -0.6f, 0.6f);\n            if (FireBarrage.effectPrefab)\n            {\n                EffectManager.SimpleMuzzleFlash(FireBarrage.effectPrefab, base.gameObject, \"MuzzleRight\", false);\n            }\n\n            if (base.isAuthority)\n            {\n                new BulletAttack\n                {\n                    owner = base.gameObject,\n                    weapon = base.gameObject,\n                    origin = aimRay.origin,\n                    aimVector = aimRay.direction,\n                    minSpread = 0f,\n                    maxSpread = base.characterBody.spreadBloomAngle,\n                    bulletCount = 1U,\n                    procCoefficient = 1f,\n                    damage = base.characterBody.damage * 3f,\n                    force = 3,\n                    falloffModel = BulletAttack.FalloffModel.DefaultBullet,\n                    tracerEffectPrefab = this.tracerEffectPrefab,\n                    muzzleName = \"MuzzleRight\",\n                    hitEffectPrefab = this.hitEffectPrefab,\n                    isCrit = base.RollCrit(),\n                    HitEffectNormal = false,\n                    stopperMask = LayerIndex.world.mask,\n                    smartCollision = true,\n                    maxDistance = 300f\n                }.Fire();\n            }\n        }\n\n        //This method runs once at the end\n        //Here, we are doing nothing\n        public override void OnExit()\n        {\n            base.OnExit();\n        }\n\n        //FixedUpdate() runs almost every frame of the skill\n        //Here, we end the skill once it exceeds its intended duration\n        public override void FixedUpdate()\n        {\n            base.FixedUpdate();\n            if (base.fixedAge &gt;= this.duration &amp;&amp; base.isAuthority)\n            {\n                this.outer.SetNextStateToMain();\n                return;\n            }\n        }\n\n        //GetMinimumInterruptPriority() returns the InterruptPriority required to interrupt this skill\n        public override InterruptPriority GetMinimumInterruptPriority()\n        {\n            return InterruptPriority.Skill;\n        }\n    }\n}\n</code></pre> <p>After building the solution and putting the DLL in your plugins folder, the Commando should now have an additional alt primary skill.</p>"},{"location":"Mod-Creation/Assets/Skills/#addendum","title":"Addendum","text":""},{"location":"Mod-Creation/Assets/Skills/#creating-new-skill-families","title":"Creating New Skill Families","text":"<p>If you want to create a skill that does not fall into a survivor's existing skill families (primary, secondary, etc.), you can do so using the following code, inserted after you have added the <code>SkillDef</code> with the <code>ContentAddition</code> API.</p> <pre><code>//First we add a new GenericSkill component to the survivor's body prefab\nGenericSkill uniqueSkill = commandoBodyPrefab.AddComponent&lt;GenericSkill&gt;();\nuniqueSkill.skillName = commandoBodyPrefab.name + \"UniqueSkill\";\n\n//Then we create a new skill family\nSkillFamily uniqueFamily = ScriptableObject.CreateInstance&lt;SkillFamily&gt;();\n(uniqueFamily as ScriptableObject).name = commandoBodyPrefab.name + \"UniqueFamily\";\nuniqueSkill.SetFieldValue(\"_skillFamily\", uniqueFamily);\nuniqueFamily.variants = new SkillFamily.Variant[0];\n\n//Now we add our skill to the new skill family's variants, same as before\nArray.Resize(ref uniqueFamily.variants, uniqueFamily.variants.Length + 1);\nuniqueFamily.variants[uniqueFamily.variants.Length - 1] = new SkillFamily.Variant\n{\n    skillDef = mySkillDef,\n    unlockableName = \"\",\n    viewableNode = new ViewablesCatalog.Node(mySkillDef.skillNameToken, false, null)\n};\n\n//Finally we add our new SkillFamily using the ContentAddition API\nContentAddition.AddSkillFamily(uniqueFamily);\n</code></pre>"},{"location":"Mod-Creation/Assets/Stage/","title":"Stages","text":""},{"location":"Mod-Creation/Assets/Stage/#warning","title":"!!! WARNING !!!","text":"<p>Making stages is a difficult task. If you are new to modding please consider going  here first. It is also recommended to have experience modding / working in Unity and ThunderKit as most of your time will be in Unity and Thunderkit.</p> <p>There is also a bug in the latest version of ThunderKit: </p> <p>To find the scripting define symbols you need to go to <code>Edit</code> &gt; <code>Project Settings</code> &gt; <code>Player</code> and append <code>RISKOFRAIN2</code> to your Scripting Define Symbols.</p> <p>This page has been updated for SoTS! If there are any screenshots that were taken before SoTS, that means they still apply.</p>"},{"location":"Mod-Creation/Assets/Stage/#quick-terminology","title":"Quick Terminology","text":"<ul> <li>Scene - The internal scene asset / what the player is seeing when the scene is loaded. Includes stages, cutscenes, and menus. (<code>golemplains</code>, <code>golemplains2</code>, <code>arena</code>, <code>artifactworld</code>, <code>crystalworld</code>, etc.)</li> <li>Stage - A playable scene. All stages are scenes but not all scenes are stages. (<code>golemplains</code>, <code>golemplains2</code>, <code>arena</code>, <code>artifactworld</code>, etc.)</li> <li>Locale - The name assigned to a stage or a group of stages. (Titanic Plains, Void Fields, Bulwark's Ambry, etc.)</li> <li>Variant / Alt - An alternate stage in a locale. (Titanic Plains having two different stages: <code>golemplains</code> and <code>golemplains2</code>)</li> <li>\"Night Stage\" / Post-Loop Alt - A alternate stage that appears post loop. </li> <li>\"Part of the Loop\" - Stages 1-5.</li> <li>Normal Progression - The default teleporter progression without taking any other routes.</li> <li>Path of the Colossus - The set of stages to get to Prime Meridian.</li> </ul>"},{"location":"Mod-Creation/Assets/Stage/#tools-and-references","title":"Tools and References","text":""},{"location":"Mod-Creation/Assets/Stage/#modding-editor-tools","title":"Modding / Editor tools","text":"<ul> <li>Thunderkit - This tutorial uses thunderkit. You can make stages without Thunderkit but it is very different and very limited. If you are unaware of how to use Thunderkit, refer to this page. If you need further help, ask questions in the Risk of Rain 2 Modding or Thunderkit Discord Servers.</li> <li>RoR2EditorKit - A package that currently hosts the node placer and an abundance of other Unity editor utilites.</li> <li>R2API.Stages - Not necessarily required but it is heavily urged to have your mod depend on this to make sure stages are implemented and balanced correctly, especially if you are making a variant.</li> <li>R2API.Addressables and R2API.Director - Not required but it hosts the Monster / Interactable Pool Addressable Scriptable objects explained later in the tutorial. Feel free to make your own means of making pools.</li> <li>R2API.Sound - Not required but if you want to have custom music, it is required by this guide.</li> <li>LocationsOfPrecipitation (AKA \"LoP\") - Required to populate certain fields (like the teleporter) or use certain prefabs (like newt statues). However, if you made an alternative to this that is also completely fine.</li> <li>Other usual Thunderkit project packages like BepInEx and RoR2MultiplayerHLAPI.</li> </ul> <p>R2API and BepInEx can be downloaded through the Thunderkit Package Manager. However, RoR2EditorKit, LocationsOfPrecipitation, and RoR2MultiplayerHLAPI should be downloaded via Unity's Package Manager instead. To do this, go to their respective github pages, copy the link under the green button that says <code>&lt;&gt; Code</code>, go to Unity, click on <code>Add package from git URL</code>, paste the link into the field, and then click <code>Add</code>.</p> <p> </p> <p>You can monitor or change the package versions by going to  the <code>manfiest.json</code> in <code>(Project Folder)/Packages/manifest.json</code></p> <p>Waffle House is a good reference to see how the stage is constructed: whether it be how it manages assets or how it loads the stage.</p>"},{"location":"Mod-Creation/Assets/Stage/#runtime-debug-tools","title":"Runtime / Debug Tools","text":"<ul> <li>Debug Toolkit - A mod that gives access to a plethora of console commands for easier debugging.</li> <li>Runtime Inspector or Unity Explorer - Mods that allow in-game inspection on anything loaded in your current scene.</li> <li>Runtime Material Inspector - A mod that depends on Runtime Inspector that allows the editing of materials in game. Extremely important for stages that try to match RoR2's art style.</li> <li>Steam's FPS counter - A setting on Steam that allows you to view your FPS in game. Important for monitoring frame drops caused by your stage.</li> </ul>"},{"location":"Mod-Creation/Assets/Stage/#starting-your-stage","title":"Starting your Stage","text":"<p>Your stage needs a set amount of rules to be declared in order to work as intended. This section will be in Unity specifically, if you want to start with code you can go here. This section goes over the <code>SceneDef</code> Scriptable Object so make sure to cross reference here occasionally if you decide to start with code.</p> <p>RoR2EditorKit also has a Stage Wizard that sets up your stage for you. To use it, right click in your Project field, then go <code>RoR2EditorKit</code> &gt; <code>Wizards</code> &gt; <code>Stage</code>. Make sure a token prefix and Manifest is present in the RoR2EditorKit settings in the Thunderkit Settings tab. After generating the stage, make sure to still read through these upcoming sections to fully grasp what was generated. Make sure to also double check that your stage is accurate to that of the tutorial; the wizard is missing a few things as it was made with less known knowledge about stage making. This will be fixed soon.</p>"},{"location":"Mod-Creation/Assets/Stage/#scenedef","title":"SceneDef","text":"<p>A stage's <code>SceneDef</code> is an identifying Scriptable Object that holds a lot of the stage's basic behavior. In the <code>SceneDef</code> you can declare tokens, required expansions, logbook entry fields music, etc. This is similar to how the <code>ItemDef</code> scriptable object is populated. This also means you can create a <code>SceneDef</code> in code if desired. The <code>SceneType</code> field should be the first thing you figure out- all of which are listed below:</p> <ul> <li><code>Menu</code> are UI based scenes. (main menu, logbook)</li> <li><code>Stage</code> are stages that have time scaling and iterate on the stage counter. (Any stage in the loop like Titanic Plains, Void Locus)</li> <li><code>Intermission</code> are stages that stop time scaling and do not iterate on the stage counter. (Guilded Coast, Bazaar)</li> <li><code>Timed Intermission</code> are stages that are a mix of <code>Stage</code> and <code>Intermission</code>. The stage has time scaling but does not iterate on the stage counter. Only applies to Void Fields. (Void Fields used to be a <code>Stage</code> before version <code>1.2.4.4</code> / CU 7.5)</li> <li><code>Cutscene</code> is self explanitory. (Intro Cutscene, Moon Ending Cutscene)</li> <li><code>Invalid</code> means it is no longer used. You probably shouldn't use this unless you are keeping a deprecated stage in the mod. (<code>moon</code>: the original moon stage)</li> </ul> <p><code>Stage</code>, <code>Intermission</code>, and <code>Timed Intermission</code> are the only things going to be addressed in this tutorial.</p> <p></p> <p>If your stage is completely new and not a variant, the SceneDef name, Scene name, and <code>Base Scene Name Override</code> field should be the same string. A good practice is to have a prefix in your string to lower chances of mod conflicts. For example, I put <code>waffle_</code> in <code>waffle_wafflehouse</code>.</p> <p>If your stage is a variant, the SceneDef name and Scene name should be the same but different from the original stage; <code>Base Scene Name Override</code> should be the same as the original stage. For example, my Scorched Acres variant could be <code>slip_wispgraveyard2</code> but the <code>Base Scene Name Override</code> should be <code>wispgraveyard</code>.</p> <p>The reason why these rules exist is because the game identifies which scene to load by using the SceneDef and Scene names. The <code>Base Scene Name Override</code> field is important for the logbook and how R2API.Stages catalogs stages- of which will be explained here.</p> <p>The Other elements in the SceneDef are as follows:</p>"},{"location":"Mod-Creation/Assets/Stage/#classification","title":"Classification","text":"<ul> <li><code>Is Offline Scene</code> is checked if the scene can only show for individual clients. Usually reserved for menus. Do not check this since you are making a playable stage.</li> <li><code>Stage Order</code>  indicates the stage's spot in the loop. This value is only used to order stages in the logbook by default, but if you are using R2API.Stages, it will also be used when registering the stage into the loop. Stages that aren't part of the loop have values outside the range of 1-5.</li> <li><code>Required Expansion</code> is used to lock a stage to an expansion. If your stage is part of a larger mod and said mod has an expansion, you can put your mod's ExpansionDef to this field.</li> </ul>"},{"location":"Mod-Creation/Assets/Stage/#user-facing-name","title":"User-Facing Name","text":"<ul> <li><code>Name Token</code> is the token for the stage name. \"Abyssal Depths\" is correlated with <code>dampcavesimple</code>'s name token: <code>MAP_DAMPCAVE_TITLE</code>.</li> <li><code>Subtitle Token</code> is the token for the stage subtitle. \"Tectonic Relics\" is correlated with <code>dampcavesimple</code>'s subtitle token: <code>MAP_DAMPCAVE_SUBTITLE</code>.</li> <li><code>Preview Texture</code> is the texture of the stage in the logbook. Although directly not correlated, the same texture is used in the <code>Portal Material</code>.</li> </ul>"},{"location":"Mod-Creation/Assets/Stage/#bazaar","title":"Bazaar","text":"<ul> <li><code>Portal Material</code> is the Material shown in the bazaar seer. This field needs to be populated if your stage is part of the loop.</li> <li><code>Portal Selection Message String</code> is the token for the stage bazaar seer message. \"You dream of fire...\" is correlated with <code>dampcavesimple</code>'s portal selection string: <code>BAZAAR_SEER_DAMPCAVESIMPLE</code>.</li> </ul>"},{"location":"Mod-Creation/Assets/Stage/#logbook","title":"Logbook","text":"<ul> <li><code>Should Include In Logbook</code> is checked if the stage should appear in the logbook. Usually turned off for stage variants. <code>golemplains2</code> doesn't have this checked because there would be two \"Titanic Plains\" logs in the logbook if it wasn't.</li> <li><code>Lore Token</code> is the token for the stage lore. I am not putting the entire <code>dampcavesimple</code> log here but the token is <code>MAP_DAMPCAVE_LORE</code>.</li> <li><code>Diorama Prefab</code> is the prefab / model displayed in the logbook.</li> </ul>"},{"location":"Mod-Creation/Assets/Stage/#music","title":"Music","text":"<ul> <li><code>Main Track</code> indicates what music to play during normal play.</li> <li><code>Boss Track</code> indicates what music to play during the teleporter. If there is no teleporter, you don't need to populate this.</li> </ul>"},{"location":"Mod-Creation/Assets/Stage/#color","title":"Color","text":"<ul> <li><code>Environment Color</code> is used for hardware light colors. (I couldn't find anything on this but thats what the Tooltip of the field says)</li> </ul>"},{"location":"Mod-Creation/Assets/Stage/#behavior","title":"Behavior","text":"<ul> <li><code>Suppress Player Entry</code> is checked if the player doesn't spawn in the scene. Don't check this because you aren't making a cutscene.</li> <li><code>Suppress Npc Entry</code> is checked if npcs (like drones) don't spawn into the scene. This is checked in <code>arena</code> due to the fog.</li> <li><code>Block Orbital Skills</code> is checked if you  ~~hate Captain~~ want to turn off Captain's orbital skills in the stage. Usually used in Hidden Realms.</li> <li><code>Valid For Random Selection</code> is checked if you allow the stage to be used in a random stage order. Mark this accordingly in case someone wants to do modded Prismatic Trials runs or another modded gamemode.</li> <li><code>Allows Items To Spawn Objects</code> is checked if you want items like Shipping Request Forum to put objects into the stage. You do not need to check this if the SceneDef type is set to <code>Stage</code>.</li> </ul>"},{"location":"Mod-Creation/Assets/Stage/#artifact","title":"Artifact","text":"<ul> <li><code>Need Skip Devotion Respawn</code> is checked if you want to delay devotion lemurian spawning until there is a valid node graph. This applies for stages like <code>moon2</code>.</li> </ul>"},{"location":"Mod-Creation/Assets/Stage/#destinations","title":"Destinations","text":"<ul> <li><code>Destination Group</code> is the group of destinations after leaving the stage. <code>dampcavesimple</code> has the Stage 5 Scene Group (<code>sgStage5</code>) marked as its destination group.</li> <li><code>Looped Destinations Group</code> is a group of destinations after leaving the stage and when looped. <code>dampcavesimple</code> has the looped Stage 5 Scene Group (<code>loopSgStage5</code>) marked as its looped destinations group.</li> <li><code>Should Update Scene Collection After Looping</code> is checked if you want the stage to swap to the <code>Looped Destinations Group</code> after looping.</li> <li><code>Looped Scene Def</code> is the pairing looped SceneDef. <code>village</code> has <code>villagenight</code> as its looped scene def.</li> <li><code>Destinations</code> is deprecated.</li> </ul>"},{"location":"Mod-Creation/Assets/Stage/#portal-appearance","title":"Portal Appearance","text":"<ul> <li><code>Preferred Portal Prefab</code> is used by the portal dialer for the artifact teleporter (I could be wrong about this). You don't need to worry about this if you are making a normal stage.</li> </ul> <p>Some fields in your <code>SceneDef</code> cannot be filled in directly through Unity (such as Music Tracks, Portal Material, and Destinations). This will be covered in this section.</p>"},{"location":"Mod-Creation/Assets/Stage/#scene","title":"Scene","text":"<p>There are three main pieces in the Scene's hierarchy that makes the stage work properly: the SceneInfo, Director, and GameManager. The Scene's hierarchy will also contain the world, collision, decoration, etc.</p> <p></p>"},{"location":"Mod-Creation/Assets/Stage/#sceneinfo","title":"SceneInfo","text":"<p>The SceneInfo object has two components: <code>Scene Info</code> and <code>Classic Stage Info</code>. The <code>Scene Info</code> holds NodeGraphs and MapNodeGroups- which will be covered here- while the <code>Classic Stage Info</code> holds the <code>Monster Dccs Pool</code>, <code>Interactable Dccs Pool</code>, and Director Credits. All of these will be discussed further into the tutorial. The <code>Interactable Categories</code> and <code>Monster Categories</code> are deprecated.</p> <p></p>"},{"location":"Mod-Creation/Assets/Stage/#director","title":"Director","text":"<p>The Director is what keeps track of monster and ally spawns in the stage. This object should have a <code>Network Identity</code>, <code>Director Core</code>, and <code>Scene Director</code>. Every stage- even stages like <code>bazaar</code>- have these components. If you are planning to have a stage with no monster spawns or teleporter progression, you can leave it be.</p> <p></p> <p>However, if you want monster spawns and teleporter progression, you will need two of <code>Combat Director</code> and the teleporter spawn card. There are two <code>Combat Directors</code> because one is for faster, weaker waves, and the other is for slower, stronger waves. The only difference between the two are the <code>Min Reroll Spawn Interval</code> and <code>Max Reroll Spawn Interval</code> fields.</p> <ul> <li>The faster, weaker combat director should look like this:</li> </ul> <p></p> <ul> <li>The slower, stronger combat director should look like this:</li> </ul> <p></p> <p>To inject the teleporter spawn card, you can use LoP's <code>Addressable Injector</code> component to inject the spawn card into the <code>Scene Director</code>'s <code>Teleporter Spawn Card</code> field. You can inject <code>RoR2/Base/Teleporters/iscTeleporter.asset</code> for a normal teleporter and <code>RoR2/Base/Teleporters/iscLunarTeleporter.asset</code> for the Primordial Teleporter on Sky Meadow. Even though there is no asset populated in the <code>Teleporter Spawn Card</code> field, they are linked and it will populate at runtime. This applies to anything involving <code>Addressable Injector</code>.</p> <p></p> <p>These aren't hard rules on how to set up your director, especially if you are making a stage with a unique functionality.</p>"},{"location":"Mod-Creation/Assets/Stage/#gamemanager","title":"GameManager","text":"<p>The GameManager has one component: <code>Global Event Manager</code>. As the name suggests, this component handles core events in the game like handling Character Deaths and Level Ups. If you do not have this in your scene, your stage will be unplayable.</p> <p></p>"},{"location":"Mod-Creation/Assets/Stage/#world-and-collision","title":"World and Collision","text":"<p>The <code>World</code> layer is attached to most of the game's collision. A lot of the game's collision checks use this layer, so make sure all main geometry is under this layer. Small props with no collision or skybox elements do not need to fall under the <code>World</code> layer. If you cannot see the <code>World</code> Layer, under Import Configuration in the Thunderkit Settings tab, switch <code>Included Settings</code> to be <code>Everything</code>, then reimport RoR2.</p> <p></p> <p>To block out your stage layout, you can use Blender or any other modelling program of your choice. Please be mindful of the amount of vertices in each model as you do not want your stage to drop framerate.</p> <p>All collision should have some form of <code>Collider</code> component. All collider types can be seen here. If you are using a <code>Mesh Collider</code>, make sure your mesh's vertices aren't condensed enough to mess with player collision. The big terrain mesh found on any stage may have a sizable amount of vertices, but it will never mess with collision since they are so spread out.</p> <p>Never use <code>Mesh Collider</code> for detailed, smaller models. If your detailed model can be simplified to a basic shape like a box or sphere, use Unity's primitive collider types such as <code>Box Collider</code> or <code>Sphere Collider</code>. The example below showcases a set piece in <code>golemplains</code> from the top down. Even though the model has indents and holes, it uses a <code>Box Collider</code> (indicated by the green lines) to keep it from ruining player movement.</p> <p></p> <p>If your detailed model is more irregular, you will have to create a simplified mesh that matches your model and use that in your <code>Mesh Collider</code> instead. For example, there is this bridge. It is irregular and it cannot be simplified to primitive shapes easily.</p> <p></p> <p>This is the collision that overlaps said bridge.</p> <p></p> <p>There may be minor clipping or inaccuracies when a player walks over the bridge but that is fine, the bridge is traversable and players probably will not notice those minor mistakes.</p>"},{"location":"Mod-Creation/Assets/Stage/#spawnpoints","title":"Spawnpoints","text":"<p><code>Spawn Point</code> is a component that dictates player spawn points. However, the spawn points you place in the scene are only used if you load into the stage with a drop pod (the intro animation when you start your run; Acrid's wake up is also a \"pod\"). When you do a stage transition (say from stage 4 -&gt; 5), the game will remove all the spawn points and generate new ones via the nodegraph (which will be talked about here). The code below is found in <code>RoR2.SceneDirector</code>. <code>arena</code> has it's own way to generate spawn points as well.</p> <p></p> <p>Regardless if your stage is a stage 1, is in a different part of the loop, or a hidden realm, place spawn points. Loop stages usually have four sets of four spawn points, making sixteen spawn points total. The reason why we place spawn points even if the stage isn't a stage 1 is to account for unpredictability: other mods most notably. To place a spawn point, make an empty object and attach the <code>Spawn Point</code> component to it. You will know it works because there will be a wireframe of the commando model. This is also a cheap way to get good size reference without importing a model.</p> <p></p> <p>Keep in mind if you load your stage without a nodegraph via <code>next_stage</code> or stage transition, you will spawn at the world origin.</p>"},{"location":"Mod-Creation/Assets/Stage/#creating-mod-framework-and-loading-your-stage","title":"Creating Mod Framework and Loading Your Stage","text":"<p>Considering you already know how to set up your BaseUnityPlugin and load assetbundles, creating the code for your stage is simple- that is until you make unique gimmicks for the stage such as the Abandoned Aqueduct door, Void Fields cells, or even a final boss.</p> <p>You can either load your SceneDef from your assetbundle as an asset or create a SceneDef at runtime like so:</p> <p><pre><code>public static SceneDef ExampleModStageDef;\n</code></pre> Setting up / completing your SceneDef will look something like this: <pre><code>public void AddSceneDef(){\n\n    //The pseudocode below is only for those who are making their SceneDef in code\n\n    ExampleModStageDef = ScriptableObject.CreateInstance&lt;SceneDef&gt;();\n\n    string identificationStr = \"example_examplestage\";\n\n    ExampleModStageDef.cachedName = identification;\n    ExampleModStageDef.baseSceneNameOverride = identification;\n    ExampleModStageDef.sceneType = SceneType.Stage;\n    ExampleModStageDef.isOfflineScene = false;\n    ExampleModStageDef.stageOrder = 2; //Stage 2\n\n    ExampleModStageDef.nameToken = \"EXAMPLE_MAP_EXAMPLESTAGE_NAME\";\n    ExampleModStageDef.subtitleToken = \"EXAMPLE_MAP_EXAMPLESTAGE_SUBTITLE\";\n    ExampleModStageDef.previewTexture = YourLoadedPreviewTexture;\n\n    ExampleModStageDef.portalSelectionMessageString = \"EXAMPLE_BAZAAR_SEER_EXAMPLESTAGE\";\n\n    ExampleModStageDef.shouldIncludeInLogbook = true;\n    ExampleModStageDef.loreToken = \"EXAMPLE_MAP_EXAMPLESTAGE_LORE\";\n    ExampleModStageDef.dioramaPrefab = YourLoadedDioramaPrefab;\n\n    ExampleModStageDef.suppressPlayerEntry = false;\n    ExampleModStageDef.suppressNpcEntry = false;\n    ExampleModStageDef.blockOrbitalSkills = false;\n    ExampleModStageDef.validForRandomSelection = true;\n\n    //The pseudocode below is applicable no matter where your SceneDef is created.\n\n    //This is \"The Raindrop that Fell to the Sky\"\n    ExampleModStageDef.mainTrack = Addressables.LoadAssetAsync&lt;MusicTrackDef&gt;(\"RoR2/Base/Common/muSong13.asset\").WaitForCompletion();\n\n    //This is \"Thermodynamic Equilibrium\"\n    ExampleModStageDef.bossTrack = Addressables.LoadAssetAsync&lt;MusicTrackDef&gt;(\"RoR2/Base/Common/muSong05.asset\").WaitForCompletion();\n\n    ExampleModStageDef.portalMaterial = StageRegistration.MakeBazaarSeerMaterial(YourLoadedPreviewTexture.texture);\n\n    StageRegistration.AddSceneDef(ExampleModStageDef, ExampleModPluginInfo)\n    StageRegistration.RegisterSceneDefToNormalProgression(ExampleModStageDef);\n}\n</code></pre> This pseudo-code showcases some of R2API's stage utilities such as <code>MakeBazaarSeerMaterial</code>, <code>AddSceneDef</code>, and <code>RegisterSceneDefToNormalProgression</code>. - <code>MakeBazaarMaterial</code> returns a usable bazaar seer material using the texture passed into it. - <code>AddSceneDef</code> adds your SceneDef to your ContentPack. - <code>RegisterSceneDefToNormalProgression</code> automatically adds your stage to the loop depending on your stage order. If your stage order is set to <code>2</code> like the example above, it will add your <code>SceneDef</code> to the appropriate <code>SceneCollection</code> (<code>sgStage2</code> and <code>loopSgStage2</code>) and set your <code>Destinations Group</code> to the next <code>SceneCollection</code> (<code>sgStage3</code> and <code>loopSgStage3</code>). If you are registering a stage 5, the <code>Destinations Group</code> will be set to <code>sgStage1</code> and <code>loopSgStage3</code>. This method has extra parameters to support putting in a custom weight and setting the pre-loop/post-loop status of the stage.</p> <p>R2API.Stages catalogs all stages that get entered into the Normal Progression. At some point in the future there will be efforts into making alternate Path of the Colossus stages.</p> <p>To see all internal stage names please look here.</p> <p>To assist in building the mod, LoP comes with standard Manifests, Pipelines, and PathReferences. Copy <code>Manifest</code> from <code>LocationsOfPrecipitation/Editor/Manifest</code> and fill it in appropriately. Every field can be explained under Thunderkit's documentation window under <code>Tools</code> &gt; <code>Thunderkit</code> &gt; <code>Documentation</code>. Make sure your Scene asset and the rest of your mod's assets are in different bundles.</p> <p></p> <p></p> <p></p> <p>Copy <code>ContributorBuild</code> from <code>LocationsOfPrecipitation/Editor/Pipelines</code> and create a new <code>PathReference</code> by doing right click &gt; <code>Thunderkit</code> &gt; <code>PathReference</code>. Attach your manifest to your pipeline's <code>Manifest</code> field and your pipeline's <code>Manifests</code> field under the <code>Copy</code> job. The <code>Destination</code> field will be the name of your Path Reference in <code>&lt;&gt;</code>. Both should look something like this:</p> <p></p> <p></p> <p>Afterwards you should be able to hit Execute and it will build the mod. If you have trouble building your mod feel free to consult the thunderkit or map-creation channels in the RoR2Modding Discord server.</p> <p>By now your stage should be loadable- buggy but loadable. You should be able to execute <code>next_stage [Name of SceneDef / Scene]</code> and (if applicable) load into the stage at the appropriate loop placement. Make sure to use <code>noclip</code> as it is likely you will fall out of bounds.</p>"},{"location":"Mod-Creation/Assets/Stage/#introduction-to-nodes","title":"Introduction to Nodes","text":"<p>Nodes and pathfinding are both important aspects to all stages. Even for stages without combat like the Bazaar, a nodegraph is still present, albeit a small one. Nodes are the backbone for player spawning, monster spawning, interactable placement, teleporter placement, pathfinding, gates, etc.</p> <p>There are three types of nodes: Ground, Air, and Rail. This tutorial will only be using Ground and Air nodes because Rail nodes have no presence in the game. Air and Ground nodes both dictate the spawning and navigation of aerial and ground bodies respectively. Ground nodes also dictate interactable and teleporter placement. Interactables placed manually into the scene such as Newt Statues, Preon Chest in Ralleypoint, and Froggy in Commencement are exempt from this rule and will be detailed later.</p> <p>To start placing nodes, you will need a node placer / painter. You can either use the one in RoR2EditorKit or make your own. The one in RoR2EditorKit will allow you to place nodes into your scene with set keybinds and raycasts: ground nodes will raycast directly to the ground and air nodes will raycast a set distance above the ground. The raycast will only work when its aimed at collision on the <code>World</code> layer. To use the node placer, create two empty game objects in the scene hierarchy and attach the <code>Map Node Group</code> component to both of them (if you are using the Stage Wizard, these should be generated already). One object will hold our Air Nodes and the other will hold our Ground Nodes. In each of their <code>Map Node Group</code> components, set their <code>Graph Type</code> to the correct node type: Air for the Air Nodes and Ground for the Ground Nodes.</p> <p></p> <p>Next, you want to create two <code>NodeGraph</code> assets. Right click in the Project window and go to <code>Create</code> &gt; <code>RoR2</code> &gt; <code>NodeGraph</code>. The purpose of the Node Graphs is to hold any baked node data once you have finalized your node placement and properties. One Node Graph will be for Air Nodes, the other will be for Ground Nodes. Attach each to the <code>Node Graph</code> field in each respective <code>MapNodeGroup</code> component. The last thing you need to do is attach your Node Groups and Node Graphs to your <code>SceneInfo</code>. Now you are ready to start placing nodes.</p> <p>While having one of your Node Groups selected, you can hover over your terrain and use the displayed keybinds to place or remove nodes. By default, B places nodes at your mouse's raycasted position, M removes the nearest map node, and N places a node at your camera (the last feature is currently unavailable but it will come back). You can enable <code>Use Painter</code> on the Node Group to enable a painter that should make the process a bit quicker. The <code>Parent Game Object</code> field allows you to place nodes under another Game Object automatically; this allows you to maintain some sense of organization as there will be a lot of nodes in your map when you are finished.</p> <p></p> <p>As you place your nodes, you will notice the green links between them. This indicates that they will have a link between them when they are baked: a core mechanism that powers pathfinding. Make sure to polish your node placements so they are properly spaced out and cover the land you want to be playable.</p> <p><p>Be wary of the <code>Clear Nodes</code> and <code>Remove Unconnected Nodes</code> buttons, both of these delete nodes.</p> The <code>Clear Nodes</code> button removes all nodes under your Node Group; the <code>Remove Unconnected Nodes</code> removes nodes that are not connected to other nodes, which should sound fine, however if you do this before baking nodes or after restarting the project without baking nodes again it will remove all of your nodes.</p> <p>Each node has properties that allow different behaviors: <code>Forbidden Hulls</code>, <code>Flags</code>, and <code>Gates</code>. Gates will be covered in its own section as it opens up for more creative use of nodes. The <code>Forbidden Hulls</code> defines what size of monsters are allowed to spawn on that node: <code>Human</code> (player sized monsters such as Lemurians and Wisps), <code>Golem</code> (bigger enemies from Golems to Titans), and <code>Beetle Queen</code> (huge enemies such as Beetle Queen and Grandparent). The <code>Flags</code> have miscellaneous behaviors such as <code>Teleporter OK</code>, <code>No Ceiling</code>, <code>No Character Spawn</code>, <code>No Chest Spawn</code>, and <code>No Shrine Spawn</code>. The Hulls and Flags can be automatically generated via the <code>Update No Ceiling Masks</code>, <code>Update Teleporter Masks</code>, and <code>Update Hull Masks</code> buttons. You can also manually choose the flags and hulls you want via the Node Group or on the placed node. This opens up the ability for further polish as you can adjust teleporter spots or forbid chests and shrines from spawning on a jump pad- of which will be covered later.</p> <p>Once you are confident with your node placements, it is time to bake your node graph. You can do this by clicking on the <code>Bake Node Graph</code> button on your Node Group. You can tell it baked when there are pink lines in between all of your nodes.</p> <p></p> <p>When rebuilding your mod and loading your stage again, you should spawn on your terrain and there should be a teleporter (if you intended there to be one).</p>"},{"location":"Mod-Creation/Assets/Stage/#addressable-prefabs-and-newt-shrines","title":"Addressable Prefabs and Newt Shrines","text":"<p>Similarly to injecting addressable assets into fields such as what was done with the Teleporter interactable card, you can instantiate RoR2 prefabs into your scene. To do this, you attach a GameObject with the <code>Instantiate Addressable Prefab</code> component from LoP. You can then input the addressable key into the <code>Address</code> field and mess with the options the component comes with:</p> <ul> <li><code>Set Position And Rotation To Zero</code> makes the prefab position set to the World origin (0,0,0) and resets any rotations.</li> <li><code>Use Local Position and Rotation</code> sets the prefab to that of its parent GameObject. Set the values of the parent to set the values of the prefab. Checking this value overrides <code>Set Position And Rotation To Zero</code></li> <li><code>Reset in Editor</code> allows instantiation of the prefab in the editor. The prefab does NOT save in the scene so the script is still needed to instantiate the prefab at runtime. Report any GUID errors on your scene as that is a direct effect of trying to save an addressable prefab to the scene.</li> </ul> <p></p> <p>Instantiating Newt Shrine uses the same process as instantiating any other Addressable Prefab. To instantiate a Newt Shrine, input this address:</p> <p><code>RoR2/Base/NewtStatue/NewtStatue.prefab</code></p> <p></p> <p>This script does have limitations: you cannot do any editing to the prefab instantiated. This includes jump pads. This is an issue because you need to edit the trajectory of the jump pad for them to be usable. LoP comes with another component to instantiate RoR2's jump pads- which will be covered in the next section.</p>"},{"location":"Mod-Creation/Assets/Stage/#node-links-and-jump-pads","title":"Node Links and Jump Pads","text":"<p>A lot of stages have Jump Pads or \"Geysers\" to help tie together a stage's traversal options. All of the prefabs shown below are examples of jump pads you may have seen scattered throughout the game.</p> <p></p> <p>When it comes to using jump pads you have two options: making them from scratch or reusing the ones already in game. If you want to make unique looking jump pads, it is recommended to go with the former.</p> <p>To create your own jump pad you will need four parts: the holder, Jump Volume, target, and visuals. The holder, which is called \"Geyser\" in this case, is the parent object holding the entire jump pad. It will be on the <code>Pickups</code> layer and have the <code>Occupy Nearby Nodes</code> component.</p> <p></p> <p>The Jump Volume will be parented under \"Geyser\" and have the <code>Jump Volume</code> component and any type of <code>Collider</code>. The <code>Collider</code> needs to have <code>Is Trigger</code> bool enabled. The Jump Volume is also under the <code>Pickups</code> layer.</p> <p></p> <p>The <code>Jump Volume</code> component is also where you will be operating the jump pad's launch vector. You could operate this manually by editing the <code>Jump Velocity</code> and the <code>Time</code>, however, RoR2EditorKit has an inspector utility to help autocalculate it for you by using a target. The target is an empty GameObject under the Jump Volume that is only used for its position. Just put the target into the <code>Target Elevation Transform</code> field in the <code>Jump Volume</code> then position the target where you want it to be. After setting the <code>Time</code> to any value above 0, check <code>Autocalculate Jump Velocity</code> and it should draw the trajectory of the jump pad towards your target. It can also be helpful putting temporary visuals where your target is located as you are prototyping your stage. Do keep in mind that the math to calculate the trajectory does not account for opposing forces such as shifts in gravity (Fogbound Lagoon's water) or knockback.</p> <p></p> <p>Visuals are important to help communicate where the jump pad is located. In this case, a normal capsule mesh is used. However, it is advised to make your own unique visuals to enforce distinction from the rest of the environment.</p> <p>LoP also has a util to help speed up the creation of custom jump pads. When right clicking on the scene hierarchy, there is a new menu item called <code>Risk of Rain 2</code>. When expanding this menu item, there is <code>Geyser</code>. This will create a \"primitive\" jump pad with all the parts detailed above.</p> <p>There are more parts to making a jump pad beyond these details; it is suggested to search \"Geyser\" in Thunderkit's Addressable Browser and inspect any of the jump pads listed to study how they are constructed.</p> <p>If you want to reuse the jump pads in game, LoP has the <code>Instantiate Geyser Prefab</code> component to allow you to instantiate any of the jump pads shown above. The Geyser type <code>Fan</code> has special attributes which will be covered here as it is intertwined with gates and toggle groups. Do note that LoP does support the unused <code>moon</code> jump pads but not the newer <code>moon2</code> jump pads. The <code>moon2</code> jump pads have a unique condition to be activated hence why LoP doesn't support it- at least at the moment. When instantiating this component, it will also instantiate a <code>Jump Volume</code>. This Jump Volume's values will be copied over to the pad's Jump Volume at runtime. You can then edit this Jump Volume like normal. Beyond the normal <code>Instantiate Addressable Prefab</code> options, <code>Instantiate Geyser Prefab</code> has <code>Conserve Sound String</code> if you want to keep the sound effect of being launched on the original jump pad.</p> <p></p> <p>With both approaches to making jump pads there is an apparent issue: enemies do not know this jump pad exists. You may notice that grounded enemies will use jump pads to get to you as fast as possible. If enemies were to be spawning in your stage right now, they would not do this. To fix this, you need to make use of the <code>Map Node Link</code> component. This component allows you to manually link two nodes together no matter how far apart they are. Place a ground node on both the jump pad and the target. View the node you placed on the jump pad and attach a <code>Map Node Link</code>. Then, attatch the target node to the <code>Other</code> field. There should now be a yellow line connecting the two nodes together. <code>Min Jump Height</code> should also be 0. Make sure the node on the jump pad has these flags: - Teleporter OK is unchecked - No Chest Spawn - No Shrine Spawn - No Character Spawn</p> <p>Ignoring the <code>Gate Name</code> fields for now, it should look something like this:</p> <p></p> <p>Once you rebake your node graph, enemies should be able to interact with these jump pads intentionally.</p> <p></p>"},{"location":"Mod-Creation/Assets/Stage/#map-zones","title":"Map Zones","text":"<p>You now need to make sure players cannot get soft-locked and enemies die out of bounds. To do this, you will need to make use of the <code>Map Zone</code> component. To use this component, create an empty GameObject and put it on the <code>CollideWithCharacterHullOnly</code> layer. Give it any Collider but Mesh Collider and the <code>Map Zone</code> component. Turn on <code>Is Trigger</code> on the Collider. Now you need to configure the <code>Map Zone</code> component to your liking:</p> <ul> <li>Trigger Type: Trigger Exit will trigger the zone type if the CharacterBody leaves the Collider. Trigger Enter will trigger if the CharacterBody enters the Collider.</li> <li>Zone Type: Out of Bounds will teleport players and kill monsters. KickOutPlayers just teleports players.</li> <li>Explicit Destination: An explicit spawn point players get teleported back to.</li> <li>Explicit Spawn Effect Prefab: Vfx when players get teleported.</li> <li>Destination Ideal Radius: The ideal radius of positions the player gets teleported to. In stages in the loop this is normally 0.</li> </ul> <p>The last thing you need to do is change the size of your collider to fit the space you want. There can be multiple colliders with the <code>Map Zone</code> component.</p> <p></p>"},{"location":"Mod-Creation/Assets/Stage/#gates-and-toggle-groups","title":"Gates and Toggle Groups","text":"<p>You may have noticed that a lot of the stages in RoR2 has an RNG aspect to them: the Distant Roost door on both alts sometimes being closed, the <code>dampcavesimple</code> cave sometimes being closed off, and the newt statues' positions being swapped around. These are all a result of the <code>Scene Object Toggle Group</code> component. This component allows you to enable and disable certain objects at random when you enter the scene. To use this component all you need to do is create an empty object (usually under the SceneInfo for consistency) and add the <code>Scene Object Toggle Group</code> component to it.</p> <p></p> <p>Once you have the component, you can start adding the objects you want to be randomized. For example, element 1 in the image below holds the newt shrine randomization. It holds both newt shrines and the range of shrines that can be enabled at once. <code>Min Enabled</code> = 0 means that there can be no newt shrines at minimum. <code>Max Enabled</code> = 2 means that both newt shrines can be enabled at maximum. If you only wanted one shrine to be enabled at a time, you set <code>Min Enabled</code> to 1 and <code>Max Enabled</code> to 1.</p> <p></p> <p>However, when you apply this approach to the level geometry and jump pads, there is an issue of having extraneous or missing nodes. This is an issue because of two reasons:</p> <ul> <li>Extraneous Gameplay Space - When interactables and monsters can spawn and function in inaccessible or unconventional spaces. Imagine the <code>blackbeach</code> door being closed but there are still chests or even a teleporter behind it. This is never good as it can waste interactable and monster credits at best and completely kill the run at worst.</li> <li>Invalid Gameplay Space - When interactables and monsters cannot spawn or function in intended gameplay spaces. Imagine if the garunteed newt / artifact area in <code>wispgraveyard</code> was supposed to be an intended combat space. There is no loot up there and if monsters somehow got up there, they would freeze up and not be able to path find. However, since it isn't intended combat space in our universe, it is fine for monsters and interactables to not spawn and function up there. This concept also includes not properly setting up your jump pad's node links detailed here.</li> </ul> <p>This is where gates come in. Gates allow you group together nodes and enable and disable them under any condition. First, you need to label your nodes under a gate. To do this you simply fill in the <code>Gate Name</code> field in your Node Group and place nodes.</p> <p></p> <p>If you want to edit the <code>Gate Name</code> of already existing nodes, you can shift click nodes you want to edit and fill in <code>Gate Name</code>.</p> <p></p> <p>To toggle certain gates using the <code>Scene Object Toggle Group</code>, you would need another component called <code>Gate State Setter</code>. What this component does is diable or enable certain gates depending on the activity of the GameObject it is attached to. In the image below, if the GameObject named \"GateToggler\" were to be enabled, <code>Gate1</code> will enable and <code>Gate2</code> will disable.</p> <p></p> <p>A \"GateTogglerInverse\" was also made with the opposite properties: when \"GateTogglerInverse\" is enabled, <code>Gate1</code> will disable and <code>Gate2</code> will enable.</p> <p></p> <p>Both of these objects can be used in the <code>Scene Object Toggle Group</code> to effectively make a switch where one gate or the other is enabled at a time.</p> <p></p> <p>However, there are more use cases to gates beyond just initial stage RNG. As mentioned in the Node Links and Jump Pads section, the <code>Fan</code> jump pad has unique properties due to it being purchasable. When <code>Gate Toggle On Purchase</code> is enabled, it opens up the <code>Gate To Enable When Purchased</code> and <code>Gate To Disable When Purchased</code> fields. These work exactly like the <code>Gate State Setter</code> except now it enables and disables the given gates on purchase. In the example below, the fan enables the <code>FanIsland</code> gate on purchase.</p> <p></p> <p>By using knowledge on setting up node links, you can now repeat the same process but the jump pad and target nodes are now under a gate. The reason why gates are important to the <code>Fan</code> jump pad is because you want enemies to recognize when the fan is operational: you do not want enemies to ignore the fan when it is enabled nor do you want them to clump near the fan thinking its enabled.</p> <p>Gates can be enabled and disabled under any under condition- assuming you are willing to put in more code. This also means, yes, the Contact Light from Risk of Rain 1 is possible. Gates will allow you to extend the creativity of your stage and make it into something truly special. However, you do not need gates to make a good stage.</p>"},{"location":"Mod-Creation/Assets/Stage/#monsters-interactables-and-unlocks","title":"Monsters, Interactables, and Unlocks","text":"<p>Every stage in the game has a unique selection of monsters and interactables. Each monster and interactable is represented as a card: <code>CharacterSpawnCard</code> (CSC) and <code>InteractableSpawnCard</code> (ISC) respectively. If you care about stage balance, the most important property in each card is the <code>Director Credit Cost</code>; self-evidently, this is the value used to deduct director credits whenever this card is chosen. This value can be used as a factor to gauge what interactables and monsters are appropriate for your stage. Referencing other stage pools is also a good idea. Using both CSC and ISC, you can compile your monster and interactable pools in a <code>DirectorCardCategorySelection</code> (DCCS). The DCCS can hold both CSC and ISC but you will need to make a DCCS for each: one for monsters and one for interactables. You can create a DCCS by right clicking on the Project window &gt; <code>Create</code> &gt; <code>RoR2</code> &gt; <code>DCCS</code> &gt; <code>DirectorCardCategorySelection</code>.</p> <p>Due to how the DLC works for RoR2, every non-DLC stage has two DCCS for the monster and interactable pools. Both DCCS are named the same except the DLC monster pool has a <code>DLC1</code> suffix. For reference, here are the naming schemes of the <code>skymeadow</code> DCCS:</p> <ul> <li><code>dccsSkyMeadowInteractables</code> - The non-DLC DCCS for interactables</li> <li><code>dccsSkyMeadowInteractablesDLC1</code> - The DLC DCCS for interactables</li> <li><code>dccsSkyMeadowMonsters</code> - The non-DLC DCCS for monsters</li> <li><code>dccsSkyMeadowMonstersDLC1</code> - The DLC DCCS for monsters</li> </ul> <p>After creating your desired amount of DCCS, you will need to feed them into a <code>DccsPool</code> (DP). The DP is responsible for choosing the appropriate DCCS depending on what expansions are enabled. Back to the <code>skymeadow</code> example, if DLC1 was disabled, <code>dccsSkyMeadowInteractables</code> would be chosen; if DLC1 was enabled, <code>dccsSkyMeadowInteractablesDLC1</code> would be chosen.</p> <p></p> <p>Other than the DCCS, the DP can also hold Family Events. The game usually has two seperate categories for family events: \"Family\" and \"VoidInvasion\". \"Family\" has all the standard family events while \"VoidInvasion\" has the Void themed family event specifically.</p> <p></p> <p>Overall, the \"Standard\" category (the DCCS holder) should have a Category Weight of 0.98 while the Family Event categories should have a weight of 0.2.</p> <p>You may notice that you don't have direct access to monster/interactable/family/expansion assets to feed into the DCCS or DP. You have two options: loading all the assets into the DCCS or DP at runtime with code or make use of R2API's scriptable objects, <code>AddressableDirectorCardCategorySelection</code>(ADCCS) and <code>AddressableDCCSPool</code>(ADP). If you are doing the former, you can load the desire assets and populate them into desired fields similarly to what is done with the SceneDef. If you are doing the latter, you will want to right click into the project window &gt; <code>Create</code> &gt; <code>R2API</code> &gt; <code>DirectorAPI</code> &gt; and both objects should be listed there. These scriptable objects act as a holder for any values inputted, then populate them into the target DCCS or DP at runtime. These scriptable objects have a unique property of being able to hold addressable keys; for example, if you wanted your stage's monster pool to have beetles, you can grab its CSC address and input it as follows:</p> <p>You can then expand the amount of categories the DCCS has to put your cards in. In stages in the loop, the DCCS follow a pattern. The monster DCCS has these categories:</p> <p></p> <p>A few disclaimers if you choose to use R2API's director scriptable objects:</p> <ul> <li>The target will be completely overriden with whatever is in the ADCCS/ADP. The target should be completely empty.</li> <li>If you have custom monster or interactable cards, you can input them into the ADCCS. To do this you right click on the context menu next to the desired field (The small RoR2 icon) and click \"Use Direct Reference\".</li> <li>When you want to reference something off of your DCCS/DP at runtime, reference off of the target DCCS/DP not the ADCCS/ADP. The target will already be populated at runtime. This also applies to attaching your DP to the Classic Stage info detailed later on.</li> </ul> <p>Now you are ready to populate your DCCS. To remain consistent with vanilla, it is encouraged to organize your DCCS in a particular way. The monster DCCS has these categories:</p> <ul> <li>Champions - Bosses (Beetle Queen, Magma Worm, etc.)</li> <li>Minibosses - Bigger, credit-heavy monsters (Greater Wisp, Golems, Elder Lemurians, etc.)</li> <li>Basic Monsters - Smaller, less credit-heavy monsters (Lemurians, Wisps, Vultures, etc.)</li> <li>Special - Scavenger</li> </ul> <p>The interactable DCCS has these categories:</p> <ul> <li>Chests - Chests, Large Chests, Category Chests, Trishops, Equipment Barrels, Lunar Pods</li> <li>Barrels - Money Barrels</li> <li>Shrines - Shrine of Combat, Woods, Blood, Chance, Order, Mountain</li> <li>Drones - Healing Drones, Emergency Drones, Gunner Drones, etc.</li> <li>Misc - Gunner Turret</li> <li>Rare - Shrine of Gold, Radar Tower, Cloaked Chest, Legendary Chest</li> <li>Duplicator - Printers and Scrapper</li> <li>Void Stuff (Only Present in DLC1 DCCS) - Void Cradle and Void Seed</li> </ul> <p>After filling out your DCCS you only have to figure out how your stage's log will be unlocked. You will first need to create an <code>UnlockableDef</code> by right clicking in the project field &gt; <code>Create</code> &gt; <code>RoR2</code> &gt; <code>UnlockableDef</code>. Then, you will want base the name of your Unlock Def after this naming scheme:</p> <ul> <li><code>Logs.Stages.</code>Internal Stage Name</li> </ul> <p>For example, Abyssal Depth's logbook unlock is named <code>Logs.Stages.dampcavesimple</code>. For Waffle House its <code>Logs.Stages.waffle_wafflehouse</code>.</p> <p>Afterwards, you will want to set up your Unlock Def like this:</p> <p></p> <p>Note that the <code>Name Token</code> field is the token for the text that appears when you unlock the Stage log entry.</p> <p>Now you need to choose the condition your log book entry unlocks under. Realistically, you can unlock the stage's logbook entry under any condition like any other Unlockable. However, the game only uses two ways to unlock the stage log entry:</p> <ul> <li>Radio Tower - Used for stages in the loop.</li> <li>Logbook Pickup - Used for hidden realms, and the final stage.</li> </ul> <p>If you want to use the Radio Tower, all you need to do is attach your Unlock Def to the <code>Forbidden Unlockable Def</code> field under the Radio Tower entry. Again, right click the context menu to use direct reference.</p> <p></p> <p>If you want to use the Logbook Pickup, it is a bit tricky since you will not only need to instantiate the prefab into the scene, but you will also need to populate all the values into the pickup so it unlocks the stage log entry. The good news is that, if you are using LoP, you can use the <code>Instantiate Logbook Prefab</code> component to easily create the pickup. The component comes with fields to populate the <code>Display Name Token</code> and <code>Display Name Token</code> (the <code>Display Name Token</code> should be the same as the one in the Unlockable Def). The component also comes with the <code>Enable Gravity</code> boolean and a <code>Velocity Random On Start</code> component. Both of these will help assist customizing the movement of your pickup. Another feature of the component is the purple outline that signifies the pickup's position and orientation. This should help aid in your placement of the pickup.</p> <p></p> <p>After this, your DCCS and DP should be ready to be implemented into your scene. To do this, you will just need to attach the interactable and monster DPs into the <code>Interactable Dccs Pool</code> and <code>Monster Dccs Pool</code> fields in your Classic Stage Info.</p> <p></p> <p>With that, your stage should be fully functioning by now. However, there are still more topics to help improve your stages.</p>"},{"location":"Mod-Creation/Assets/Stage/#music_1","title":"Music","text":"<p>This section assumes that you use Jace's scripts for setting up the stage used in WaffleHouse. </p> <p>Despite the fact that we use Thunderkit to create both assembly and asset bundles, we actually don't need to integrate Wwise into our project. While we can make Wwise integration to work (and I've successfully done it pre SoTS) the problems arive when 1. you want to pass the project to someone else and it's a giant pain to integrate Wwise and 2. when DLC comes out and Unity version gets changed, you not only will have to fix your thunderkit integration, you will also have to fix your Wwise integration. So instead we are going to do it in code.</p> <p>Forst thing first, follow this guide to get a Wwise project going. After generating soundbanks note State Group ID for your custom <code>gameplaySongChoice</code> and State IDs for your main and boss songs. </p> <p>First we need to register our custom <code>Play_Music_System</code> to the game's <code>AkSoundEngine</code>.</p> <pre><code>private void Awake()\n{\n    ...\n    On.RoR2.MusicController.Start += MusicController_Start;\n    ...\n}\n\nprivate void MusicController_Start(On.RoR2.MusicController.orig_Start orig, MusicController self)\n{\n    orig(self);\n    AkSoundEngine.PostEvent(\"Play_Music_System2\", self.gameObject);\n}   \n</code></pre> <p>This ensures that events are registered within the game and they will fire when needed.</p> <p>Next, we need to load soundbanks with the sound engine. </p> <pre><code>internal const string SoundBankFileName = \"WaffleHouseMusic.bnk\";\ninternal const string InitSoundBankFileName = \"WaffleHouseInit.bnk\";\ninternal const string SoundbankFolder = \"Soundbanks\";\n\npublic IEnumerator LoadStaticContentAsync(LoadStaticContentAsyncArgs args)\n{\n    ...\n    var musicFolderFullPath = Path.Combine(Path.GetDirectoryName(typeof(ContentProvider).Assembly.Location), SoundbankFolder);\n    var akResult = AkSoundEngine.AddBasePath(soundbanksFolderPath);\n    if (akResult == AKRESULT.AK_Success)\n    {\n        Log.Info($\"Added bank base path : {soundbanksFolderPath}\");\n    }\n    else\n    {\n        Log.Error(\n            $\"Error adding base path : {soundbanksFolderPath} \" +\n            $\"Error code : {akResult}\");\n    }\n\n    akResult = AkSoundEngine.LoadBank(InitSoundBankFileName, out var _);\n    if (akResult == AKRESULT.AK_Success)\n    {\n        Log.Info($\"Added bank : {InitSoundBankFileName}\");\n    }\n    else\n    {\n        Log.Error(\n            $\"Error loading bank : {InitSoundBankFileName} \" +\n            $\"Error code : {akResult}\");\n    }\n\n    akResult = AkSoundEngine.LoadBank(SoundBankFileName, out var _);\n    if (akResult == AKRESULT.AK_Success)\n    {\n        Log.Info($\"Added bank : {SoundBankFileName}\");\n    }\n    else\n    {\n        Log.Error(\n            $\"Error loading bank : {SoundBankFileName} \" +\n            $\"Error code : {akResult}\");\n    }\n    ...\n}\n</code></pre> <p>And finally we need to fill <code>mainTrack</code> and <code>bossTrack</code> of our <code>StageDef</code>. We are gonna use <code>SoundAPI</code>'s <code>CustomMusicTrackDef</code> for that, since it allows us to just fill the ids and API will do the rest.</p> <p><pre><code>internal static IEnumerator LoadAssetBundlesAsync(AssetBundle scenesAssetBundle, AssetBundle assetsAssetBundle, IProgress&lt;float&gt; progress, ContentPack contentPack)\n{\n    ...\n    var mainCustomTrack = ScriptableObject.CreateInstance&lt;SoundAPI.Music.CustomMusicTrackDef&gt;();\n    mainCustomTrack.cachedName = \"WaffleHouseCustomMainMusic\";\n    mainCustomTrack.CustomStates = new List&lt;SoundAPI.Music.CustomMusicTrackDef.CustomState&gt;();\n\n    var cstate1 = new SoundAPI.Music.CustomMusicTrackDef.CustomState();\n    cstate1.GroupId = 487602916U; // gathered from the MOD's Init bank txt file\n    cstate1.StateId = 145640315U; // gathered from the MOD's Init bank txt file\n    mainCustomTrack.CustomStates.Add(cstate1);\n    var cstate2 = new SoundAPI.Music.CustomMusicTrackDef.CustomState();\n    cstate2.GroupId = 792781730U; // gathered from the GAME's Init bank txt file\n    cstate2.StateId = 89505537U; // gathered from the GAME's Init bank txt file\n    mainCustomTrack.CustomStates.Add(cstate2);\n\n    WHSceneDef.mainTrack = mainCustomTrack;\n\n    var bossCustomTrack = ScriptableObject.CreateInstance&lt;SoundAPI.Music.CustomMusicTrackDef&gt;();\n    bossCustomTrack.cachedName = \"WaffleHouseCustomBossMusic\";\n    bossCustomTrack.CustomStates = new List&lt;SoundAPI.Music.CustomMusicTrackDef.CustomState&gt;();\n\n    var cstate11 = new SoundAPI.Music.CustomMusicTrackDef.CustomState();\n    cstate11.GroupId = 487602916U; // gathered from the MOD's Init bank txt file\n    cstate11.StateId = 3403129731U; // gathered from the MOD's Init bank txt file\n    bossCustomTrack.CustomStates.Add(cstate11);\n    var cstate12 = new SoundAPI.Music.CustomMusicTrackDef.CustomState();\n    cstate12.GroupId = 792781730U; // gathered from the GAME's Init bank txt file\n    cstate12.StateId = 580146960U; // gathered from the GAME's Init bank txt file\n    bossCustomTrack.CustomStates.Add(cstate12);\n\n    WHSceneDef.bossTrack = bossCustomTrack;\n    // Don't forget to comment loading and assigning of game's tracks if you have them!\n    ...\n}\n</code></pre> Note the second pair of ids, this page at the bottom gives an explanation of what those ids are and how to fill them appropriately for each track.</p> <p>After all this you should have custom music working within the game. </p> <p>If you want to get music state to change after you finish charging the teleporter, like how vanilla tracks have exit cues when you charge it and then it goes to silence, you can do this the following way:</p> <ul> <li> <p>Add new game sync called \"bossStatus\" and add two states to it: \"alive\" and \"dead'.</p> <p></p> </li> <li> <p>Select your BossSongChoice and in \"Music Switch\" tab add \"bossStatus\" as State Group.</p> <p></p> </li> <li> <p>Now select your boss track in your gameplaySondChoice and select either alive or dead. Make sure both are highlighted, right click and select \"Add Path\". This will add your gameplaySondChoice state and bossStatus state as path in the table below. Do that for both alive and dead states, so you get the following result.</p> <p></p> </li> <li> <p>Now assign track for each of the paths. alive path will play during teleporter event, while its charging and dead will play after its fully charged. You should get it to look something like this.</p> <p></p> </li> <li> <p>If it fails to switch to dead state (or it happens after boss music makes a loop), read the next part.</p> </li> </ul> <p>However, there might be an issue of custom music continuing to play after you switch stages. You can solve this by selecting your Music Switch Container, select Transitions tab, select the default transition that it has and below the list change \"Exit source at\" to \"Immediate\".</p> <p></p> <p>You can (and probably should) do this for both BossSongChoice and GameplaySongChoice containers.</p>"},{"location":"Mod-Creation/Assets/Stage/#optimization","title":"Optimization","text":"<p>Optimization is extremely important to making your stage accessible to players. Currently, this topic isn't as fleshed out as I (JaceDaDorito) want it to be. Please, if you have any good information about stage optimization, message me @JaceDaDorito on discord and I will add it here. That being said, I will present what I know.</p> <p>Keep track of your polygon count! Especially on the stage's main terrain. As said earlier, you do not want the stage's collision to have condensed polygons. Not only that but higher polygon counts will drop framerate. If it helps, Fogbound Lagoon's main terrain has about 24k Triangles and 12k Verticies. Don't take this as golden rule though.</p> <p>Keep track of visual effects and light sources! A lot of tiny light sources can easily destroy framerate, make sure to condense them into bigger light sources. Make sure to use LODs on objects that need to be disabled with lower graphics settings (like grass).</p> <p>Occlusion Culling allows you to \"turn off\" scene objects out of view. These videos go into great detail of how it works. For reference, Fogbound Lagoon uses a <code>Backface Threshold</code> of 90, but it isn't known if that is the actual value RoR2 stages use. Putting <code>Backface Threshold</code> on 100 will make scene objects flash rapidly if the player camera is put against collision (like if you are looking straight up). If you find the \"perfect\" <code>Backface Threshold</code> value, let me know.</p> <p>https://www.youtube.com/watch?v=DoHPx5RQ7P4</p> <p>https://www.youtube.com/watch?v=hv2CUi2eeBY</p>"},{"location":"Mod-Creation/Assets/Stage/#visuals","title":"Visuals","text":"<p>This tutorial may detail visuals later down the line but it isn't important to making your stage function. However, LoP has the <code>ShaderSwap</code> class where you can feed a material into <code>ConvertShader</code> and it will swap stubbed shaders for the real shader. You can get the stubbed shaders here:</p> <p>https://github.com/risk-of-thunder/RoR2StubbedShaders</p> <p>Other than that, study how the base game implements its visuals.</p>"},{"location":"Mod-Creation/Assets/Stage/#inspecting-vanilla-stages-in-unity","title":"Inspecting Vanilla Stages in Unity","text":"<p>There is a simple way to view vanilla RoR2 stages in editor and it makes it very easy to disect them. The directions are in the screenshot present below:</p> <p></p> <p>Line mentioned in screenshot:</p> <pre><code>\"com.passivepicasso.thunderkit\": \"https://github.com/PassivePicasso/ThunderKit.git#1aeb51e18e41f65801f49f7ed290de5f54a90ebb\",\n</code></pre> <p></p>"},{"location":"Mod-Creation/Assets/Stage/#credits","title":"Credits","text":"<ul> <li>JaceDaDorito - Wrote this documentation, made LoP, made R2API.Stages, and lead person pushing for easier stage making.</li> <li>Viliger - added music section, don't message Jace about it pls.</li> <li>IDeathHD - Helped get this started with initial code and general advice.</li> <li>Nebby - Helped create and clean code. Implemented a lot of the utilities detailed here into RoR2EditorKit and R2API.</li> <li>GrooveSalad - Made initial addressable DCCS/DP implementation, made cleaner stubbed shaders, and gave a lot of advice.</li> <li>TeamMoonstorm - General feedback and guinea pig for a lot of these utilities.</li> <li>Nerd Head - Videos linked about Occlusion Culling.</li> </ul>"},{"location":"Mod-Creation/Assets/Translation/","title":"Translation","text":"<p>This is supposed to be read sequentially, you shouldn't skip any part.</p> <p>This will allow you to translate pretty much any mod.</p>"},{"location":"Mod-Creation/Assets/Translation/#how-to-identify-which-of-the-methods-i-need-to-do","title":"How to identify which of the methods I need to do","text":"<p>Install the mod in question and run the game.</p> <p>After the game fully loads, the mod should generate a config.</p> <p>Edit the config, and check if config values correspond to their written values in game.</p> <p>For example - Deputy has a config for changing her Primary Skill Damage Coefficient. When you change this, save the config and run your game again, the description should reflect the changes you've made.</p> <p>If the mod doesn't have a config file at all, or doesn't have configuration for those sorts of things, you can assume you won't need to make a mod yourself, and can instead use the first method in this tutorial - <code>Translating mods that don't have .language files, and don't have configurable values</code>.</p> <p>You can also inspect the mod's <code>.dll</code> file (the how-to is written down below), and see if it uses fields alongside strings when using <code>LanguageAPI.Add()</code>.</p>"},{"location":"Mod-Creation/Assets/Translation/#translating-mods-that-dont-have-language-files-and-dont-have-configurable-values","title":"Translating mods that don't have .language files, and don't have configurable values","text":""},{"location":"Mod-Creation/Assets/Translation/#setting-up","title":"Setting up","text":"<p>This will require basic programming knowledge.</p> <p>Make a new file with a <code>.language</code> extension.</p> <p>Copy and paste this template into it: <pre><code>{\n  \"LANGUAGE\": {\n  \"TOKEN\" : \"Description for this token\",\n  \"TOKEN_TWO\" : \"Description for the second token\"\n  }\n}\n</code></pre></p> <p>Replace <code>LANGUAGE</code> with one of the following:</p> <p><code>en</code> for translating into English</p> <p><code>RU</code> for translating into Russian</p> <p><code>de</code> for translating into German</p> <p><code>FR</code> for translating into French</p> <p><code>es-ES</code> for translating into Spanish</p> <p><code>IT</code> for translating into Italian</p> <p><code>ja</code> for translating into Japanese</p> <p><code>ko</code> for translating into Korean</p> <p><code>pt-BR</code> for translating into Portuguese</p> <p><code>tr</code> for translating into Turkish</p> <p><code>zh-CN</code> for translating into Simplified Chinese</p>"},{"location":"Mod-Creation/Assets/Translation/#finding-tokens","title":"Finding Tokens","text":"<p>Download DnSpy.</p> <p>Go to Thunderstore.</p> <p>Search for the mod you want to translate.</p> <p>Manually download it.</p> <p>Extract it somewhere.</p> <p>Open its <code>.dll</code> file with <code>DnSpy</code>.</p> <p>On the left, you should see the file you opened and small arrows to navigate it. Once you click it a bunch of times, you should see the <code>.dll's</code> namespaces (names in yellow), and inside those, classes (names in green). Once you click on a class' name, it will navigate to it, showing the code inside it.</p> <ol> <li>If they're not organized</li> </ol> <p>You are looking for where a type of content gets created (items, skills, etc.), and trying to look for strings like <code>NAME\"</code>, <code>DESC\"</code> or <code>DESCRIPTION\"</code> (the single quotation mark is important). The vast majority of tokens are all uppercase. They usually have separators such as <code>\"_\"</code>. We can use <code>Ctrl+F</code> inside <code>dnSpy</code> to make this process faster, by searching for those.</p> <ol> <li>If they're organized and use Henry's Survivor Template</li> </ol> <p>The majority of survivor mods use Henry's Survivor Template, which is organized well enough to make this process not too painful. Inside the mod's <code>.dll</code> file, there should be a namespace called Modules, and inside that, a class called Tokens. This should give us all the tokens we need.</p> <ol> <li>If they're organized and use an abstract base</li> </ol> <p>A lot of content mods use abstract bases to make it easier, faster and more organized.</p> <p>We can recognize one by looking at its <code>.dll</code> file, and seeing if there is a class with <code>Base</code>, <code>Factory</code>, etc. in its name.</p> <p>Once we find it, open that class and check for any strings inside. You want to find a prefix or suffix that the Base uses alongside the Item's token for its name, description, lore, etc. For example, <code>\"ITEM_\" + this.ItemLangTokenName + \"_NAME\"</code> We got the prefix and the suffix for translating an item's name. Now we have to find the actual tokens.</p> <p>To find classes that use a Base, we can quickly check what the class inherits from. It's written at the top of the class.</p> <p><code>RandomlyNamedClass : ItemBase</code></p> <p>We now know that the class inherits from ItemBase, meaning it uses its system for filling out properties and loading.</p> <p>Inside the same class, we simply find a string that is named something along the lines of <code>Token</code>, or the string is fully uppercase, most likely meaning it's a token.</p> <p>For example <pre><code>public override string ItemLangTokenName\n{\n    get\n    {\n        return \"BLEEDING_WITNESS\";\n    }\n}\n</code></pre> In the same class, we can most likely also find the description string, e.g. <pre><code>public override string ItemPickupDesc\n{\n    get\n    {\n       return \"Your damage over time effects heal all allies.\";\n    }\n}\n</code></pre> Keep in mind the prefixes and suffixes while translating.</p> <p>This example, under this section name is ironic because Sandswept has configs for basically anything you would want out of an item but these tokens don't use configs <code>\u00af\\_(\u30c4)_/\u00af</code></p>"},{"location":"Mod-Creation/Assets/Translation/#replacing-the-token-descriptions","title":"Replacing the token descriptions","text":"<p>Luckily, this is a relatively painless process</p> <p>From the template up above, we had this piece of code:</p> <p><code>\"TOKEN\" : \"Description for this token\",</code></p> <p>simply replace <code>TOKEN</code> with a token you found.</p> <p>You can, of course, add more of these, just make sure you separate them with commas.</p> <p>The last one shouldn't have a comma.</p> <p>Example <code>.language</code> file contents: <pre><code>{\n  \"RU\": {\n  \"ITEM_SANDSWEPT_BLEEDING_WITNESS_DESCRIPTION\" : \"\u0412\u0430\u0448\u0438 \u043f\u0435\u0440\u0438\u043e\u0434\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u044b \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0442 \u0437\u0434\u043e\u0440\u043e\u0432\u044c\u0435 \u0432\u0441\u0435\u0445 \u0441\u043e\u044e\u0437\u043d\u0438\u043a\u043e\u0432.\",\n  \"ITEM_SANDSWEPT_CEREMONIAL_JAR_DESCRIPTION\" : \"\u0421\u043e\u0435\u0434\u0438\u043d\u0438\u0442\u0435 \u0432\u0440\u0430\u0433\u043e\u0432 \u043f\u0440\u0438 \u043f\u043e\u043f\u0430\u0434\u0430\u043d\u0438\u0438. \u0421\u043e\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0435 \u0432\u0440\u0430\u0433\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u0432\u0437\u0440\u044b\u0432\u043d\u043e\u0439 \u0443\u0440\u043e\u043d.\"\n  }\n}\n</code></pre></p>"},{"location":"Mod-Creation/Assets/Translation/#translating-mods-that-do-not-have-language-files-and-have-configurable-values-in-descriptions","title":"Translating mods that do not have .language files, and have configurable values in descriptions","text":""},{"location":"Mod-Creation/Assets/Translation/#setting-up_1","title":"Setting up","text":"<p>Having the <code>.dll</code> file of the mod, you can publicize it - to be able to reference anything from it, otherwise a translation would be much more painful.</p> <p>Download NStrip.</p> <p>Open Risk of Rain 2's Steam directory, then navigate to the Risk of Rain 2_Data folder, and then the Managed folder.</p> <p>There should be a ton of <code>.dll</code> files in there.</p> <p>Extract <code>NStrip.exe</code> from the download into this directory.</p> <p>Copy the mod's <code>.dll</code> file here as well.</p> <p>Open up command prompt and navigate to this same Risk of Rain 2 directory. Use the following command:</p> <p><code>NStrip.exe -p -cg -cg-exclude-events -remove-readonly -n \"FULL PATH TO DLL FILE\"</code> Replace <code>FULL PATH TO DLL FILE</code> with e.g. <code>\"P:\\Steam\\steamapps\\common\\Risk of Rain 2\\Risk of Rain 2_Data\\Managed\\Deputy.dll\")</code>, quotation marks are important to include.</p> <p>This should give you a new <code>.dll</code> file called <code>Deputy-nstrip.dll</code>.</p> <p>I recommend putting this new <code>.dll</code> file into an organized place.</p>"},{"location":"Mod-Creation/Assets/Translation/#getting-and-using-the-template","title":"Getting and using the template","text":"<p>Download Visual Studio Community 2022.</p> <p>Once you're in the installer, make sure to check <code>.NET desktop development</code>.</p> <p>Download this file.</p> <p>Extract it in an organized place.</p> <p>Open up <code>Project.sln</code>.</p> <p>Rename everything that has <code>ChangeThis</code> in its name.</p>"},{"location":"Mod-Creation/Assets/Translation/#making-the-mod-you-want-to-translate-a-hard-dependency","title":"Making the mod you want to translate a hard dependency","text":"<p>We need to make it so our mod loads after the mod we want to translate, so that we don't run into any issues. This is done with the <code>[BepInCompatibility(\"com.SomeAuthor.SomeModName\")]</code> attribute. At the top of the template file, you should see something similar.</p> <p>Go back to that <code>.dll</code> file you NStripped, and open it with <code>dnSpy</code>.</p> <p>Inside it, look for a <code>Main</code> class, usually titled something like <code>\"Main\"</code> or <code>\"Plugin\"</code>.</p> <p>At the top of said class, you should see a <code>BepInPlugin</code> attribute declaration, e.g. <code>[BepInPlugin(\"com.Bog.Deputy\", \"Deputy\", \"0.3.0\")]</code> From this, we want the mod's <code>GUID</code>, which is the first string in the attribute, in our case it's <code>\"com.Bog.Deputy\"</code>.</p> <p>Replace your <code>\"com.SomeAuthor.SomeModName\"</code> with that.</p> <p>At the top of your Visual Studio, click on Project, then Add Project Reference. Click to browse and navigate over to your NStripped <code>.dll</code> file. Click OK once it imports and you're good to go for referencing the mod's fields, for descriptions to have config values that update in your translation as well.</p> <p>Again, we need to find the tokens. After that, there is a bit more work to do.</p> <p>We basically want to copy and paste the mod's code that uses <code>LanguageAPI.Add()</code> into our <code>public void Awake()</code>.</p> <p>This will be ugly, you can correct it if you want. Here's an example. <pre><code>string text = \"BOG\";\nstring text2 = text + \"_DEPUTY_BODY_\";\nLanguageAPI.Add(text2 + \"PRIMARY_SHOOT_DESCRIPTION\", \"&lt;style=cIsUtility&gt;Agile&lt;/style&gt;. Fire mid-range revolvers for \" + string.Format(\"&lt;style=cIsDamage&gt;{0}% damage&lt;/style&gt;.\", TriggerTap.damageCoefficient * 100f), \"RU\");\n</code></pre></p> <p>The last argument in <code>LanguageAPI.Add()</code>, <code>\"RU\"</code>, is the language string, refer to the list mentioned above.</p> <p><code>TriggerTap.damageCoefficient</code> most likely won't be found, you need to reference the mod's namespace as well. We need to find the namespace that belongs to.</p> <p>In the mod's <code>.dll</code> file, hit <code>Ctrl+F</code>, and paste this same name. On the right of the search bar and slightly below, the yellow part of the text should tell you what namespace it belongs to.</p> <p>So <code>TriggerTap.damageCoefficient</code> becomes <code>Skillstates.Deputy.TriggerTap.damageCoefficient</code>. This is case-sensitive.</p> <p>You will have to keep things like <code>Skillstates.Deputy.TriggerTap.damageCoefficient</code> so that they appear in the description, and update with everyone's config settings. You can reorder them as you please, in this case the number is formatted as <code>{0}</code>. Another example of string formatting: <pre><code>return (FragGrenade.Ignite ? \"&lt;style=cIsDamage&gt;Ignite&lt;/style&gt;. \" : \"\") + \"Throw a grenade that explodes for &lt;style=cIsDamage&gt;\" + base.d(FragGrenade.Damage) + \" damage&lt;/style&gt;. Can hold up to 2.\";\n</code></pre> Replace every reference of <code>this.</code> and <code>base.</code> with the mod's. So this becomes the following: <pre><code>return (HIFUCommandoTweaks.Skills.FragGrenade.Ignite ? \"&lt;style=cIsDamage&gt;Ignite&lt;/style&gt;. \" : \"\") + \"Throw a grenade that explodes for &lt;style=cIsDamage&gt;\" + HIFUCommandoTweaks.TweakBase.d(HIFUCommandoTweaks.Skills.FragGrenade.Damage) + \" damage&lt;/style&gt;. Can hold up to 2.\";\n</code></pre></p> <p>In some cases, when you can't access the method from the namespace, you might need to copy paste an entire method the mod uses to format its strings. In our case, the <code>d()</code> method cannot be accessed, because it's inside an abstract base. In the mod's .dll file, you can click on its name to navigate to the method, then simply copy and paste it into our class (so that it's outside <code>public void Awake()</code>, but inside <code>public class Main : BaseUnityPlugin</code>).</p>"},{"location":"Mod-Creation/Assets/Translation/#translating-multiple-mods-at-once","title":"Translating multiple mods at once","text":"<p>You can, of course, use one large <code>.language</code> file, or multiple smaller ones. If you want to translate multiple mods that have configurable values in descriptions, it's a bit more nuanced. You need to NStrip and reference each one in your project. You also want to use a SoftDependency.</p> <p>Here's an example: <pre><code>[BepInDependency(\"com.Bog.Deputy\", BepInDependency.DependencyFlags.SoftDependency)]\n</code></pre> You can, of course, have multiple of these, for all different mods.</p> <p>This will make it so that your mod loads after each one of these, but doesn't require them to be installed, so that any combination of mods work with your translation mod.</p> <p>Now, we need to set up code for detecting when a mod is loaded. Generally, I ran into some issues with SoftDependencies, and this is a fool-proof way that I know, but it could be written a bit better most likely. <pre><code>public static bool DeputyLoaded = false;\n</code></pre> Declare this inside your class.</p> <p>The code for setting that value will be contained in our <code>public void Awake()</code>. Here's an example of it: <pre><code>DeputyLoaded = BepInEx.Bootstrap.Chainloader.PluginInfos.ContainsKey(\"com.Bog.Deputy\");\n</code></pre> The string at the end is the same GUID we SoftDepend on.</p> <p>Now make a new method, and call it inside <code>Awake()</code>. <pre><code>[MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)] // this is very important\npublic void DeputyTranslation()\n{\n    if (DeputyLoaded)\n    {\n        // do stuff, like LanguageAPI.Add(), this will only run if you have Deputy installed\n    }\n}\n</code></pre> For multiple mods, you can either have one large method, or several small ones.</p>"},{"location":"Mod-Creation/Assets/Translation/#building-the-mod","title":"Building the mod","text":"<p>If you needed to use Visual Studio, and couldn't simply use a .language file, you can right click on your solution and hit <code>Build</code>, or use the shortcut <code>Ctrl+Shift+B</code>.</p> <p>This will generated a <code>.dll</code> file.</p> <p>Right click your solution and click <code>Open Folder in File Explorer</code>.</p> <p>Go to the folder, <code>bin</code>, <code>Debug</code>, <code>netstandard2.0</code>, and your <code>.dll</code> file should appear.</p> <p>To test it, in your mod amanger, go to <code>Settings</code>, <code>Browse profile folder</code>, and navigate over to <code>BepInEx</code>, <code>plugins</code>. Copy your <code>.dll</code> file into the <code>plugins</code> folder, then launch the game. Make sure your language is set correctly and check if the translation works.</p>"},{"location":"Mod-Creation/Assets/Translation/#uploading-the-mod","title":"Uploading the mod","text":"<p>Refer to the Thunderstore Guidelines for uploading a mod.</p> <p>The file names there are case sensitive. </p> <p>Inside your <code>manifest.json</code>, make sure to include <code>LanguageAPI</code> in your dependencies.</p> <p>To know its dependency string, you can navigate over to its mod page.</p> <p>Include any and all <code>.language</code> or <code>.dll</code> files you have where your icon, manifest, readme, etc are.</p> <p>It's important to note that you shouldn't, and don't need to include the NStripped or original <code>.dll</code> file of the mod you translated.</p> <p>Then select all of the files and zip them. When you open your zip, those files should appear first. No folder inside, or Thunderstore won't see them. Then simply head on over to the Upload page, select the <code>.zip</code> file, fill out other data and submit.</p>"},{"location":"Mod-Creation/Assets/Translation/#updating-the-mod","title":"Updating the mod","text":"<p>In your project, it's important to increment the <code>PluginVersion</code> number.</p> <p>Outside of that, you simply need to increment the version number in your <code>manifest.json</code> file, zip everything, and upload again.</p>"},{"location":"Mod-Creation/Assets/Translation/#why-not-reupload-a-mod-instead-of-dealing-with-all-of-this","title":"Why not reupload a mod, instead of dealing with all of this?","text":"<p>Reuploading is looked down upon, and will get taken down if you don't have the mod author's permission to do so.</p>"},{"location":"Mod-Creation/Assets/UI/","title":"UI","text":""},{"location":"Mod-Creation/Assets/UI/#preface","title":"Preface","text":"<p>Risk of Rain 2's UI uses Unity's UI System. As such, getting familiar with the Unity UI system is key.</p> <p>Some mods may require a visual representation of data on screen for the user. For example, the amount of health left in the form of a health bar, the amount of ammo left, or maybe even a custom data.</p>"},{"location":"Mod-Creation/Assets/UI/#tldr-about-how-unitys-ui-works","title":"TL;DR about how Unity's UI works","text":"<p><code>Rect</code>s are put onto a <code>Canvas</code>, and the entire <code>Canvas</code> is rendered over everything in the game. The <code>Canvas</code> resizes to the screen and resizes the <code>Rect</code>s in it as well to fit the new screen size.</p>"},{"location":"Mod-Creation/Assets/UI/#how-to","title":"How-to","text":"<p>Assuming you've setup your coding environment (if not, please follow this guide), let's get started.</p>"},{"location":"Mod-Creation/Assets/UI/#from-a-glance","title":"From a glance...","text":"<ol> <li>Hook onto <code>RoR2.HUD</code> (or any particular UI elements') <code>Awake</code> function and store the <code>HUD</code> instance.</li> <li>Create a GameObject. Add your new GameObject to the <code>HUD</code> container. Add a <code>RectTransform</code> component to it, and set <code>anchorMin</code>, <code>anchorMax</code>, <code>sizeDelta</code> and <code>anchoredPosition</code> accordingly.</li> <li>Add an <code>Image</code> component (load your sprite into <code>GetComponent&lt;Image&gt;().sprite</code>).</li> </ol>"},{"location":"Mod-Creation/Assets/UI/#in-depth","title":"In-depth...","text":""},{"location":"Mod-Creation/Assets/UI/#step-1","title":"Step 1","text":"<p>Hook onto <code>RoR2.HUD</code> (or any particular UI elements') <code>Awake</code> function and store the instance.</p> <p>As a general example, we will hook to HUD.</p> <pre><code>private HUD hud = null;\n\nprivate void Awake()\n{\nOn.RoR2.UI.HUD.Awake += MyFunc;\n}\n</code></pre> <p>Now that we have hooked onto the HUD component, I just need to store the instance.</p> <pre><code>private void MyFunc(On.RoR2.UI.HUD.orig_Awake orig, RoR2.UI.HUD self)\n{\n    orig(self); // Don't forget to call this, or the vanilla / other mods' codes will not execute!\n    hud = self;\n    //hud.mainContainer.transform // This will return the main container. You should put your UI elements under it or its children!\n    // Rest of the code is to go here\n}\n</code></pre> <p>Don't forget to unhook <code>OnDestroy</code>!</p> <pre><code>private void OnDestroy()\n{\nOn.RoR2.UI.HUD.Awake -= MyFunc;\n}\n</code></pre>"},{"location":"Mod-Creation/Assets/UI/#step-2","title":"Step 2","text":"<p>Create a GameObject. Add your new GameObject to the UI element instance. Add a <code>RectTransform</code> component to it, and set <code>anchorMin</code>, <code>anchorMax</code>, <code>sizeDelta</code> and <code>anchoredPosition</code> accordingly.</p> <p>This step is really important: it determines where the UI element is going to be and anchor it there. For now, understand this:</p> <ul> <li>The anchor positions are normalized from 0 to 1, and the bottom-left is <code>(0, 0)</code>, top-right is <code>(1, 1)</code>.</li> <li>Setting <code>anchoredPosition</code> is essentially moving the GameObject to translate by a certain amount, relative to its anchor.</li> <li><code>sizeDelta</code> is the difference in size of the object relative to the anchors.</li> </ul> <pre><code>GameObject myObject = new GameObject(\"GameObjectName\");\nmyObject.transform.SetParent(hud.mainContainer.transform);\nRectTransform rectTransform = myObject.AddComponent&lt;RectTransform&gt;();\nrectTransform.anchorMin = Vector2.zero;\nrectTransform.anchorMax = Vector2.one;\nrectTransform.sizeDelta = Vector2.zero;\nrectTransform.anchoredPosition = Vector2.zero;\n// You can safely omit the last line if the element is already where you want it to be.\n// This collection of lines will fill the canvas with this Rect.\n</code></pre>"},{"location":"Mod-Creation/Assets/UI/#unity-editor-equivalent","title":"Unity Editor equivalent:","text":"<p>Creating <code>GameObject</code> with the name <code>GameObjectName</code></p> <p></p> <p>Adding it to the <code>HUD</code> (typically a <code>Canvas</code>)</p> <p></p> <p>Adding a <code>RectTransform</code></p> <p></p> <p>Setting its parameters</p> <p></p>"},{"location":"Mod-Creation/Assets/UI/#step-3","title":"Step 3","text":"<p>Add an <code>Image</code> component (load your sprite into <code>GetComponent&lt;Image&gt;().sprite</code>).</p> <pre><code>GameObjectReference.AddComponent&lt;Image&gt;();\nGameObjectReference.GetComponent&lt;Image&gt;().sprite = Resources.Load&lt;Sprite&gt;(\"textures/itemicons/texBearIcon\");\n// Utilize the ResourcesAPI from R2API to load your image!\n</code></pre>"},{"location":"Mod-Creation/Assets/UI/#unity-editor-equivalent_1","title":"Unity Editor equivalent:","text":"<p>Adding a <code>Image</code> component</p> <p></p> <p>Setting the sprite</p> <p></p>"},{"location":"Mod-Creation/Assets/UI/#go-further","title":"Go further","text":"<p>Get the Unity editor (it's free!), create a <code>Canvas</code> and start to create some <code>Image</code>s, see what you can do with the Unity UI system. Feel free to experiment and try to recreate the steps you took in code.</p>"},{"location":"Mod-Creation/Assets/UI/#references","title":"References","text":"<ul> <li>Unity UI documentation (Packages)</li> <li>Unity UI documentation (Manual)</li> </ul>"},{"location":"Mod-Creation/Assets/Void-Items/","title":"Void Items","text":"<p>First things first, this wiki is expecting you to already know how to make your own custom items in the game. If you do not, go check out the other tutorials on the wiki as well as KomradeSpectre's video tutorial.</p> <p>This wiki will cover initializing the transformations for the void item you have created. This process remains the same whether you are managing your project from visual studio or creating items in thunderkit.</p>"},{"location":"Mod-Creation/Assets/Void-Items/#manual-initialization","title":"Manual Initialization","text":""},{"location":"Mod-Creation/Assets/Void-Items/#setting-the-item-tier","title":"Setting the Item Tier","text":"<p>The first thing you want to do is make sure your ItemDef tier is set to one of the void tiers. You can technically have void transformations on non-void tiered items, but I don't see the point in doing that.</p> <p>In thunderkit:</p> <p></p> <p>or In Project:</p> <p></p>"},{"location":"Mod-Creation/Assets/Void-Items/#setting-the-expansiondef","title":"Setting the ExpansionDef","text":"<p>All void items should have their expansion def set to SurvivorsOfTheVoid. To set the expansion def, you can do this:</p> <pre><code>YourItemDef.requiredExpansion = Addressable.LoadAssetAsync&lt;ExpansionDef&gt;(\"RoR2/DLC1/Common/DLC1.asset\").WaitForCompletion();\n</code></pre>"},{"location":"Mod-Creation/Assets/Void-Items/#creating-the-transformations","title":"Creating the transformation(s)","text":""},{"location":"Mod-Creation/Assets/Void-Items/#itemrelationshipprovider","title":"ItemRelationshipProvider","text":"<p>This is the scriptable object that will get added to your ContentPack. Simply create a new ItemRelationshipProvider and set the relationship type to the DLC1 contagious item type.</p> <p><pre><code>yourProvider.relationshipType = Addressables.LoadAssetAsync&lt;ItemRelationshipType&gt;(\"RoR2/DLC1/Common/ContagiousItem.asset\").WaitForCompletion();\n</code></pre> You then want to populate the <code>ItemRelationshipProvider.relationships</code> array with the transformation pairs that you want to add. These <code>ItemDef.Pair</code> structs can contain custom or vanilla items, but neither of the items can be null! Keep in mind that using vanilla items requires you to load the addressable ItemDef object. Using <code>RoR2.RoR2Content.Items</code> or any similar static field WILL NOT WORK!!</p> <p>The addressables can be found here https://xiaoxiao921.github.io/GithubActionCacheTest/assetPathsDump.html</p> <p></p> <p>You can either manage your own ContentPack and add it to the <code>ContentPack.itemRelationshipProviders</code> array or use <code>R2API.ContentAddition.AddItemRelationshipProvider</code>.</p>"},{"location":"Mod-Creation/Assets/Items/Using-the-RoR2CreateItemTemplate/","title":"Using the RoR2CreateItemTemplate","text":"<p>Link to Project Template. Just download the <code>RoR2Template - Item.zip</code>: RoR2Template - Item.zip</p> <p>This Visual Studio Project Template was made to help speed up the creation of items using KomradeSpectre's Aetherium Item Creation Tutorial. This is not a replacement for this tutorial, but should be used alongside the tutorial for ease of use.</p> <p>The GitHub page has a simple how-to-use, but here is a more in-depth explanation:</p> <p>To use this tool, simply download the .zip file from the GitHub and place it in your <code>Visual Studio 2019/Templates/ProjectTemplates</code> folder. For me, this was found in my <code>Documents</code> on Windows 10.</p> <p>The template contains Komrade's <code>ItemBase.cs</code> and <code>ItemHelpers.cs</code> for a basic item class and a render helper. Also included is a <code>Main.cs</code> that initializes each item and an <code>EXAMPLE_ITEM.cs</code> that is just a filled in example of the ItemBase to show how to make a new class inheriting the base. Simply create a new class that inherits the ItemBase, and fill in all the missing information.</p> <p>NOTE: With the way the project template is made, several locations in several code files are automatically replaced based on the name of the Visual Studio Project. Most of these replacements have to do with the <code>namespace</code> keyword and the <code>using</code> statements at the top of your files, though are also used in the strings defining paths within the asset bundle. These names are only replaced on creation of the project, and if you rename your project manually, you may need to go in an change the name in these locations, or face many errors. To keep things simple, do not rename your project unless necessary and do so with caution.</p> <p>The template also includes an asset bundle and UnityPackage within it. To use these, when you make a new Unity Project, first follow the steps from Komrade's tutorial to delete the <code>Scene</code> folder and the objects in the <code>Scene Hierarchy</code> on the left side of the screen, then import the package using <code>Assets -&gt; Import Package -&gt; Custom Package</code> and grabbing the <code>CREATE_ITEM_TEMPLATE_UNITYPACKAGE</code> from the Visual Studio project folder. This will create a lot of folders, many empty expect for a (nearly) empty text file. This text file is here because of weirdness with Unity not letting me export empty folders, so I put what I thought would be the least amount of data in it to keep the package small. These folders also contain a Sample Item prefab and material. Simply use the Unity project like Komrade says to and ignore the sample information.</p> <p>NOTE: To help clarify things for beginners, some folders have different names than Komrade uses. You can rename these to reflect his tutorial, but otherwise you will need to be sure to include the folder names in the paths in the VS project, or it will not work correctly.</p> <p>When you go to build the asset bundle, add all items to the <code>create_item_template_asset</code> bundle, and build the bundle into the correct folder in the Visual Studio project. This will automatically update the already existing asset bundle under this name, which will automatically bring in your changes without having to do anything after this step.</p> <p>Other than this, follow Komrade's tutorial.</p>"},{"location":"Mod-Creation/Assets/Shaders/HG-Triplanar-Terrain-Blend/","title":"HG Triplanar Terrain Blend","text":"<p>A detailed tutorial on understanding Triplanar Terrain Blend, one of HG's shaders that is most commonly used for terrain.</p> <p>Triplanar Terrain Blend (TTB) is a shader that projects textures and other inputs onto a mesh without caring about the UV coordinates of said mesh. It is very good at generating natural looking terrain textures such as the grass on Titanic Plains or the twisting tree roots on Sundered Grove. This shader requires a lot of trial, error, and experimentation to get good results due to its seemingly random nature. It is recommended to study the already existing TTB materials in RoR2 via Addressables or Runtime Inspector to get a better feel of the type of material you are going for.</p>"},{"location":"Mod-Creation/Assets/Shaders/HG-Triplanar-Terrain-Blend/#rgb-channels","title":"RGB Channels","text":"<p>TTB has three main inputs: the RGB channels that contain their respective textures and values. There are other inputs that aren't present in these channels but it'll be covered later in the guide.</p> <p></p> <p>The Red channel has side and top textures while the other channels only have one texture. Which Red Channel texture gets used depends on the mesh normals. The shader takes the values and textures in each channel and procedurally generates a unified texture for the mesh.</p> <p>There are other values in each channel so these will be covered individually.</p>"},{"location":"Mod-Creation/Assets/Shaders/HG-Triplanar-Terrain-Blend/#smoothness","title":"Smoothness","text":"<p>Higher values of Smoothness gives the material a reflective backlight. The backlight is affected by surrounding colors and materials so it is good for objects such as ice.</p> <p>Terrain with no Smoothness VS Terrain with max Smoothness.</p> <p></p>"},{"location":"Mod-Creation/Assets/Shaders/HG-Triplanar-Terrain-Blend/#speculars","title":"Speculars","text":"<p>The Specular sliders controls the reflectiveness of a particular channel. But before looking at examples, you need to understand key art concepts. </p> <p>What controls an object's \"reflectiveness\" is the amount of light bounced off of it that reaches our eyes... or well the camera. This contributes to the reflectiveness of a smooth metal ball or ~~your forehead~~ polished marble. A specular is the most direct point where the bounced light is hitting your eyes. It is that little bright white dot you notice on reflective materials</p> <p></p> <p>The Specular Strength controls how reflective that channel's texture is while the Specular Exponent controls how big the specular of the reflection is. Here is an example with Sundered Grove's sap/fungus. Goes to show that no matter how weird the material, it follows the same rules.</p> <p></p>"},{"location":"Mod-Creation/Assets/Shaders/HG-Triplanar-Terrain-Blend/#bias","title":"Bias","text":"<p>Bias controls how \"dominating\" each channel is. All the channels share the same mesh so a value needs to be given to each channel to tell them how much they can step on each other. The higher the bias, the more space that channel will take up. However, a difference in bias can be so big that a channel's texture may never be present, be careful!</p> <p>(Image doesnt exist rn hold on, you should get the point though) The first image shows terrain of Titanic Plains with its default settings. The second image shows the same terrain but with the Green Channel's bias set to half of what it was in the first image. Notice how the grass (the texture correlating to the green channel) is a lot more sparse on the terrain. The last image shows the same terrain with each channel's bias set to 0. Since each channel's bias is equal to each other, it shares more of the terrain compared to the second image. It is all about proportions. However, the next section will show you how to control the prevalence of each channel on the terrain.</p>"},{"location":"Mod-Creation/Assets/Shaders/HG-Triplanar-Terrain-Blend/#vertex-colors","title":"Vertex Colors","text":"<p>Each channel in the TTB material can be controlled if you have \"Use Vertex Colors Instead\" checked. This is so that each channel refers to the vertex colors on your mesh as a reference of where each of the textures should (approximately) go. This goes without saying that the Red channel would use the Red vertex colors and so on. You can paint a mesh's vertex colors in a 3D modeling program such as Blender.</p> <p></p>"},{"location":"Mod-Creation/Assets/Shaders/HG-Triplanar-Terrain-Blend/#bias-green-to-vertical","title":"Bias Green to Vertical","text":"<p>This just makes it so that the Green channel is mainly prevalent on the vertical parts of the mesh (the planes of the mesh are generally facing upward). This is also why the Green channel is usually reserved for grass or anything else you would expect being on top of the mesh, even if Bias Green to Vertical is off.</p>"},{"location":"Mod-Creation/Assets/Shaders/HG-Triplanar-Terrain-Blend/#everything-else","title":"Everything Else","text":"<p>Here is everything else present in the shader that doesn't necessarily involve the RGB channels.</p>"},{"location":"Mod-Creation/Assets/Shaders/HG-Triplanar-Terrain-Blend/#normal-texture-and-strength","title":"Normal Texture and Strength","text":"<p>For those who don't understand basic shader or modelling terminology, Normals are a \"depiction of the orientation of a polygon's surface\". This is so the mesh can have more detail whilst also not wasting computing power on extra vertices. You could say its a lighting illusion of some sort. The Normal texture controls how the Normals would look on the mesh while the Normal strength controls how prevalent they are. (Please Google this if you are that curious.)</p>"},{"location":"Mod-Creation/Assets/Shaders/HG-Triplanar-Terrain-Blend/#splatmap","title":"Splatmap","text":"<p>Think of the Splatmap as extra \"paint\" you want to splatter all over the surface of your mesh. You input a texture to splatter all over the mesh surface to give it more flare.</p> <p>I (Jace) don't completely understand everything with this shader yet, but I will keep this page updated as I go.</p>"},{"location":"Mod-Creation/Assets/Shaders/Working-Shaders-outside-of-an-AssetRipper-Project/","title":"Working Shaders outside of an AssetRipper project","text":"<p>TODO: The following needs to be updated from GameImporter to AssetRipper, and additionally be updated for ThunderKit 5. You will also need a Pre-SOTS Risk of Rain 2 for shaders to export properly using AssetRipper. You can find more info on extraction here. Alternatively, if you are just looking to edit shader parameters in the editor for in game, you can also use stubbed shaders (just place them in your Unity project's Assets folder) and upgrade them to real shaders during runtime with Shader Swapper.</p> <p>While having access to shaders inside the GameImporter, it can make working materials for a custom mod a bit hectic, this is because you would need to keep switching between GameImporter and your Unity project only to do few modifications to the material.</p> <p>There are ways of making the Hopoo Shaders work outside of the GameImporter project, albeit with a few caveats. </p>"},{"location":"Mod-Creation/Assets/Shaders/Working-Shaders-outside-of-an-AssetRipper-Project/#an-example-of-shaders-working-outside-of-gameimporter-the-project-on-the-right-is-the-lost-in-transit-project","title":"an example of shaders working outside of GameImporter. the project on the right is the Lost in Transit project.","text":"<p>The Caveats of having Hopoo shaders outside of GameImporter are the following: * Having to add the Hopoo shaders to your <code>.gitignore</code> * Having to deal with the potential issues that come with multiple people working on your project (due to the repo not having the shaders) * Optional: Upgrading your project to use Thunderkit so you can build your assetbundle. for more information on this, click [here]</p> <p>Keep in mind that you DO NOT need to port your entire mod to Thunderkit, we're only using Thunderkit so we can build our assetbundle with a special pipeline.</p>"},{"location":"Mod-Creation/Assets/Shaders/Working-Shaders-outside-of-an-AssetRipper-Project/#getting-started","title":"Getting Started","text":"<p>You'll need: * A GameImporter project. * Your Unity project. * Optional: Very basic Thunderkit knowledge.</p>"},{"location":"Mod-Creation/Assets/Shaders/Working-Shaders-outside-of-an-AssetRipper-Project/#setting-up-the-shaders","title":"Setting up the Shaders.","text":"<p>Due to the nature of the Hopoo shaders, nobody in the risk of rain 2 community can give you the shaders you'll need pre-packaged, as such, you'll have to set up your project to accept the Hopoo shaders. This guide will go step by step on how to do this.</p> <ul> <li>Step 1: Close both your Unity Project and the GameImporter project.</li> <li>Step 2: Have both your project's and GameImporter's root folders open. </li> <li>Step 3: Copy over GameImporter's Project settings folder to your project's root folder, replace all the files. </li> <li>Step 4: In your GameImporter's root folder, go to Assets. Copy the Assets/Shaders folder and paste them in your project's Assets folder, ideally within a subfolder. </li> <li>Step 5: Go into the GameImporter's Resources folder, copy the following shaders &amp; their meta files to the folder where your placed the shaders found inside Assets/Shaders.<pre><code>decaliciousgameobjectid.asset\nefficientblur.asset\nfillcrop.asset\ntranslucentimage.asset\nunderwaterfog.asset\n</code></pre> </li> </ul> <p>Said folder should now have a total of 242 files. </p> <ul> <li>Step 6: Copy the entire contents of Resources/Shaders into your project's Assets folder, ideally within the same folder where you have the other shaders. </li> </ul> <p>The final product should look something like this. where \"StolenShaders\" are all the shaders found inside Assets/Shaders &amp; Assets/Resources. and ActualShaders are all the shaders found inside Assets/Resources/Shaders</p> <p></p> <ul> <li>Step 7: Boot up your unity project, you should now have working shaders in your editor. </li> </ul>"},{"location":"Mod-Creation/Assets/Shaders/Working-Shaders-outside-of-an-AssetRipper-Project/#dealing-with-copyright-issues","title":"Dealing with Copyright issues.","text":"<p>In case your mod doesn't have its editor in a github repository, then you do not need to worry about this. but if you do, you must know that you Cannot under any circumstance push right now, this is due to the fact that you'd be technically redistributing the real Hopoo shaders. which is a violation of Hopoo Games' Copyright.</p> <p>Assuming you followed the method here, and all the shaders in GameImporter are inside a folder, you can simply add a <code>.gitignore</code> there with the following contents.</p> <pre><code>*.*\n!.gitignore\n!*.meta\n</code></pre> <p>This will effectively make your repository ignore all the shader files except the meta files.</p>"},{"location":"Mod-Creation/Assets/Shaders/Working-Shaders-outside-of-an-AssetRipper-Project/#remember-you-need-to-git-ignore-these-shaders-otherwise-you-run-the-risk-of-hopoo-games-gearbox-taking-legal-action-against-your-mod-youve-been-warned","title":"REMEMBER, YOU NEED TO GIT IGNORE THESE SHADERS, OTHERWISE YOU RUN THE RISK OF HOPOO GAMES / GEARBOX TAKING LEGAL ACTION AGAINST YOUR MOD. YOU'VE BEEN WARNED.","text":""},{"location":"Mod-Creation/Assets/Shaders/Working-Shaders-outside-of-an-AssetRipper-Project/#asset-bundle-building","title":"Asset Bundle Building","text":"<p>Now that you have the shaders in the editor, there's this slight issue that comes with developing your materials. You cannot simply have the Materials use the real shaders, this is because when your assetbundle builds, the real Hopoo shaders will be in the assetbundle, and this is technically redistributing them, which goes against Hopoo Games / Gearbox's EULA.</p> <p>An option would be to have them all use the stubbed shaders, and switch to the real one only to make modifications, and afterwards switch them back to the stubbed ones.</p> <p>Otherwise, you can use Thunderkit and have a special pipeline setup that'll do the following for you: * 1.- Switch all your material's shaders from real shaders to stubbed shaders. * 2.- Build the assetbundle, which causes all the materials in it to reference stubbed shaders. * 3.- Switch back all your material's shaders from stubbed shaders to real shaders.</p> <p>The end result causes you to have all your materials use the real shaders in the editor, but the exported version in the assetbundle to use the stubbed shaders.</p> <p>To begin, you'll need at least basic understanding of how Thunderkit builds your assetbundle, the simplest version contains just a manifest with an assetbundle definition datum</p> <p></p> <p>In case you have all your materials inside a single folder, you can name this folder \"Materials\" and add it to the list of assets.</p> <p></p> <p>The next step is building a very basic pipeline with a custom job. You can download the class that handles building the assetbundle and swapping shaders here</p> <p>You need to place this class inside a folder in your assets called \"Editor\". Once you click \"execute\". Thunderkit will build your assetbundle with stubbed shaders instead of the real shaders.</p> <p></p> <p>The pipeline expects you to use Kevin's stubbed shader setup for this to work properly. And also expects you to follow the guide on using shaders outside of a GameImporter project. </p>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/","title":"Creating skin for vanilla characters with custom model","text":"<p>This guide will go over the process for creating a mod that will add a skin with a custom model into <code>Risk of Rain 2</code>.</p> <p>We will be going over two different ways to create this mod.</p> <p>One will require little to no coding knowledge while the other will be the completely programmatic way.</p> <p>These are the tools you'll need to make a skin:</p> <ul> <li> <p>Blender (2.9 or 3.X work, I personally use 2.93)</p> </li> <li> <p>Unity</p> </li> <li> <p>Asset Studio GUI (See Ripping Assets)</p> </li> </ul> <p>It is recommended that you be familiar with how to use Blender before attempting either method of creating skins. Unity Experience is also recommended, though not required.</p>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#video-tutorial","title":"Video Tutorial","text":"<p>There is an old video tutorial of KingEnderBrine's Skin Builder (the non-programmer path to creating skins), but a large portion of it it is now outdated.</p> <p>The tutorial is located here</p> <p>The parts of the video tutorial that are still accurate are:</p> <ul> <li> <p>Blender. Creating a skin model</p> </li> <li> <p>Unity. Creating skin</p> </li> <li> <p>VisualStudio. Optional code</p> </li> <li> <p>Risk of Rain 2. Testing</p> </li> </ul> <p>You can likely supplement the missing portions of the video with this text tutorial, or use the video tutorial as a visual aid to help walk through parts of the text tutorial</p>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#warning","title":"WARNING","text":"<p>Before making a skin mod it is recommended to backup your profile. There were some cases where people's logbook was wiped out during the development process.</p>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#ripping-assets","title":"Ripping Assets","text":"<p>First of all, you need to import a character asset from the game to Blender. You can read about how to do that here.</p>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#blender","title":"Blender","text":"<p>Once you've imported the ripped survivor to Blender, you create/import the model that you want to be a skin.</p> <p>If you're importing a model to create your skin you'll need to pose and scale it so that it matches as close to the survivor armature as possible.</p> <p>This is easy if your imported model has it's own skeleton, though more difficult if it does not.</p> <p>It is possible to move the survivor armature to match your imported model.</p> <p>But it is very likely to cause distortions in the final product.</p> <p>If you have to move the survivor armature.</p> <p>Try to only rotate the bones as this is the least likely to cause distortions compared to moving and scaling the bones.</p> <p></p> <p>When you have the armature and mesh matching as close as possible it's now time to parent the mesh to the armature.</p> <p>For our example we'll be doing this the simple way with automatic weights.</p> <p>Though if you have more blender experience, it is recommended to do this in the way that works for you.</p> <p>To automatically apply weights make sure you're in Object mode then select the mesh followed by the armature.</p> <p>Press ctrl+p and select 'with automatic weights'.</p> <p>If this worked correctly, you should be able to go to pose mode and move the bones around, the mesh should follow the bones.</p> <p></p> <p>Now we need to manage the materials and meshes of the model so that they will work in RoR2.</p> <p>RoR2's shader can only support one material per mesh, and each character only has a limited number of meshes.</p> <p>When possible try to merge all of your meshes into a single mesh.</p> <p>In order to merge meshes and materials, it is recommended to do this via blender addons like Material Combiner, or through third party programs like SubstancePainter + TextureSetCombiner.</p> <p>When you have your model finalized you can now export it to FBX, no special export options are needed.</p> <p>If you're using a blender version older than blender 3.0, you may be able to just drag the blend file into unity without exporting it to fbx.</p> <p>This is where the guide diverges based on the whether or not you want to go the programming or non-programming route.</p> <p>Both routes require you to create a unity project though, so make a project using the unity version listed top of the page. This project can be used for not just your current skin mod, but any additional skin mods you want to make in the future.</p>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#kebs-skin-builder-non-programming-route","title":"KEB's Skin Builder (Non-programming Route)","text":"<p>This is the guide for making a skin mod using King EnderBrine's Skin Builder. This requires little to no programming knowledge in order to build the mod. </p>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#unity","title":"Unity","text":""},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#importing-the-package","title":"Importing the package","text":"<p>After creating your unity project and opening it up. Go to Window-&gt;\"Package Manager\" on the toolbar at the top of the unity window. In the window that appears hit the \"+\" in the top left and select \"Add package from Git URL\".</p> <p></p> <p>Copy and Paste the link below into the field and hit 'add'</p> <p><code>https://github.com/KingEnderBrine/RoRSkinBuilder.git</code></p> <p>This will import the skin builder package. There will likely be a popup asking if you've backed up your project. It is safe to hit proceed on this popup.</p>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#importing-your-assets","title":"Importing your assets","text":"<p>You can import your mesh and textures now by dragging and dropping them into the unity project's assets folder. If you're model file is an fbx, select it in the unity Explorer and uncheck the \"Convert Units\" check box and then scroll down and hit Apply. This should keep the model's scale the same.</p> <p></p>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#creating-the-materials","title":"Creating the Materials","text":"<p>You will need to create materials using Hopoo's shaders for your mesh. Create a new material in unity each material you need. To do this, in the projects window in unity, Right Click -&gt; Create -&gt; Material. In each material, make sure the Shader is set to \"Fake RoR/Hopoo Games/Deferred/Standard\" and assign your textures to the relevant areas.</p> <p>TODO: add a link to a tutorial going over how Hopoo shader works.</p>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#skin-definition","title":"Skin Definition","text":"<p>For each skin in your mod you're going to need to make a Skin Defenition. Right Click in the project window and select \"Create-&gt;RoR Skins-&gt;SkinDefinition\"</p> <p>You'll need to fill out all the fields of the SkinDef that you'll need for your skin. Descriptions of all the fields are located below. For all text fields, DO NOT start your text with a numerical number 0-9 i.e. (text numbers like one are fine though) or special characters(!, @, $, etc.) unless otherwise stated as this will cause errors in the build process. </p>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#parts-of-the-skindefinition","title":"Parts of the SkinDefinition","text":"<p>Mod Dependency: add this if your mod requires another mod also be installed for it to work correctly. i.e. if your skin mod is for a custom modded character. Value is the mod dependency that you can find by looking at the mod's thunderstore page. Type can be either hard or soft. Hard means the mod in value is required, while soft means that the mod is not required but some functionality of your skin mod may require it.</p> <p>Generate Enable Config: When Checked, this allows the mod to generate a config that allows the skins in the mod to be disabled/enabled</p> <p>Body Name: This is the name of the suvivor body that the skin is for. This is the internal name for the survivor and usually the name of the survivor mesh when it's originally extracted from the game. i.e. Acrid's survivor body is CrocoBody, Rex is TreebotBody, etc.</p> <p>Name Token Localization: This is a list of localization tokens. Input the number of languages you want to localize for in the size field. Each expandable element in the list has a language field that and a value field. The Language field takes ISO 2-letter language codes, like EN for English. The Value field is the translated name that you want your skin to display when highlighted in-game.</p> <p>Icon: This is the icon that represents the skin in the skins list in-game. You can specify a sprite or check the \"Create from Colors\" and build one from the color picker there.</p> <p>Unlockable Name: Name of the achievement that you want the skin to be locked behind. Useful for mastery skins and hooking into special acheviments.</p> <p>Base Skins: The Base Skins that the skin will use for meshes and materials that are not replaced. These skins can be referenced by Index or Name. </p> <p>Renderers Source: Source of the renderers for the renderers collection, mouse over the text in unity for more details. I would suggest leaving it on \"All Render Components\"</p> <p>Mesh Replacements: This list is where you add the meshes you want to replace the base survivor meshes with. Size is the size of the list. You can also add/remove elements by right clicking on an element in the list and selecting duplicate or delete respectively. Each element in the list has: * a Mesh field - This is where you can add a mesh from your custom model. To do so you can target symbol on the right side of the field and select your mesh from the window that appears. * a Renderer Reference field - This is the renderer that contains the mesh the mod will be trying to replace with the mesh in the mesh field. To find this renderer refer to this txt file which contains the indexes and names of all the renderers for all vanilla survivors. Find your survivor's BodyName in the list, you'll want to replace the mesh in one of the SkinnedMeshRenderers so use either the index or the name of the skinnedMeshRenderer, make sure to switch the Access Type to the one you want. You cannot use the same Renderer for multiple meshes. Each Renderer can only support one mesh</p> <p>Game Object Activations: This list is used to make sure certain Renderer Game Objects are active/inactive. Each element in the list has: * a Render Index field - See the Render Reference field in Mesh Replacements above for more info.  * a \"Should Activate\" toggle - Checking this makes sure this game object is activated when the skin is equipped. Leaving it Unchecked makes sure this game object is deactivated when the skin is equipped. Deactivating a game object also disables any renderers that are components of this object. Useful for disabling meshes that you aren't using/replacing and particle systems that don't match your skin.</p> <p>Render Infos: This list is used to replace the materials in the renderers with materials of your choosing, if a renderer is not included in this list, it will use the material provided by the base skin. Each element in this list has: * A Default Material field - This is the material you want the mod to replace the base material with. i.e. this should be one of the custom materials you set up earlier. * Default Shadow Casting Mode - The way this renderer/mesh generates shadows. See the Cast Shadows field in the official unity documentation for more info. * Ignore Overlays - Whether or not overlays in-game are applied to this renderer/mesh. i.e. things like Personal Shield Generator or some other buff effects. * Render Reference - See Render Reference in Mesh Replacements for more info.</p> <p>Minion Skin Replacements: This list is for replacing minions like the Engineers Turrets. Each minion needs it's own SkinDefinition. Each element in the list has: * BodyName: This is the name of the body that the skin is for. i.e. regular Engineer turrets are EngiTurretBody and walkers are EngiWalkerTurretBody. * Find Skin By Reference: Check this if your skin uses turret skins from the base game/other mods. Then you set the skin similar to how you set Base Skin * Skin Definition: The skin def of the minion skin you want to use.</p> <p>Projectile Ghost Replacements: List used to replace the projectile ghosts of a character. TODO: add a tutorial on how to do this.</p>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#skin-mod-info","title":"Skin Mod Info","text":"<p>Your mod will need a Mod Info in order for it to be created. Right Click in the project window and select \"Create-&gt;RoR Skins-&gt;SkinModInfo\"</p> <p>You'll need to fill out most of the fields of the ModInfo in order to build your mod. Descriptions of all the fields are located below. For all text fields, DO NOT start your text with a numerical number 0-9 i.e. (text numbers like one are fine though) or special characters(!, @, $, etc.) unless otherwise stated as this will cause errors in the build process. </p> <p>Parts of the Skin Mod Info</p> <p>Mod Name: The name of your mod</p> <p>Author: The name of the author of the mod (You!)</p> <p>Version: Version number of the mod. Follows semantic version format i.e. 1.0.0.</p> <p>Skins: This is the list of skins you want to include in your mod. Set the size and assign the skins by clicking the target on the right of each element and selecting the skin. If one of your skins has minion replacement(s) with corresponding skin(s) make sure you include them as well.</p> <p>Additional Resources: A list where you can specify additional resources to the asset bundle built for the mod. You can leave this alone unless you know you need to add additional resources. Materials and meshes assigned in skindefs are automatically added to the bundle and DO NOT need to be added here.</p> <p>Regenerate Code: This toggle when checked regenerates the code that is generated by the builder when the build button is pressed. Keep this checked if you made any changes to skindefs or additional resources. Only toggle this off if you want to make edits to the autogenerated code.</p> <p>Regenerate Assembly Definition: This toggle when checked regenerates the assembly definition generated by the builder when the build button is pressed. Only toggle this off if you want to manually make edits to the Assembly Definition.</p> <p>Build Button: Hit this when you want to build your mod. A progress bar pop-up may appear and Unity will likely freeze for a moment. If the mod builds with no errors then a separate windows explorer window will appear with your mod dll inside it. If there are errors an error sound will play and the window will not appear. Check the unity console for errors, fix them and try again.</p>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#manual-programming-route","title":"Manual Programming route","text":""},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#note-this-is-copied-from-an-older-version-of-the-skin-creation-wiki-pretty-much-verbatim-and-may-not-work-correctly-proceed-with-caution","title":"Note: This is copied from an older version of the skin creation wiki pretty much verbatim and may not work correctly. Proceed with caution","text":""},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#unity_1","title":"Unity","text":"<p>First of all, you need to use the right version of Unity (available top of the page), otherwise, the game will not be able to load your Assetundle.</p> <p>Create a new Unity project, drag the Blender file into assets. Open the imported asset, select mesh, and press ctrl+d it will duplicate mesh into its asset, so you can build AssetBundle without excessive things from the Blender file. You can do the same thing with the material, or create new in Unity. Should be looking something like this</p> <p></p> <p>Now install <code>AssetBundle Browser</code> package (In top panel: Window -&gt; Package Manager), and open <code>AssetBundles</code> window (In top panel: Window -&gt; AssetBundle Browser). Select what you need for AssetBundle and drag it to the AssetBundles window, create 1 AssetBundle</p> <p></p> <p>Switch to the <code>Build</code> tab and press the build button. This will create AssetBundle in <code>{YourUnityProject}\\AssetBundles\\StandaloneWindows</code> folder.</p>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#visual-studio","title":"Visual studio","text":"<p>Create/use a boilerplate visual studio project. Drag and drop your AssetBundle file into the project.</p> <p></p> <p>Then select this file and set <code>Build Action</code> property to <code>Embedded resource</code></p> <p></p> <p>I will provide the code snippet for how to add the skin with some commentaries.</p>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#renderers","title":"Renderers","text":"<p>In the example code, there is an array of renderers. The render indices for vanilla survivors can be seen here</p>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#example-code","title":"Example code","text":"<pre><code>using BepInEx;\nusing R2API;\nusing R2API.Utils;\nusing RoR2;\nusing System;\nusing System.Reflection;\nusing UnityEngine;\n\n//Change `SkinTest` to your project name\nnamespace SkinTest\n{\n    //Marks mod as client-side\n    [NetworkCompatibility(CompatibilityLevel.NoNeedForSync)]\n    //Requests `R2API` submodules\n    [R2APISubmoduleDependency(nameof(PrefabAPI), nameof(LoadoutAPI), nameof(SurvivorAPI), nameof(ResourcesAPI), nameof(LanguageAPI))]\n    //Adds dependency to `R2API`\n    [BepInDependency(\"com.bepis.r2api\")]\n    //Definition of a mod\n    [BepInPlugin(\n        //The GUID should be a unique ID for this plugin, which is human readable (as it is used in places like the config). Java package notation is commonly used, which is \"com.[your name here].[your plugin name here]\"\n        \"com.MyName.IHerebyGrantPermissionToDeprecateMyModFromThunderstoreBecauseIHaveNotChangedTheName\",\n        //The name is the name of the plugin that's displayed on load\n        \"IHerebyGrantPermissionToDeprecateMyModFromThunderstoreBecauseIHaveNotChangedTheName\",\n        //The version number just specifies what version the plugin is.\n        \"1.0.0\")]\n\n    //Rename `SkinTest` to match your .cs file name\n    public class SkinTest : BaseUnityPlugin\n    {\n        private void Awake()\n        {\n            //Loading AssetBundle with a model. String value is \"{ProjectName}.{AssetBundleFileName}\"\n            using (var assetStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(\"SkinTest.lumberjackskin\"))\n            {\n                var MainAssetBundle = AssetBundle.LoadFromStream(assetStream);\n                //This string value will be used as a part of resource path. Replace `@SkinTest` with your name prefferably it should be `@{mod name}`\n                ResourcesAPI.AddProvider(new AssetBundleResourcesProvider(\"@SkinTest\", MainAssetBundle));\n            }\n\n            //Adding our skill after all characters were loaded\n            On.RoR2.SurvivorCatalog.Init += (orig) =&gt;\n            {\n                orig();\n\n                AddLumberJackSkin();\n            };\n\n            //Adding language token, so every time game sees `LUMBERJACK_SKIN` it will be replaced with `Lumberjack`\n            //You can also use `LanguageAPI.Add(\"TOKEN\", \"Value\", \"Language\")` to add localization for specific language\n            //For example `LanguageAPI.Add(\"LUMBERJACK_SKIN\", \"\u0414\u0440\u043e\u0432\u043e\u0441\u0435\u043a\", \"RU\")`\n            LanguageAPI.Add(\"LUMBERJACK_SKIN\", \"Lumberjack\");\n        }\n\n        private void AddLumberJackSkin()\n        {\n            //Getting character's prefab\n            var survivorDef = SurvivorCatalog.GetSurvivorDef(SurvivorIndex.Commando);\n            var bodyPrefab = survivorDef.bodyPrefab;\n\n            //Getting necessary components\n            var renderers = bodyPrefab.GetComponentsInChildren&lt;Renderer&gt;(true);            \n            var skinController = bodyPrefab.GetComponentInChildren&lt;ModelSkinController&gt;();\n            var mdl = skinController.gameObject;\n\n            var skin = new LoadoutAPI.SkinDefInfo\n            {\n                //Icon for your skin in the game, it can be any image, or you can use `LoadoutAPI.CreateSkinIcon` to easily create an icon that looks similar to the icons in the game.\n                Icon = LoadoutAPI.CreateSkinIcon(Color.black, Color.white, new Color(0.5F, 0.3F, 0), Color.white),\n                //Replace `LumberJackCommando` with your skin name that can be used to access it through the code\n                Name = \"LumberJackCommando\",\n                //Replace `LUMBERJACK_SKIN` with your token\n                NameToken = \"LUMBERJACK_SKIN\",\n                RootObject = mdl,\n                //Defining skins that will be applyed before our.\n                //Default skin index - 0, Monsoon skin index - 1\n                //Or you can use `BaseSkins = Array.Empty&lt;SkinDef&gt;(),` if you don't want to add base skin\n                //Because we will replace only Commando mesh, but not his pistols we have to use base skin.\n                BaseSkins = new SkinDef[] { skinController.skins[0] },\n                //Name of achievement after which skin will be unlocked\n                //Leave that field empty if you want skin to be always available \n                UnlockableName = \"\",\n                //This is used to disable/enable some gameobjects in body prefab.\n                GameObjectActivations = new SkinDef.GameObjectActivation[0],\n                //This is used to define which material should be used on a specific renderer.\n                //Only one material per renderer(mesh) is can be used\n                RendererInfos = new CharacterModel.RendererInfo[]\n                {\n                    //To add another material replacement simply copy past this block right after and add `,` after the first one.\n                    new CharacterModel.RendererInfo\n                    {\n                        //Loading material from AssetBundle replace \"@SkinTest:Assets/Resources/matLumberJack.mat\" with your value.\n                        //It should be in this format `{provider name}:{path to asset in unity}`\n                        //To get path to asset you can right click on your asset in Unity and select `Copy path` option\n                        defaultMaterial = Resources.Load&lt;Material&gt;(\"@SkinTest:Assets/Resources/matLumberJack.mat\"),\n                        //Should mesh cast shadows\n                        defaultShadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On,\n                        //Should mesh be ignored by overlays. For example shield outline from `Personal Shield Generator`\n                        ignoreOverlays = false,\n                        //Which renderer(mesh) to replace.\n                        //Index you need can be found here: https://github.com/risk-of-thunder/R2Wiki/wiki/Creating-skin-for-vanilla-characters-with-custom-model#renderers\n                        renderer = renderers[2]\n                    }\n                },\n                //This is used to define which mesh should be used on a specific renderer.\n                MeshReplacements = new SkinDef.MeshReplacement[]\n                {\n                    //To add another mesh replacement simply copy past this block right after and add `,` after the first one.\n                    new SkinDef.MeshReplacement\n                    {\n                        //Loading mesh from AssetBundle look at material replacement commentary to learn about how value should be changed.\n                        mesh = Resources.Load&lt;Mesh&gt;(\"@SkinTest:Assets/Resources/LumberJack.mesh\"),\n                        //Index you need can be found here: https://github.com/risk-of-thunder/R2Wiki/wiki/Creating-skin-for-vanilla-characters-with-custom-model#renderers\n                        renderer = renderers[2]\n                    }\n                },\n                //You probably don't need to touch this line\n                ProjectileGhostReplacements = new SkinDef.ProjectileGhostReplacement[0],\n                //This is used to add skins for minions e.g. EngiTurrets\n                MinionSkinReplacements = new SkinDef.MinionSkinReplacement[0]\n            };\n\n            //Adding new skin to a character's skin controller\n            Array.Resize(ref skinController.skins, skinController.skins.Length + 1);\n            skinController.skins[skinController.skins.Length - 1] = LoadoutAPI.CreateNewSkinDef(skin);\n\n            //Adding new skin into BodyCatalog\n            var skinsField = Reflection.GetFieldValue&lt;SkinDef[][]&gt;(typeof(BodyCatalog), \"skins\");\n            skinsField[BodyCatalog.FindBodyIndex(bodyPrefab)] = skinController.skins;\n            Reflection.SetFieldValue(typeof(BodyCatalog), \"skins\", skinsField);\n        }\n    }\n}\n</code></pre>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#result","title":"Result","text":"<p>You can check out how it looks in motion: https://youtu.be/N5WPOxIErI0</p>"},{"location":"Mod-Creation/Assets/Skins/Creating-skin-for-vanilla-characters-with-custom-model/#testing-your-mod","title":"Testing your mod","text":"<p>Once you have a dll of your mod, you can drop it into your bepinex plugins folder and launch your modded RoR2.</p> <p>If everything is working, you should be able to select your skin in the character select screen.</p> <p>TODO: Create a list of Common issues and solutions that appear when building skins.</p>"},{"location":"Mod-Creation/Assets/Sounds/WWise/Custom-Music/","title":"Custom Music","text":"<ul> <li> <p>Setup WWise with that tutorial, note that version 2023.1.4.8496 is the one currently used by the game (DLC2 SOTS Release)</p> </li> <li> <p>Get the boilerplate music project for RoR2</p> </li> <li> </li> <li> <p>Open it. Go to the SoundBanks tab, rename the soundbank to something unique and not shared by any other mods.</p> <p></p> </li> <li> <p>Rename the state group named <code>gameplaySongChoice2</code></p> <p></p> </li> <li> <p>Rename the 3 events Play_Music_System2, Pause_Music2 and Unpause_Music2 under the default work unit in the Event tab to something unique to your mod and not shared by any other mods.</p> <p></p> </li> <li> <p>Do note the curve of the music volume in Music_System's RTPC, it should be like this (this was given to us by Gearbox). </p> </li> </ul> <p></p> <ul> <li> <p>The boilerplate already has 2 songs setup across 3 different states that will be played as :</p> <p>a boss track (in a stage), a gameplay track (in a stage) and the track that plays when in the logbook :</p> <p></p> <p>The .wav files are not shipped in the boilerplate, those will show as red, when importing your own tracks, make sure they are streamed.</p> <p></p> </li> <li> <p>Once you are done setting up your states for your tracks, it's export time.</p> <p>Press F7, then Shift+F7 for generating the soundbank for current platform (Windows).</p> <p>You can then open the containing folder by right clicking the soundbank name in the tree list.</p> <p>You should end up with a folder similar to this</p> <p></p> <p>Gather the state group ids, and the state ids from the Init.txt file for Unity / your plugin code.</p> <p>What need to be packaged with your mod are the .bnk (soundbanks) files and the .wem (music) files</p> <p>Rename the Init.bnk file to something unique and not shared by another mods, I repeat, the file must be named differently than other Init bank files from the game / other music mods.</p> <p>For loading that bank into the game, have a code similar to this by using the R2API submodule SoundAPI</p> </li> </ul> <pre><code>// Above your BaseUnityPlugin class definition\n[BepInDependency(R2API.R2API.PluginGUID)]\n[R2APISubmoduleDependency(nameof(SoundAPI))]\n\n...\n\n// Called by your mod Awake()\nvar d = new SoundAPI.Music.CustomMusicData();\nd.BanksFolderPath = System.IO.Path.Combine(Paths.PluginPath, \"BankTest\");\nd.BepInPlugin = Info.Metadata;\nd.InitBankName = \"Init2\";\nd.PlayMusicSystemEventName = \"Play_Music_System2\";\nd.SoundBankName = \"RoR2MusicTest\";\n\nd.SceneDefToTracks = new();\n\nvar logBookScene = Resources.Load&lt;SceneDef&gt;(\"SceneDefs/logbook\");\n\n// that following block of code create a track def for a custom music in the logbook s\nvar mainlogBookTrackDef = ScriptableObject.CreateInstance&lt;SoundAPI.Music.CustomMusicTrackDef&gt;();\nmainlogBookTrackDef.cachedName = \"customMusic\";\nmainlogBookTrackDef.SoundBankName = d.SoundBankName;\nmainlogBookTrackDef.CustomStates = new();\nvar cstate1 = new SoundAPI.Music.CustomMusicTrackDef.CustomState();\ncstate1.GroupId = 1598298728U; // Group ID, gathered from the Init bank txt file. Vanilla Group ID Music_menu\ncstate1.StateId = 2326263800U; // State ID, gathered from the Init bank txt file. Denote where the track will be played, in this case it uses the vanilla state Logbook2\nmainlogBookTrackDef.CustomStates.Add(cstate1);\nvar cstate2 = new SoundAPI.Music.CustomMusicTrackDef.CustomState();\ncstate2.GroupId = 792781730U; // gathered from the Init bank txt file. Vanilla Group ID Music_system\ncstate2.StateId = 2607556080U; // gathered from the Init bank txt file. Denote where the track will be played, in this case it uses the vanilla state Menu\nmainlogBookTrackDef.CustomStates.Add(cstate2);\n\nd.SceneDefToTracks.Add(logBookScene, new List&lt;SoundAPI.Music.MainAndBossTracks&gt;() { new SoundAPI.Music.MainAndBossTracks(mainlogBookTrackDef, null) });\n\nSoundAPI.Music.Add(d);\n</code></pre>"},{"location":"Mod-Creation/Assets/Sounds/WWise/Custom-Music/#warning-do-not-use-boilerplate-in-released-mods-only-use-boilerplate-as-a-reference-point-always-make-new-wwise-project-for-each-mod-otherwise-collisions-will-occur-and-either-yours-or-someone-elses-mod-who-also-used-boilerplate-without-making-new-wwise-project-will-not-have-music","title":"WARNING! Do not use boilerplate in released mods. Only use boilerplate as a reference point, always make new Wwise project for each mod. Otherwise collisions will occur and either yours or someone else's mod (who also used boilerplate without making new Wwise project) will not have music.","text":""},{"location":"Mod-Creation/Assets/Sounds/WWise/Custom-Music/#explanation-on-magic-numbers","title":"Explanation on \"magic numbers\":","text":"<p>RoR2 comes with its own Init.txt file that can be found inside Risk of Rain 2_Data\\StreamingAssets\\Audio\\GeneratedSoundBanks\\Windows folder.</p> <p>What interests us the most are State Groups and States.</p> <p>If we loot at any game's MusicTrackDef with thunderkit we will see that most of them have two states - one that references the song itself and another references where the song is used</p> <p></p> <p>While song reference can be pretty much anything, where it is used needs to match game's values so it can actually play.</p> <p>That's exactly what we did when we created CustomMusicTrackDef with two custom states, first pair of group and state ids reference our song, while second references needed game's music system.</p> <p>If we cross-reference second pair with game's Init.txt we discover that Group ID is State Group \"Music_system\" and State ID is Stats \"Gameplay\".</p> <p>There are 5 states in total</p> <ul> <li>Gameplay  - 89505537</li> <li>Bossfight - 580146960</li> <li>None - 748895195</li> <li>SecretLevel - 778026301</li> <li>Menu - 2607556080</li> </ul> <p>By changing second StateId to any of those values we change where the song plays. </p> <p>Also, you need to make sure whether new song is \"main\" track or \"boss\" track.</p> <p>Each SceneDef has two field for music - mainTrack and bossTrack.</p> <p>All main stages have both of those fields populated, however some other scenes (such as main menu, logbook, bazaar, etc) can only have mainTrack.</p> <p>Depending where it plays it needs to have correct State ID.</p> <p>For example, for main menu, logbook, lobby, etc. it needs to be Menu (2607556080), for stages it needs to be Gameplay (89505537), for teleporter events (those are \"boss\" tracks) - Bossfight (580146960). SecretLevel (778026301) is only used for bazaar as far as I know, every other \"Hidden Realm\" uses Gameplay for its main track.</p>"},{"location":"Mod-Creation/Assets/Sounds/WWise/Getting-Started/","title":"Getting Started","text":""},{"location":"Mod-Creation/Assets/Sounds/WWise/Getting-Started/#requirements","title":"Requirements:","text":"<ul> <li>Wwise v2023.1.4.8496 <ul> <li>NOTE: If the version is not available to download you can try getting the closest version available to the number listed above, you can make sure if it is compatible or not is by checking what SchemaVersion and what SoundbankVersion you got in SoundbanksInfo.xml file after generating your soundbanks with Wwise. SoTV (DLC 1) version of RoR2 uses SchemaVersion 12 and SoundbankVersion 135. You can find game's SoundbanksInfo.xml inside Risk of Rain 2_Data\\StreamingAssets\\Audio\\GeneratedSoundBanks\\Windows.</li> </ul> </li> <li>An IDE (like Visual Studio 2022)</li> <li>Audio files in .wav format (will not work in any other format, convert using audacity if needed)</li> </ul> <p>Note: This tutorial will not showcase all the advanced features Wwise offers such as randomness, 3d audio, and other features. Only importing an audio and getting it to play via script.</p>"},{"location":"Mod-Creation/Assets/Sounds/WWise/Getting-Started/#installing-wwise-into-a-unity-project","title":"Installing Wwise into a Unity Project","text":"<p>Follow the order exactly, deviation will lead to the project not being setup correctly.</p> <p>The Wwise Installer does not function well when trying to install to an existing project, so it is recommended you start from a blank unity project to complete these steps.  After completing all steps you can copy the content from the new Wwise project into your target project and should be able to open it successfully with wwise at that point.</p> <ol> <li>Get Offline Installer from AudioKinetic https://www.audiokinetic.com/library/edge/?source=InstallGuide&amp;id=working_with_offline_installers</li> <li>Create new Unity Project with Unity Hub for Unity Version RoR2 uses</li> <li>Close Unity</li> <li>Open the Wwise Launcher and navigate to the Unity Page</li> <li>Find the new project in the list, and click on the left drop down to select the option for Integrating with an Offline Installer</li> <li>Wait for the Wwise Launcher to finish the integration process</li> <li>Open the Project with Unity again</li> </ol>"},{"location":"Mod-Creation/Assets/Sounds/WWise/Getting-Started/#remaining-steps-are-only-for-thunderkit-users","title":"Remaining steps are only for ThunderKit users","text":"<ol> <li>Backup your project before starting so you don't have to reintegrate Wwise in case Thunderkit fails to do its thing.</li> <li>Create an Assembly Definition in the Assets/Wwise folder and name it Wwise</li> <li>Create an Assembly Definition in the Assets/Wwise/Editor folder and name it WwiseEditor</li> <li>Install ThunderKit</li> <li>Install RoR2ImportExtensions</li> <li>Locate Risk of Rain 2 using the ThunderKit Settings window</li> <li>Wait for import to finish.</li> <li>Delete Packages/Risk of Rain 2/Wwise.dll if it exists (.dll will not be visible in the name in Unity)</li> <li>Delete Packages/Risk of Rain 2/plugins/AkSoundEngine.dll if it exists (.dll will not be visible in the name in Unity)</li> <li>Delete Packages/Risk of Rain 2/plugins/AkWaapiClient.dll if it exists (.dll will not be visible in the name in Unity)</li> </ol> <p>However, there is a chance that your import will get stuck (as in stops progressing), it is caused by conflicts between Wwise and Thunderkit. To solve this do the following steps:</p> <ul> <li>Delete both assembly definitions created on steps 9 and 10 and restart import process. Your best bet is to restore the backup that you surely made and start from step 11, ignoring 9 and 10 for now. </li> <li>After Thunderkit does its thing you will get error messages described in steps 15 to 17. Ignore them for now.</li> <li>Go to Assets\\Wwise and create Assembly Definition called Wwise, under Assembly Definition Reference add Unity.Timeline, click Apply. </li> <li>Go to Assets\\Wwise\\Editor, create Assembly Definition called WwiseEditor, under Assembly Definition References add Unity.Timeline and Wwise, under Platforms uncheck \"Any Platform\", click Deselect all and check \"Editor\" (this is important, otherwise Thunderkit will attempt to compile editor scripts into assembly, resulting in errors), click Apply. </li> <li>After this you will still get errors from steps 15 to 17, do those steps to fix the errors. You might need to restart the project after deleting dlls. </li> </ul> <p>After doing all of this you should have a successful integration of Wwise and Thunderkit into your project. The easiest way to check whether integration was successful or not is to create MusicTrackDef (Create - RoR2 - MusicTrackDef) and if it looks like this </p> <p></p> <p>Then you did everything correctly. However if it looks like this</p> <p></p> <p>then you messed up somewhere and have to retrace your steps.</p>"},{"location":"Mod-Creation/Assets/Sounds/WWise/Getting-Started/#process","title":"Process:","text":"<p>The Whole process in video format up to the coding part.</p> <ul> <li>Launch wwise and create / open project.</li> <li>To import a new audio, use Project &gt; Import Audio Files &gt; Select your audio file and hit import. After importing it should appear in the hierarchy as seen below. </li> <li>Next we're going to create an event that will be used to call this sound from script. </li> <li>At the top hit Layouts &gt; SoundBank</li> <li>Now at the bottom left you should see an event viewer, right click inside and create a New Event &gt; Play</li> <li>Name it anything and hit okay, now in the target field you will select the audio clip you imported earlier by dragging it into the field. </li> <li>Now that we have our event setup for our audio clip, we can create our soundbank. In the upper right window (SoundBank Manager) you can hit new and create your soundbank.</li> <li>Now with your soundbank selected, you can drag your event into the soundbank editor to add it to your soundbank.</li> <li>Now just hit Generate Selected and it will generate your soundbank.bnk file! </li> </ul>"},{"location":"Mod-Creation/Assets/Sounds/WWise/Getting-Started/#playing-your-audioclips-from-script","title":"Playing your audioclips from script:","text":"<p>Check how to import a soundbank here * Now to finally get a sound to play, just call AkSoundEngine.PostEvent( , ); * To get your sounds event id, just locate the text file with the same name as your generated soundbank.bnk in your wwise projects output folder. <p></p>"},{"location":"Mod-Creation/C%23-Programming/Assembly-References/","title":"Assembly References","text":"<p>For making a RoR2 mod, your C# project will need to reference different <code>.dll</code> assemblies.</p> <p>Example of assemblies you may be using:</p> <ul> <li><code>RoR2.dll</code> which contains the game code</li> <li><code>BepInEx.dll</code>, for declaring your <code>BaseUnityPlugin</code> class which is the entry point of your plugin (mod)</li> </ul> <p>If you want to use the multiple libraries, your project must first contain a reference to it.</p> <p>A reference is essentially an entry in a project file (.csproj) that contains the information that Visual Studio (more precisely the compiler) needs to locate the component or the service.</p> <ul> <li> <p>For Visual Studio 2022</p> <p>For adding a reference manually, right click on the References or Dependencies node in Solution Explorer and choose Add Reference. You can also right-click on the project node and select Add &gt; Reference</p> </li> </ul> <p>But, here, we use NuGet for most, if not all assembly references we have in our projects.</p> <p>There are multiple reasons we do that, its much easier for the mod dev:</p> <ul> <li>They only have to bump the version number of the assembly reference when a new game update comes.</li> <li>They don't have to handle all the assembly stripping / publicizing themselves. (more on that just below)</li> </ul>"},{"location":"Mod-Creation/C%23-Programming/Assembly-References/#stripping","title":"Stripping","text":"<p>But, how do we publish the game dlls on NuGet, aren't those copyrighted, well, yes! They are. But we are publishing a version of them where only the method signatures, class definitions are in it, no method bodies! Yay! No copyright issues!</p>"},{"location":"Mod-Creation/C%23-Programming/Assembly-References/#publicizing","title":"Publicizing","text":"<p>We publicize the game assemblies, due to the nature of modding, and depending on how deeply you are modifying it, you'll be bound to modify the internal working of classes, methods, and so on.</p> <p>Meaning that you'll at some point have to reference normally private variables, methods and so on while through your plugin assembly !</p> <p>Before, in the days of dark and ancient times, we had to use <code>System.Reflection</code> for this, and we had no way of directly referencing private classes, members, methods, it was horrific, hard coded strings everywhere, no compiler safety, but now, this is over!</p> <p>We just use some magic .NET assembly reader / writer libraries, and modify the metadata of those members to make them public. Yay!</p>"},{"location":"Mod-Creation/C%23-Programming/Assembly-References/#ok-fine-where-do-i-get-the-juice","title":"Ok, fine, where do I get the juice","text":"<p>We'll use the BepInEx nuget feed.</p> <ul> <li>Put this nuget.config file next to your .sln (Visual Studio Solution) file.</li> <li> <p>Then, in your .csproj (Visual Studio C# Project) file, have these lines</p> <p>This will make use of the BepInEx nuget feed and will handle all the necessary assembly references needed for modding RoR2. You'll also need to make sure you have a source file in your plugin that contains those lines:</p> <pre><code>using System.Security;\nusing System.Security.Permissions;\n\n[assembly: SecurityPermission( SecurityAction.RequestMinimum, SkipVerification = true )]\n</code></pre> <p>If you are to lazy to type, you can download this .cs file that contains those lines</p> </li> </ul> <p>If Visual Studio is already running, close it, this way the BepInEx nuget feed get taken into account.</p> <p>Open the solution again, then, right click on solution file =&gt; Restore NuGet packages / Or try building the solution.</p> <p>If done correctly, you can now access any private, internal, or readonly types, methods, properties, fields, and events in the game assemblies.</p>"},{"location":"Mod-Creation/C%23-Programming/Assembly-References/#publicizing-stripping-assemblies-we-dont-already-cover","title":"Publicizing / Stripping assemblies we don't already cover","text":"<p>If you feel like a game assembly should really be added and maintened by the core dev of the RoR2 Modding community, please let us know in the modding discord.</p> <p>If you want to publicize assemblies that we don't already cover on our NuGet packages and may a bit too obscure for general use, you can proceed as follow:</p> <ul> <li>Download NStrip</li> <li>Download latest release and unzip</li> <li>Open console command in the folder where you unzipped</li> <li><code>.\\NStrip.exe -p -cg -cg-exclude-events -remove-readonly &lt;FULL_PATH_TO_ROR2.DLL_IN_GAME_MANAGED_FOLDER&gt;</code>     If you want to keep method bodies, add -n, but don't upload that dll on github or somewhere else if you do that</li> <li>Inside your plugin, create a new empty source file</li> <li>Add the following code to it:</li> </ul> <pre><code>using System.Security;\nusing System.Security.Permissions;\n\n[assembly: SecurityPermission( SecurityAction.RequestMinimum, SkipVerification = true )]\n</code></pre> <ul> <li>You can now access any private, internal, or readonly types, methods, properties, fields, and events in the RoR2 assembly</li> </ul>"},{"location":"Mod-Creation/C%23-Programming/Code-Analysis/","title":"Code Analysis","text":""},{"location":"Mod-Creation/C%23-Programming/Code-Analysis/#slightly-out-of-date-ilspy-is-largely-preferred-to-dnspy-due-to-better-decompilation-quality","title":"SLIGHTLY OUT OF DATE, ILSPY IS LARGELY PREFERRED TO DNSPY DUE TO BETTER DECOMPILATION QUALITY","text":"<p>https://github.com/icsharpcode/ILSpy/releases/</p> <p>For linux users, take the avalonia version : https://github.com/icsharpcode/AvaloniaILSpy/releases</p>"},{"location":"Mod-Creation/C%23-Programming/Code-Analysis/#guide","title":"Guide","text":"<p>Latest Release</p> <p>dnSpy is a debugger and .NET assembly editor. You can use it to edit and debug assemblies even if you don't have any source code available.</p>"},{"location":"Mod-Creation/C%23-Programming/Code-Analysis/#getting-to-grips-with-dnspy","title":"Getting to grips with DnSpy","text":"<p>Extract &amp; open DnSpy.exe from the downloaded archive and then hit File-&gt;Open-&gt;Select \\Risk of Rain 2\\Risk of Rain 2_Data\\Managed\\RoR2.dll. You should be presented with something like this: </p> <p>You can explore the Namespace hierarchy in the left pane. For instance we can take a look through the RoR2.Run class by selecting it in the left pane. </p> <p>You can search for specific variables, methods, and types by using the \"Search Assemblies\" function. </p> <p>You can also search for references to a specific property/field by using the Analyse function.  </p> <p>It is possible to edit the method that you are viewing, which can be useful for generating the correct IL code within the current context </p> <p>You can then view the corresponding IL code to your modified method  If you use ILSpy, you need to switch to IL view here </p> <p>With only the functions listed above, it becomes relatively easy to start to understand the codebase that you are working with, and to decide upon a course of action how you intend to accomplish a certain task.</p>"},{"location":"Mod-Creation/C%23-Programming/Configuration/","title":"Configuration","text":""},{"location":"Mod-Creation/C%23-Programming/Configuration/#getting-started","title":"Getting Started","text":"<p>Often when making a mod you will have variables which you may want to change based on user preference. Such variables will also be able to be live edited if you add support for hot reloading. </p> <p>e.g. In a mod which gives a player money at the start of each stage it would be good to be able to set how much money you think you should receive each stage.</p> <p>This can easily be achieved by using configuration. We can automatically generate a configuration file by accessing the <code>Config</code> field of <code>BaseUnityPlugin</code>.</p> <pre><code>public abstract class BaseUnityPlugin : MonoBehaviour\n    {\n        protected BaseUnityPlugin();\n\n        protected ManualLogSource Logger { get; }\n        protected ConfigFile Config { get; } //This is the field we are interested in!\n    }\n</code></pre> <p>All mods that you create will inherit from <code>BaseUnityPlugin</code> so we can do our configuration from there!</p> <p>If you want your config file to have a custom name to it you can make a new ConfigFile instance and give it the path that will contains the custom name, like this for example :</p> <p><code>private static ConfigFile CustomConfigFile { get; set; }</code> Then initialize it : </p> <p><code>CustomConfigFile = new ConfigFile(Paths.ConfigPath + \"\\\\CustomNamedFile.cfg\", true);</code></p> <p>The second parameter, if set to true, will create the file even if no ConfigWrapper are made. If you want to create a ConfigFile on a custom folder, refer to the final section of this guide.</p> <p>Before we do this though we should add a <code>ConfigEntry&lt;T&gt;</code>. This class can be found in the namespace <code>Bepinex.Configuration</code> and we use this as our main data holder for our configuration values. So we can start off by adding one of these to our project. ConfigEntries are always <code>public static ...</code> and they are always fields in a class inheriting from BaseUnityPlugin (as already mentioned above).</p> <p><code>public static ConfigEntry&lt;int&gt; MyConfigEntry { get; set; }</code> </p> <p>NOTE: <code>T</code> is a generic type. When we create a class with a <code>&lt;T&gt;</code> we tell Visual Studio what type we want this class to use. In this case we are using <code>int</code>.</p> <p>Currently, BepInEx supports the following Types for Configuration: * string * bool * byte * sbyte * short * ushort * int * uint * long * ulong * float * double * decimal * enum * Color * Vector2 * Vector3 * Vector4 * Quaternion</p> <p>Now we have the ConfigEntry set up we must use the BaseUnityPlugin <code>Config.Bind&lt;T&gt;()</code> method in order to give our ConfigEntry values and tell the mod what to put in the configuration file.</p> <p>Config.Bind() has a couple of overloads but the second one I find most useful. You will need: <pre><code>string SectionName, //the name of the section of the configuration file this configuration will be stored (useful if you have multiple configurations)\nstring Key,         //this is the name of what you are going to be looking up in configuration\nT DefaultValue,     //default value for your configuration\nstring Description  //optional field which you can add description of what this configuration does and what to put in it\n</code></pre> <p>So in our case:</p> <p><pre><code>[BepInDependency(\"com.bepis.r2api\")]\n[BepInPlugin(\"com.Tutorials.ConfigurationTutorial\", \"ConfigurationTutorial\", \"1.0.0\")]\npublic class ConfigurationTutorial : BaseUnityPlugin\n{\n    public static ConfigEntry&lt;int&gt; MyConfigEntry { get; set; }\n\n    public void Awake()\n    {\n        MyConfigEntry = Config.Bind&lt;int&gt;(\n        \"MySection\",\n        \"MyKey\",\n                10,\n        \"This is the description\"\n        )\n    }\n}\n</code></pre> If you use a custom named config file, be sure to .Bind on the actual instance we made !</p> <p>Now your configuration is set up, lastly what you need to do to get the value out of the ConfigEntry is call <code>MyConfigEntry.Value</code> at the place in your code where you need the value.</p>"},{"location":"Mod-Creation/C%23-Programming/Configuration/#generating-the-configuration-file","title":"Generating the configuration file","text":"<p>This is the easy bit. It is all done for you! Just build your mod and put it in <code>Bepinex\\Plugins</code> as usual. After the first time you run the game you will get a configuration file in <code>Bepinex\\config</code> with the name of your plugin.</p> <p>To edit the values you simply open the file in your favourite text editor, change the values and save the file. The next time you run the game your mod will use the new values.</p> <p>Configuration files will look something like this:</p> <pre><code>[MySection]\n\n# This is the description.\nMyKey = 10\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/Configuration/#adding-multiple-configurations","title":"Adding multiple configurations","text":"<p>You need to have a unique ConfigEntry and call <code>Config.Bind</code> on each one for every configuration value your mod needs to use.</p> <pre><code>[BepInDependency(\"com.bepis.r2api\")]\n[BepInPlugin(\"com.Tutorials.ConfigurationTutorial\", \"ConfigurationTutorial\", \"1.0.0\")]\npublic class ConfigurationTutorial : BaseUnityPlugin\n{\n    public static ConfigEntry&lt;int&gt; MyConfigEntry { get; set; }\n    public static ConfigEntry&lt;int&gt; MySecondConfigEntry { get; set; }\n\n    public void Awake()\n    {\n        MyConfigEntry = Config.Bind&lt;int&gt;(\n        \"MySection\",\n        \"MyKey\",\n                10,\n        \"This is the description\"\n            )\n\n        MySecondConfigEntry = Config.Bind&lt;int&gt;(\n        \"MySection\",\n        \"MySecondKey\",\n                5,\n        \"This is the description of the second thing\"\n        )\n    }\n}\n</code></pre> <p>This will give a configuration file which looks something like this:</p> <pre><code>[MySection]\n\n# This is the description.\nMyKey = 10\n\n# This is the description of the second thing.\nMySecondKey = 5\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/Configuration/#hot-reloading","title":"Hot Reloading","text":"<p>If you want to see the change made to the config file into the game without having to restart it, you can call the Reload() Method available in the BepinEx ConfigFile class. Here is a quick example with a console command : <pre><code>[ConCommand(commandName = \"mod_reload\", flags = ConVarFlags.None, helpText = \"Reload the config file of the mod.\")]\nprivate static void CCReloadConfig(ConCommandArgs args)\n{\n    ConfigFile.Reload();\n}\n\nAdditionally `ConfigEntry`s have an event that triggers when they are changed, this can be used to get fine control over your mod at runtime.\n</code></pre></p>"},{"location":"Mod-Creation/C%23-Programming/Configuration/#a-worked-example","title":"A worked example","text":"<p>The following example will build on top of the First mod</p> <p>After finishing that tutorial you should have code which looks similar to below:</p> <pre><code>    namespace ConfigurationTutorial\n    {\n        [BepInDependency(\"com.bepis.r2api\")]\n        [BepInPlugin(\"com.Tutorials.ConfigurationTutorial\", \"ConfigurationTutorial\", \"1.0.0\")]\n        public class ConfigurationTutorial : BaseUnityPlugin\n        {\n            public void Awake()\n            {\n                On.EntityStates.Huntress.ArrowRain.OnEnter += (orig, self) =&gt;\n                {\n                    Chat.AddMessage(\"This is our message!\");\n                    orig(self);\n                }\n            }\n        }\n    }\n</code></pre> <p>1) Make sure your project is set up correctly. All references are resolved, all necessary using statements are already entered at top of file. If you have any red underlines, as always, you can click on them then press <code>Ctrl + .</code> to see if Visual Studio can find a resolution to the error.</p> <p>2) Add ConfigEntry field to your mod.</p> <pre><code>    namespace ConfigurationTutorial\n    {\n        [BepInDependency(\"com.bepis.r2api\")]\n        [BepInPlugin(\"com.Tutorials.ConfigurationTutorial\", \"ConfigurationTutorial\", \"1.0.0\")]\n        public class ConfigurationTutorial : BaseUnityPlugin\n        {\n            public static ConfigEntry&lt;string&gt; HuntressRainMessage { get; set; }\n\n            public void Awake()\n            {\n                On.EntityStates.Huntress.ArrowRain.OnEnter += (orig, self) =&gt;\n                {\n                    Chat.AddMessage(\"This is our message!\");\n                    orig(self);\n                }\n            }\n        }\n    }\n</code></pre> <p>3) Call <code>Config.Bind&lt;T&gt;()</code> in awake method and assign value to your ConfigWrapper</p> <pre><code>    namespace ConfigurationTutorial\n    {\n        [BepInDependency(\"com.bepis.r2api\")]\n        [BepInPlugin(\"com.Tutorials.ConfigurationTutorial\", \"ConfigurationTutorial\", \"1.0.0\")]\n        public class ConfigurationTutorial : BaseUnityPlugin\n        {\n            public static ConfigEntry&lt;string&gt; HuntressRainMessage { get; set; }\n\n            public void Awake()\n            {\n                HuntressRainMessage = Config.Bind&lt;string&gt;(\n                    \"Huntress\",\n                    \"ArrowRainMessage\",\n                    \"This is our message!\",\n                    \"The message which is played when ArrowRain.OnEnter is called\"\n\n                )\n\n                On.EntityStates.Huntress.ArrowRain.OnEnter += (orig, self) =&gt;\n                {\n                    Chat.AddMessage(\"This is our message!\");\n                    orig(self);\n                }\n            }\n        }\n    }\n</code></pre> <p>4) Now change in your hook methods where you want your Configuration value to be called.</p> <pre><code>    namespace ConfigurationTutorial\n    {\n        [BepInDependency(\"com.bepis.r2api\")]\n        [BepInPlugin(\"com.Tutorials.ConfigurationTutorial\", \"ConfigurationTutorial\", \"1.0.0\")]\n        public class ConfigurationTutorial : BaseUnityPlugin\n        {\n            public static ConfigEntry&lt;string&gt; HuntressRainMessage { get; set; }\n\n            public void Awake()\n            {\n                HuntressRainMessage = Config.Bind&lt;string&gt;(\n                    \"Huntress\",\n                    \"ArrowRainMessage\",\n                    \"This is our message!\",\n                    \"The message which is played when ArrowRain.OnEnter is called\"\n\n                )\n\n                On.EntityStates.Huntress.ArrowRain.OnEnter += (orig, self) =&gt;\n                {\n                    Chat.AddMessage(HuntressRainMessage.Value);\n                    orig(self);\n                }\n            }\n        }\n    }\n</code></pre> <p>5) We are all done with the code now! Build your mod and add it to the plugins directory in Bepinex folder as per usual. After the first time you run the game you will get a configuration file appear in <code>\\Bepinex\\Configuration</code> which will be named after your mod (in this case <code>com.Tutorials.ConfigurationTutorial.cfg</code>)</p> <p>Open the configuration file in your favourite text editor and you can edit the value.</p> <p>NOTE: any changes you make to this file while the game is running is not guaranteed to make changes in the game. You should usually close the game before making any changes. For on-the-go configuration changes then I recommend looking at tutorial for Console Commands.</p>"},{"location":"Mod-Creation/C%23-Programming/Configuration/#config-folders","title":"Config folders","text":"<p>In case you need to create multiple configuration files, it may be a good idea to create a Folder for storing your config files, you can use System.IO's directory class for creating the directory for your configuration files.</p> <p>Here's an example of a class that has a method that creates 2 config files, and a folder to store them.</p> <pre><code>using BepInEx;\nusing BepInEx.Configuration;\nusing System.IO;\n\npublic static class ConfigManager\n{\n    //Declare config files\n    private static ConfigFile configFileA;\n    private static ConfigFile configFileB;\n\n    //Nameof the folder where we'll store our config files.\n    private const string configFolderName = \"MyConfigFolder\";\n    //A property that gets the absolute path of our config folder\n    //Paths is a static class from BepInEx that contains useful, absolute paths.\n    private static string ConfigFolderPath { get =&gt; Path.Combine(Paths.ConfigPath, configFolderName); }\n\n    private static void Init()\n    {\n    // Ensures that the config folder exists, if not, create it.\n    if (!Directory.Exists(ConfigFolderPath))\n            {\n                Directory.CreateDirectory(ConfigFolderPath);\n            }\n    //Create the config files, notice how we use Path.Combine for creating the new files.            \n            configFileA= new ConfigFile(Path.Combine(ConfigFolderPath, \"ConfigFileA.CFG\"), true);\n            configFileB = new ConfigFile(Path.Combine(ConfigFolderPath, \"ConfigFileB.CFG\"), true);\n    }\n}\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/Console-Commands/","title":"Console Commands","text":""},{"location":"Mod-Creation/C%23-Programming/Console-Commands/#getting-started","title":"Getting started","text":"<p>The console is a hidden in-game window in which you can view game logs and you can type developer commands. In this tutorial we will learn how to write our own commands.</p> <p>The key combination to open the console is different depending on your keyboard layout. Generally the combination is <code>Ctrl + Alt</code> plus the button that is underneath the <code>Esc</code> key. In the case of a US/UK keyboard that is the grave key.</p> <p>Shortcut (please add shortcuts for your region if necessary): * UK/US = Ctrl + Alt + ` * DE = Ctrl + Alt + \u00d6 * ES = Ctrl + Alt + \u00d1 * RU = Ctrl + Alt + \u0401</p> <p>Many mods use console commands. Notably mods like DebugToolkit are almost entirely console commands.</p> <p>To enter a command first you must open the console, then type in the text box at the bottom of the window. The console has intellisense so as you start typing a command the console will make suggestions as to which command you want to type. You can start typing then use the up/down arrow keys to select the command you want from the list.</p> <p>Sometimes commands require arguments. If a command requires arguments you can add them after the command separated by a space.</p> <p>So command follows this general format:</p> <p><code>mycommandname args[0] args[1] args[2] ... args[n]</code></p> <p>e.g. if we have a command called <code>give_item</code> which takes 3 arguments in order args[0]=partial itemname, args[1]=count, args[2]=playerIndex (this is a real example from DebugToolkit, simplified for sake of tutorial)</p> <p><code>give_item behemoth 10 0</code> will give 10 of brilliant behemoth to player at index 0 (this is usually the host).</p>"},{"location":"Mod-Creation/C%23-Programming/Console-Commands/#commandhelper","title":"CommandHelper","text":"<p>Also consider reading R2API's page about this.</p> <p>One thing that will make your life much easier is R2API's CommandHelper and it basically does all the command registering for you.</p>"},{"location":"Mod-Creation/C%23-Programming/Console-Commands/#how-to-use-commandhelper-for-your-commands","title":"How to use Commandhelper for your commands","text":"<p>Logically, it would make more sense to put this at the end of the tutorial after writing the commands but this is just a small bit that we can cover very quickly but it is also important not to miss.</p> <p>Before you start your plugin's class, add: <code>[R2APISubmoduleDependency(nameof(CommandHelper))]</code>. This is right next to your BepInEx attribute. See also Using Submodules</p> <p>In your main mod <code>public void Awake()</code> method you just need to add this little snippet which tells R2API to scan your mod for console commands:</p> <pre><code>public void Awake()\n{\n    ...\n    R2API.Utils.CommandHelper.AddToConsoleWhenReady();\n    ...\n}\n</code></pre> <p>Done. Now we can forget about this and write as many commands as we like.</p>"},{"location":"Mod-Creation/C%23-Programming/Console-Commands/#writing-your-first-command","title":"Writing your first command","text":"<p>To make out command we need to make a private static method with a ConCommand attribute. The method also has to take ConCommandArgs as an argument. See below:</p> <pre><code>[ConCommand(commandName = \"MyCommandName\", flags = None, helpText = \"Help text goes here\")]\nprivate static void MyCommandName(ConCommandArgs args)\n{\n    //Actual code here \n}\n</code></pre> <p>Simple enough so far. Just replace the name of the method, the commandName and the helpText and you are ready to write your code.</p> <p>Every command take <code>ConCommandArgs</code> as an argument. You can simply think of this as an array of strings you will receive from the console command (just like in the example above).</p> <p>Although every command needs to have this <code>ConCommandArgs</code>, not every command needs to use it.</p>"},{"location":"Mod-Creation/C%23-Programming/Console-Commands/#example-1-no-argument-command","title":"Example 1: no argument command","text":"<p>Some commands don't need an argument. Imagine a command which you just want to see a list of all player names, just type <code>listallplayers</code> into the console with no arguments.</p> <pre><code>[ConCommand(commandName = \"listallplayers\", flags = ConVarFlags.ExecuteOnServer, helpText = \"Lists all players in game\")]\nprivate static void ListAllPlayers(ConCommandArgs args)\n{\n    var userNames = NetworkUser.readOnlyInstancesList.Select(u =&gt; u.userName);\n    foreach(var user in userNames)\n    {\n        Debug.Log(user);\n    }\n}\n</code></pre> <p>Notice how this command never uses <code>args</code>. This command will read the list of users, select the username and then write their username to the console window. </p>"},{"location":"Mod-Creation/C%23-Programming/Console-Commands/#example-2-using-arguments","title":"Example 2: using arguments","text":"<p>Now imagine a command in which we need to set a value of something. Lets just say for example we want to set the jump height of survivors to a certain int value.</p> <pre><code>[ConCommand(commandName = \"jump_set\", flags = ConVarFlags.ExecuteOnServer, helpText = \"Set jump height of survivor. args\\[0\\]=(int)value\")]\nprivate static void JumpSet(ConCommandArgs args)\n{\n    int jumpHeight = args.GetArgInt(0);\n    SetSurvivorJumpHeight(jumpHeight);     //Imagine some other method somewhere else in your mod does this.\n}\n</code></pre> <p>In this case, we use an argument that can be accessed from args. If we type <code>jump_set 10</code> for example then <code>args[0] = 10</code>. the ConCommandArgs struct contains methods for parsing this to an int so that we can pass it to a method that will set the value for us.</p> <p>Do note at this point that this is fine when we are typing in expected values but what happens if someone types in the wrong arguments? This is where error catchment is a good practice.</p>"},{"location":"Mod-Creation/C%23-Programming/Console-Commands/#error-catchment","title":"Error catchment","text":"<p>There are reams of information on what to do with error catchment. This is a small dive into that.</p> <p>For more information, a good place to start is here</p> <p>If we look at the above example 2 what happens when someone types in a wrong argument? E.g. <code>jump_set horse</code>. We get an error. This isn't a problem as it will be handled by the game logic but wouldn't it be nicer if we could handle it ourselves and give a meaningful message to the user?</p> <p>There are many ways to go about this and we'll dive into two of them: * The easy and dirty thing to do here is to surround your command code in a <code>try{}catch{}</code> block. If you haven't written your command you can create this block by using a build in VS snippet by typing <code>try</code> then pressing <code>Tab</code> twice. Alternatively, if you have already written your code you can highlight the code you want to surround then press <code>Ctrl + K + S</code> then type <code>try</code> and press <code>Enter</code> when you have try selected. (For more useful shortcuts see here)  <pre><code>[ConCommand(commandName = \"jump_set\", flags = ConVarFlags.ExecuteOnServer, helpText = \"Set jump height of survivor. args\\[0\\]=(int)value\")]\nprivate static void JumpSet(ConCommandArgs args)\n{\n    try\n    {\n        int jumpHeight = args.GetArgInt(0);\n        SetSurvivorJumpHeight(jumpHeight);     //Imagine some other method somewhere else in your mod does this.\n    }\n    catch(Exception ex)\n    {\n        Debug.LogError(ex);\n    }\n}\n/* Now when there is an error instead of throwing an error up it will be caught and it will instead run the code within the catch block.\n In the example above it writes the exception to the console,\n but instead of doing this you could write your own message here.\n Note if you do write your own message you miss out on making custom exceptions,\n but you might not care about this. */\n</code></pre></p> <ul> <li>The more elegant way, is to use a tryParse. Luckily, the args struct already provides these: <pre><code>[ConCommand(commandName = \"jump_set\", flags = ConVarFlags.ExecuteOnServer, helpText = \"Set jump height of survivor. args\\[0\\]=(int)value\")]\nprivate static void JumpSet(ConCommandArgs args)\n{\n    int? jumpHeight = args.TryGetArgInt(0);\n    if (jumpHeight.HasValue)\n    {\n        SetSurvivorJumpHeight(jumpHeight); //Imagine some other method somewhere else in your mod does this.\n    }\n    else\n    {\n        Debug.LogError(\"Couldn't parse the jump height!\");\n    }\n}\n</code></pre></li> </ul> <p>You can check the argument count by using <code>args.Count</code>, or use <code>args.CheckArgumentCount(X)</code> to check if the command was called with at least X arguments.</p>"},{"location":"Mod-Creation/C%23-Programming/Console-Commands/#making-arguments-user-friendly","title":"Making arguments user-friendly","text":"<p>As a general rule: users are sloppy and lazy! Don't take offense at that, it is just a good rule to work with.</p> <ul> <li>String arguments. Try and make these case-insensitive when possible.</li> <li>Bool arguments. Users will use <code>0</code>, <code>false</code>, <code>-1</code> to denote false and <code>1</code>, <code>true</code> to denote true. Consider using the following code snippet to parse your bools, as the default ConCommandArgs struct only provides a parser for <code>true</code> and <code>false</code>.  <pre><code>/// &lt;summary&gt;\n/// Try to parse a bool that's either formatted as \"true\"/\"false\" or a whole number \"0\",\"1\". Values above 0 are considered \"truthy\" and values equal or lower than zero are considered \"false\".\n/// &lt;/summary&gt;\n/// &lt;param name=\"input\"&gt;the string to parse&lt;/param&gt;\n/// &lt;param name=\"result\"&gt;the result if parsing was correct.&lt;/param&gt;\n/// &lt;returns&gt;True if the string was parsed correctly. False otherwise&lt;/returns&gt;\ninternal static bool TryParseBool(string input, out bool result)\n{\n    if (bool.TryParse(input, out result))\n    {\n        return true;\n    }\n\n    if (int.TryParse(input, out int val))\n    {\n        result = val &gt; 0 ? true : false;\n        return true;\n    }\n\n    return false;\n}\n</code></pre></li> <li>Float arguments. Some countries use a <code>,</code> instead of the American <code>.</code> (<code>1,5</code> versus <code>1.5</code>). Try and check if the argument was parsed correctly before inputting it raw into your code.</li> </ul>"},{"location":"Mod-Creation/C%23-Programming/Console-Commands/#naming-convention","title":"Naming convention","text":"<p>There is no agreed-upon naming convention for console command names within the Risk of Rain 2 modding community. The name of your command must be unique and make sense within the context of what the command is doing.</p> <p>A recommendation is to avoid conflicts is to use the initials of your mod, followed by an underscore followed by a descriptive name of the command.</p>"},{"location":"Mod-Creation/C%23-Programming/Debugging-Your-Mods/","title":"Debugging Your Mods","text":"<p>The microsoft documentation says:</p> <p>When you debug your app, it usually means that you are running your application with the debugger attached. When you do this, the debugger provides many ways to see what your code is doing while it runs. You can step through your code and look at the values stored in variables, you can set watches on variables to see when values change, you can examine the execution path of your code, see whether a branch of code is running, and so on. If this is the first time that you've tried to debug code, you might want to read Debugging for absolute beginners before going through this guide.</p>"},{"location":"Mod-Creation/C%23-Programming/Debugging-Your-Mods/#general-setup","title":"General Setup","text":"<ol> <li> <p>Install BepInEx from thunderstore</p> </li> <li> <p>Open the <code>doorstop_config.ini</code> You can set the config like this <pre><code># If true, Mono debugger server will be enabled\ndebug_enabled=true\n\n# When debug_enabled is true, specifies the address to use for the debugger server\ndebug_address=127.0.0.1:55555\n\n# If true and debug_enabled is true, Mono debugger server will suspend the game execution until a debugger is attached\ndebug_suspend=true\n</code></pre> This will make doorstop suspend the game on start, open a debugging server at port 55555, allowing you to attach any debugger of your liking, you can use either VS, dnSpy or Rider.</p> </li> <li> <p>Don't forget to put the .pdb file next to your plugin .dll, that's the file which contains the debug data</p> </li> </ol> <p>Putting breakpoints inside game assemblies while using the Visual Studio Debugger is not possible currently, but works with dnSpy, please refer to the dnSpy section below on how to configure it.</p>"},{"location":"Mod-Creation/C%23-Programming/Debugging-Your-Mods/#visual-studio-2022","title":"Visual Studio 2022","text":"<ul> <li>Install Visual Studio Tools for Unity</li> <li>Install UnityModExtension</li> <li>Configure the Unity Mod Extension if needed by going in Tools -&gt; Options</li> </ul> <ul> <li>Press Debug -&gt; Run Game and Start Debugging</li> </ul> <ul> <li>If you want to attach to a currently running game instance or that the extension is not working, Press Debug -&gt; Attach Unity Debugger -&gt; Input IP -&gt; Type <code>127.0.0.1:55555</code> (Make sure VSTU dropdown option is selected) -&gt; OK</li> </ul>"},{"location":"Mod-Creation/C%23-Programming/Debugging-Your-Mods/#dnspy","title":"dnSpy","text":"<p>Make sure the <code>doorstop_config.ini</code> is setup like above, but with the <code>debug_suspend=false</code>, since having it as <code>true</code> doesn't seem to work with dnSpy</p> <p>You'll need to setup the BepInEx.cfg so that it dumps game assemblies to folder, as there may be BepInEx patchers modifying the game assemblies.</p> <p>In the <code>BepInEx/config/BepInEx.cfg</code>, set to true the following entries: <code>DumpAssemblies</code>, <code>LoadDumpedAssemblies</code> and <code>BreakBeforeLoadAssemblies</code>.</p> <p>In dnSpy, make sure that the RoR2.dll that is in there is the assembly from <code>BepInEx\\DumpedAssemblies\\Risk of Rain 2\\RoR2.dll</code></p> <p>Then, launch the game, attach with dnSpy through <code>Debug -&gt; Start Debugging -&gt; Debug Engine: Unity (connect)</code></p> <p>It should automatically breakpoint somewhere inside a BepInEx assembly, then you'll be able to put any breakpoint in the game assemblies</p>"},{"location":"Mod-Creation/C%23-Programming/Debugging-Your-Mods/#rider","title":"Rider","text":"<p>This optional section guides you through integrating the build-&gt;run-&gt;debug process into a single-click process using the Rider IDE. Visit the end of the section to see results.</p>"},{"location":"Mod-Creation/C%23-Programming/Debugging-Your-Mods/#building-with-rider","title":"Building with Rider","text":"<p>In this step, we are going to tell Rider to automatically copy our plugin build to our desired location after our build completes.</p> <ol> <li> <p>Get absolute path of your desired output location:</p> </li> <li> <p>For r2modman profiles (recommended), it should look something like <code>C:\\Users\\YOUR_USER_NAME\\AppData\\Roaming\\r2modmanPlus-local\\RiskOfRain2\\profiles\\YOUR_PROFILE_NAME\\BepInEx\\plugins\\YOUR_PLUGIN_NAME</code></p> </li> <li> <p>If you are NOT using r2modman, your path should look something like this: <code>C:\\Program Files (x86)\\Steam\\steamapps\\common\\Risk of Rain 2\\BepInEx\\plugins</code></p> </li> <li> <p>Open your <code>PROJECT.csproj</code> and add the following to the file, replacing the <code>OutDir</code> attribute value with the path you retrieved in the previous step.</p> </li> </ol> <pre><code>&lt;Project&gt; &lt;!-- (Make sure you paste within the Project tag like i'm showing here. Don't include this line) --&gt;\n    &lt;PropertyGroup Condition=\" '$(Configuration)' == 'Debug' \"&gt;\n      &lt;OutDir&gt;C:\\Users\\YOUR_USER_NAME\\AppData\\Roaming\\r2modmanPlus-local\\RiskOfRain2\\profiles\\dev\\BepInEx\\plugins\\YOUR_PLUGIN_DIR_NAME&lt;/OutDir&gt;\n    &lt;/PropertyGroup&gt;\n&lt;/Project&gt; &lt;!-- (Make sure you paste within the Project tag like i'm showing here. Don't include this line) --&gt;\n</code></pre> <p>We're all done with building! Feel free to give it a test by building your project and ensuring the build ends up in the right location.</p>"},{"location":"Mod-Creation/C%23-Programming/Debugging-Your-Mods/#running-with-rider","title":"Running with Rider","text":"<p>By the end of this section, you will be able to run Risk of Rain 2 using your r2modman profile (or your non-r2modman alternative) and freshly built plugin by clicking the Run and Debug buttons built-in to Rider. </p> <ol> <li> <p>Open Rider's run configuration editor (see photo):   </p> </li> <li> <p>For this next step, it is critical you have correctly completed the General Setup. Confirm this by launching your r2modman profile through r2modman. You'll know you're in the clear when your mods are loading without any issues.</p> </li> <li> <p>In this next photo, you're going to create a new Run/Debug configuration. Let's start with creating a standalone process for your game (Don't worry about the fields for it yet).</p> </li> </ol> <p></p> <ol> <li> <p>Now that you have a Standalone Player, let's get the fields filled out (Refer to photo below for reference through each step).</p> </li> <li> <p>(Refer to the circle on the left) Select your newly created Standalone Player run configuration. </p> </li> <li> <p>Click on the + symbol below the Before Launch section of the configuration options and select Build Project. You'll know it's correct when you see that green hammer like I have at the middle of the screen.</p> </li> <li> <p>Set Exe path to <code>C:/Program Files (x86)/Steam/steamapps/common/Risk of Rain 2/Risk of Rain 2.exe</code> (or, wherever your Risk of Rain 2.exe file is located). In case you're wondering, this is the same executable that r2modman profiles execute, so it won't be different regardless of using an r2modman profile or not. Once you select this, Working Directory will automatically populate.</p> </li> <li> <p>The last thing you need is Program arguments. It's important to note that incorrect arguments will result in your mods failing to load. Please reach out to the FAQ or Community discord with questions       Here's how to get the info you need: </p> <ol> <li>r2modman profiles: Launch r2modman and select the profile you modified during the General Setup and Building with Rider section, navigate to settings, and search for Set launch parameters (see photo below). Click on the search result and you should see something like this:</li> </ol> <pre><code>Modded:\n--doorstop-enabled true --doorstop-target-assembly \"C:\\Users\\YOUR_USER_NAME\\AppData\\Roaming\\r2modmanPlus-local\\RiskOfRain2\\profiles\\dev\\BepInEx\\core\\BepInEx.Preloader.dll\"\n\nVanilla:\ndoorstop-enabled false\n</code></pre> <ol> <li>Copy the text within the Modded category of your r2modman and paste that into the Program arguments, as shown in the picture below. </li> </ol> </li> <li> <p>You now have Standalone Player properly configured. You'll know it works when clicking Rider's Run or Debug button against your Standalone Player configuration launches Risk of Rain directly using your r2modman profile. At this point, Rider is automatically building your mod, adding it to your custom r2modman profile, and launching for you.</p> </li> </ol>"},{"location":"Mod-Creation/C%23-Programming/Debugging-Your-Mods/#connecting-to-the-debugger","title":"Connecting to the debugger","text":"<p>By the end of this section, the debugger will be fully operational and seamlessly integrated with the previous sections.</p> <ol> <li> <p>Open Rider's configuration editor again. Create each of the following Run/Debug configurations:</p> </li> <li> <p><code>Mono Remote</code></p> </li> <li> <p><code>Compound</code></p> <p></p> </li> <li> <p>Select Mono Remote and configure as follows:</p> </li> <li> <p>Host: <code>127.0.0.1</code></p> </li> <li> <p>Port: <code>55555</code></p> <p></p> </li> <li> <p>Select Compound and add the Mono debugger and Standalone player as shown in the photo below:</p> </li> </ol> <p></p> <ol> <li>Save and exit, select the Compound Run Configuration as the run/debug target as seen below:</li> </ol> <p></p> <ol> <li>Finally, make sure to select the Mono debug process (see arrow pointing to Run debugger below) to make use of the debugger as seen in the figure below, and set some breakpoints!!!</li> </ol> <p></p> <p>Congrats!! You are now a more productive engineer!</p>"},{"location":"Mod-Creation/C%23-Programming/Debugging-Your-Mods/#faq","title":"FAQ","text":"<ul> <li> <p>Why aren't any mods loading after installing doorstop 4 into my r2modman profile directory?</p> </li> <li> <p>This problem occurs with r2modman profiles, related to specific doorstop versions. Create a file in your r2modman's profile directory <code>C:\\Users\\YOUR_USER_NAME\\AppData\\Roaming\\r2modmanPlus-local\\RiskOfRain2\\profiles\\YOUR_PROFILE\\</code> and create a file named <code>.doorstop_version</code>. Open this file with any text editor and paste: <code>4.0.0.0</code></p> </li> <li> <p>This problem occurs when your BepInEx configuration files are misconfigured. Here's what you need:</p> <ol> <li> <p>From your profile directory, open the <code>BepInEx\\config\\BepInEx.cfg</code> file and update the following values if not updated already: </p> <ol> <li> <p><code>[Logging.Console]</code>:  </p> </li> <li> <p><code>Enabled = true</code></p> </li> <li> <p><code>[Preloader.Entrypoint]</code>: </p> </li> <li> <p><code>Assembly = RoR2.dll</code></p> </li> <li> <p><code>Type = FlashWindow</code></p> </li> </ol> </li> <li> <p>Now we're going to disable BepInEx's custom GUI since it isn't working properly with doorstop (we're switching to a normal terminal now). From the profile directory, open the <code>BepInEx\\config\\BepInEx.cfg</code> file and update the following:</p> <ol> <li> <p><code>[Settings]</code></p> </li> <li> <p><code>Enable BepInEx GUI = false</code></p> </li> </ol> </li> <li> <p>Do a <code>Ctrl+F</code> for the term <code>launch parameters</code>. If you used this value anywhere while following the tutorials, it may need updating. </p> </li> </ol> </li> </ul>"},{"location":"Mod-Creation/C%23-Programming/Hooking/","title":"Hooking","text":"<p>In the C# world, hooking methods is easy thanks to libraries like MonoMod or Harmony.</p> <p>For Risk of Rain 2, most of the modders in the community use MonoMod and the <code>MMHOOK_X.dll</code> files (To be more precise <code>MMHOOK_RoR2.dll</code> is the one that get generated by HookGenPatcher and that you will most likely see be used, even though a <code>MMHOOK</code> could be generated for other C# assemblies!)</p> <p>Those <code>MMHOOK</code> files are generated through one of the MonoMod tool called MonoMod.RuntimeDetour.HookGen.</p> <p>Or, if you have R2Modman installed with HookGenPatcher, you can have it generated:</p> <ul> <li> <p>Launch the game using R2Modman (\"Start modded\");</p> </li> <li> <p>Find the file at <code>%appdata%\\\\r2modmanPlus-local\\\\RiskOfRain2\\\\profiles\\\\&lt;YOUR_PROFILE&gt;\\\\BepInEx\\\\plugins\\\\MMHOOK\\\\MMHOOK_RoR2.dll</code>.</p> </li> </ul> <p>(If you use the default profile, simply replace <code>&lt;YOUR_PROFILE&gt;</code> with <code>Default</code>.)</p> <p>Having an assembly reference to one of these <code>MMHOOK</code> files will add the <code>On</code> and <code>IL</code> namespaces into your C# project for you to use.</p> <p>There are two main type of hooks:</p> <ul> <li> <p>On Hooks means hooks which allow for adding code before and after the hooked method runs.</p> </li> <li> <p>IL Hooks means hooks that modify the original method CIL</p> </li> </ul> <p>A hook is defined once and most of the time is:</p> <ul> <li>Enabled inside your <code>BaseUnityPlugin</code> <code>OnEnable</code> method.</li> <li>Disabled inside your <code>BaseUnityPlugin</code> <code>OnDisable</code> method.</li> </ul> <p>On hooks will be executed every time the original method is called by the game.</p> <p>This means that this hook is not bound to a specific instance of an object, but rather to all objects of that type.</p>"},{"location":"Mod-Creation/C%23-Programming/Hooking/#on-hook","title":"On Hook","text":"<p>A very basic On hook goes as follows:</p> <pre><code>// Somewhere in your BaseUnityPlugin class\nprivate void OnEnable()\n{\n    On.RoR2.RoR2Application.Awake += OnRoR2ApplicationAwake;\n}\n\nprivate void OnDisable()\n{\n    On.RoR2.RoR2Application.Awake -= OnRoR2ApplicationAwake;\n}\n\n...\n\nprivate static void OnRoR2ApplicationAwake(On.RoR2.RoR2Application.orig_Awake orig, RoR2Application self)\n{\n    // code that will run before the original method\n\n    orig(self);\n\n    // code that will run after the original method\n}\n</code></pre> <p><code>orig</code> is the original function in the game, if you don't want to outright replace the function, you need to call the <code>orig</code> at the end of your function, or at the start if you want to run after it!</p> <p><code>self</code> allows you to access the instance member variables, if the method you are hooking is a member method !</p> <p>If not, it means its a static method, and that there is no <code>self</code> parameter which represent the instance of the class.</p> <p>If we run our own code before the original, we can perform logic prior to calling the original method, and even modify the parameters of the method before it is executed. Similarly, if we run our code after the original, the original will still perform its intended task, but will also execute our code right after. One problem that many people will find with this method, is that we are unable to modify the logic that exists within the method, without replacing it entirely.</p> <p>Failing to call <code>orig()</code> will result in the original/vanilla method never being executed and other mods also hooking that methow will not be called!</p> <p>For a beginner you basically never want to do this unless you have very good reasons. If what you want instead is modifiying some parts of the original method, you can do so using an IL Hook, a tutorial goes over them here</p>"},{"location":"Mod-Creation/C%23-Programming/Hooking/#a-little-more-advanced","title":"A little more advanced","text":"<p>Parameters can be intercepted prior to being passed to the games vanilla methods, for example, we could intercept the arguments passed to the PickupController, and instead of dropping lunar coins, we can now drop goat hoofs.</p> <pre><code>private static void PickupDropletController_CreatePickupDroplet(On.RoR2.PickupDropletController.orig_CreatePickupDroplet orig, PickupIndex pickupIndex, UnityEngine.Vector3 position, UnityEngine.Vector3 velocity)\n{\n    if (pickupIndex == PickupCatalog.FindPickupIndex(\"LunarCoin.Coin0\"))\n    {\n        pickupIndex = PickupCatalog.FindPickupIndex(ItemIndex.Hoof);\n    }\n\n    orig(pickupIndex, position, velocity);\n}\n</code></pre> <p>Replacing a large method in its entirety in order to modify a single line of logic would not be advised as it will create interoperability issues with other mods, for such scenario's something like an IL Hook is better.</p>"},{"location":"Mod-Creation/C%23-Programming/Hooking/#il-hook","title":"IL Hook","text":"<p>IL Hook are more complicated, since you'll have to deal with the CIL.</p> <p>A full guide can be found here</p>"},{"location":"Mod-Creation/C%23-Programming/Hooking/#hook-chaining","title":"Hook Chaining","text":"<p>Assuming that multiple mods hook a method, load order follows LIFO (Last In First Out) priorities.</p> <p><code>Vanilla -&gt; Mod A -&gt; Mod B -&gt; Mod C</code></p> <p>Becomes</p> <p><code>C() -&gt; B() -&gt; A() -&gt; Vanilla</code></p> <p>If B does not orig(self), but A does, A will never execute, and neither will vanilla.</p>"},{"location":"Mod-Creation/C%23-Programming/Hot-Reloading/","title":"Hot Reloading","text":"<p>https://github.com/xiaoxiao921/UnityHotReload/</p> <p>This stuff is coitus in a can if you can get it working. Takes some setup so it's only worth it for certain cases but in those cases it'll probably save you hours and hours.</p>"},{"location":"Mod-Creation/C%23-Programming/Hot-Reloading/#what-is","title":"What is","text":"<p>This allows you hot reload code while the game is running. You're not reloading your entire mod as it might sound, but you can reload one class, which can be pretty powerful. As the example in that repo shows, this can be used to essentially write hooks at runtime, so a very powerful way to use this is to hook your own code and change it as you please, again, while the game is still running. No need for recompiling or building.</p>"},{"location":"Mod-Creation/C%23-Programming/Hot-Reloading/#how-do","title":"How do","text":"<p>[Under Construction]</p>"},{"location":"Mod-Creation/C%23-Programming/IContentPackProvider/","title":"IContentPackProvider","text":"<p>This guide provides how to Create, Load and Manage content via RoR2's ContentPackProvider system.</p>"},{"location":"Mod-Creation/C%23-Programming/IContentPackProvider/#qa-section","title":"Q&amp;A Section","text":""},{"location":"Mod-Creation/C%23-Programming/IContentPackProvider/#contentpack-qa","title":"ContentPack Q&amp;A","text":"<p>Q: What's a ContentPack? A: A ContentPack is a class in the RoR2.ContentManagment namespace, it basically represents a Package of contents for Risk of Rain 2 to Load and Manage via it's catalog systems.</p> <p>Q: What goes in a ContentPack? A: Most pieces of content that are managed by a catalog are supposed to be added via ContentPacks, Examples of these are: * ItemDef, EquipmentDef, BuffDef, EffectDef, etc * Body Prefabs * Master Prefabs * Projectile Prefabs</p> <p>Q: Are there any precautions i should take? A: The main precaution you need is naming your assets, RoR2 expects each asset in a contentPack to have a unique name. Alongside this, you cannot have any duplicate assets (Having two itemDefs that are identical will crash the game)</p> <p>Q: Ok, how do i load my ContentPack to the game? A: You load content packs by inheriting from IContentPackProvider interface, information on this interface can be seen below.</p>"},{"location":"Mod-Creation/C%23-Programming/IContentPackProvider/#serializablecontentpack-qa","title":"SerializableContentPack Q&amp;A","text":"<p>Q: What's a SerializableContentPack? A: A SerializableContentPack, as the name suggests, its a Serializable version of a ContentPack, it's a ScriptableObject in the RoR2 namespace that allows for the serialization of contentPacks via the Editor. While SerializableContentPack is not updated for the new fields of ContentPack added in SurvivorsOfTheVoid, anyone is free to inherit from SerializableContentPack and create an updated version, Regardless, R2API comes with an updated version called (SOTVSerializableContentPack)</p> <p>Q: Are there any benefits to using this over a normal content pack? A: There are a few benefits, if youre working on a code only aproach, it is best to simply use a normal ContentPack, If your mod is done thru Thunderkit, then you can have your ContentPack pre built by the SerializableContentPack.</p> <p>Q: Any precautions i should take? A: There are 2 Precautions * Just like in ContentPack, all the content assets should both have unique names, and not have duplicates. * You cannot have \"Missing\" assets in the arrays, this causes a crash.</p> <p>Q: How do i load my SerializableContentPack to the game? A: SerializableContentPack has a method called \"CreateContentPack\", whcih as the name suggests, creates a content pack based of the fields you add to the SCP. You can then load the created ContentPack via IContentPackProvider</p>"},{"location":"Mod-Creation/C%23-Programming/IContentPackProvider/#icontentpackprovider-qa","title":"IContentPackProvider Q&amp;A","text":"<p>Q: What's IContentPackProvider A: IContentPackProvider (Simply known as ContentPackProvider), is an interface that RoR2 uses to identify what classes are the classes that load ContentPacks into the game.</p> <p>Q: Are there any benefits to using this over just adding the ContentPack to R2API's ContentManager? A: While it is true that R2API now can handle the loading of any content pack you give, Implementing your own Provider may come in handy if you want to have more control over how your content loads.</p> <p>Q: Any precautions i should take? A: None really, While IContentPackProvider may seem scary due to being asynchronous, it isnt specifically a difficult to comprehend interface.</p> <p>Q: How can i use IContentPackProvider to load my mod's Content? A: check the section called \"Using IContentPackProvider\"</p>"},{"location":"Mod-Creation/C%23-Programming/IContentPackProvider/#using-contentpack-serializablecontentpack-icontentpackprovider","title":"Using ContentPack, SerializableContentPack &amp; IContentPackProvider","text":""},{"location":"Mod-Creation/C%23-Programming/IContentPackProvider/#using-contentpack","title":"Using ContentPack","text":"<p>The ContentPack class is mainly a Code only class, the collection of contents are handled via a NamedAssetCollection. The NamedAssetCollection's main method for adding content is .Add(), it accepts an IEnumerable of the Type of content you want to add. It is reccommended that you have already a prebuilt list of whatever content you wish to add before you start adding Content to the ContentPack.</p> <p>If your mod's setup requires each contentPiece to be added separately (Either because each content piece is a class or for other reasons), it is reccommended that you use SerializableContentPack instead.</p> <p>The main Property you want to set is \"Identifier\". Identifier is an unique identifier for your contentPack, it is reccommended that you set this identifier to your mod's GUID, or mod's Name.</p>"},{"location":"Mod-Creation/C%23-Programming/IContentPackProvider/#using-serializablecontentpack","title":"Using SerializableContentPack","text":"<p>As stated in the Q&amp;A for SCP, this is mainly an editor enviroment scriptable object, but you can also use it in code.</p> <p>The serializable content pack looks something like this in the editor, Each array corresponds to a type of content to add.</p> <p></p> <p>Some things of note: A Body prefab is just a prefab that has a CharacterBody component, projectiles with body components need to be added here alongside the Projectile Prefabs array. Master Prefabs are components with CharacterMasters ProjectilePrefabs are components with PRojectileControllers GameModePrefabs are components with \"Run\" components NetworkedObjectPrefabs are components that have NetworkIdentities, but do not have any of the other components listed above. (example of these are NetworkedBodyAttachments, Interactables, etc)</p> <p>To create the ContentPack from the SerializableContentPack, you can use the \"CreateContentPack\" method.</p>"},{"location":"Mod-Creation/C%23-Programming/IContentPackProvider/#using-icontentpackprovider","title":"Using IContentPackProvider","text":"<p>The interface contains 4 members, these are: * Identifier: This should be a unique identifier for your provider, you can set it to be the same identifier as your content pack, or viceversa. * LoadStaticContentAsync: The first method to be called in the ContentPackProvider system, LoadStaticContentAsync can be used for a variety of things, but their main use is for Creating/Loading content assets, and Loading them to your ContentPack or SerializableContentPack, you can see how RoR2 does this in their RoR2Content class * GenerateContentPackAsync: The Second method to be called in the CotnentPackProvider system, GenerateContentPackAsync is where you Copy the contents of your ContentPack to the Finalized content pack generated by RoR2. Extreme caution must be taken with this method, as it is called multiple times per instance of the interface. * FinalizeAsync: The final method to be called in the ContentPackProvider system, it is called when the Finalized content pack is created. this method gets called moments before the Catalogs get their destined content pieces and begin populating themselves.</p>"},{"location":"Mod-Creation/C%23-Programming/IContentPackProvider/#how-to-handle-the-async","title":"How to handle the Async:","text":""},{"location":"Mod-Creation/C%23-Programming/IContentPackProvider/#simple","title":"Simple:","text":"<p>You can simply add these two lines at the bottom of each method to properly return the values ror2 expects. This report progress makes it so the percentage number in the loading screen increases as the game loads our content. of course, this is the simplest way of doing things.</p> <pre><code>args.ReportProgress(1f);  \nyield break;\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/IContentPackProvider/#complex","title":"Complex:","text":"<p>You can use the async functionality to have the game properly show how much more time it takes before all content is loaded, A great example on how to do this is by looking at how RoR2Content loads content.</p> <pre><code>    public IEnumerator LoadStaticContentAsync(LoadStaticContentAsyncArgs args)\n    {\n        contentPack.identifier = identifier;  \n        ContentLoadHelper contentLoadHelper = new ContentLoadHelper();  \n        contentLoadHelper.assetRepository = Resources.Load&lt;ResourcesDirectory&gt;(\"ResourcesDirectory\");\n        Action[] loadDispatchers = new Action[foo]\n        {\n            delegate\n            {\n                Foo.Bar();\n            }\n            delegate\n            {\n                Foo2.Bar()\n            }\n            //etc etc...\n        }\n        int j = 0;  \n        while (j &lt; loadDispatchers2.Length)  \n        {  \n            loadDispatchers2[j]();  \n            args.ReportProgress(Util.Remap(j + 1, 0f, loadDispatchers2.Length, 0f, 0.05f));  \n            yield return null;  \n            int num = j + 1;  \n            j = num;  \n        }\n    }\n</code></pre> <p>This piece of code showcases how we remap the progress data to match how many actions it takes for us to load the content, RoR2 uses this system only on LoadStaticContentAsync, the other 2 methods they use the simple method.</p>"},{"location":"Mod-Creation/C%23-Programming/IContentPackProvider/#example-icontentpackprovider-class-using-only-contentpack","title":"Example IContentPackProvider class using only ContentPack","text":"<pre><code>    //Inherit interface\n    public class MyModContent : IContentPackProvider\n    {\n        internal ContentPack contentPack = new ContentPack();\n        //Your unique identifier, setting this to your mod's name or mod's GUID is recommended.\n        public string identifier =&gt; MainClass.GUID;\n\n        private static void Init()\n        {\n            ContentManager.collectContentPackProviders += (addContentPackProvider) =&gt; {\n                addContentPackProvider(new MyModContent());\n            };\n        }\n\n        private static void AddContentPack(ContentManager.AddContentPackProviderDelegate addContentPackProvider)\n        {\n            addContentPackProvider(Singleton);\n        }\n\n        public IEnumerator LoadStaticContentAsync(LoadStaticContentAsyncArgs args)\n        {\n            //Write or call methods to load content to your ContentPack\n            args.ReportProgress(1f);\n            yield break;\n        }\n        //This is the simplest way of implementing this method, only add more stuff if you know what you're doing.\n        public IEnumerator GenerateContentPackAsync(GetContentPackAsyncArgs args)\n        {\n            contentPack.identifier = identifier;\n            //This is a static method\n            ContentPack.Copy(contentPack, args.output);\n            args.ReportProgress(1f);\n            yield break;\n        }\n        public IEnumerator FinalizeAsync(FinalizeAsyncArgs args)\n        {\n            args.ReportProgress(1f);\n            yield break;\n        }\n    }\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/IContentPackProvider/#example-icontentpackprovider-class-using-a-serializablecontentpack","title":"Example IContentPackProvider class using a SerializableContentPack","text":"<pre><code>    public class MyModContent : IContentPackProvider\n    {\n        private ContentPack contentPack;\n        internal SerializableContentPack serializableContentPack;\n        public string identifier =&gt; MainClass.GUID;\n\n        private static void Init()\n        {\n            //Load your serializable content pack from your assetbundle, or create it directly, Commented out so you implement it\n            serializableContentPack = //Assets.MainAssetBundle.LoadAsset&lt;SerializableContentPack&gt;(\"ContentPack\");\n            ContentManager.collectContentPackProviders += (addContentPackProvider) =&gt; {\n                addContentPackProvider(new MyModContent());\n            };\n        }\n\n        public IEnumerator LoadStaticContentAsync(LoadStaticContentAsyncArgs args)\n        {\n            //Write or call methods to load the rest of your content to your SerializableContentPack\n            //Once all the content is loaded in the SerializableContentPack,  Create the ContentPack with the method.\n            contentPack = serializableContentPack.CreateContentPack();\n            args.ReportProgress(1f);\n            yield break;\n        }\n        //This is the simplest way of implementing this method, only add more stuff if you know what you're doing.\n        public IEnumerator GenerateContentPackAsync(GetContentPackAsyncArgs args)\n        {\n            contentPack.identifier = identifier;\n            //This is a static method\n            ContentPack.Copy(contentPack, args.output);\n            args.ReportProgress(1f);\n            yield break;\n        }\n        public IEnumerator FinalizeAsync(FinalizeAsyncArgs args)\n        {\n            args.ReportProgress(1f);\n            yield break;\n        }\n    }\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/IContentPackProvider/#protip-load-content-using-reflection-linq-and-assetbundle-methods","title":"ProTip: Load Content using Reflection, LinQ and AssetBundle methods.","text":"<p>If you have all your content in AssetBundles, you can easily load all the content of type T by doing assetBundle.LoadAllAssetsOfTypeT and use reflection.</p> <pre><code>    //Loads all EffectPrefabs from an assetBundle and retunrs an array ready to be added to a ContentPack.\n    public GameObject[] LoadAllEffects(AssetBundle bundle)\n    {\n        return bundle.LoadAllAssetsOfType&lt;GameObject&gt;()\n            .Where(go =&gt; go.GetComponent&lt;EffectDef&gt;());\n    }\n</code></pre> <p>You can also use this to load things like EntityStates to your ContentPack.</p> <pre><code>    //Finds all EntityStates from your assembly and returns an array ready to be added to a ContentPack\n    public SerializableEntityStateType[] GetEntityStateTypes()\n    {\n        return GetType().Assembly.GetTypes()\n                .Where(type =&gt; typeof(EntityStates.EntityState).IsAssignableFrom(type))\n                .Where(type =&gt; !type.IsAbstract())\n                .Select(type =&gt; new SerializableEntityStateType(type))\n                .ToArray();\n    }\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/IL-Hooking/","title":"IL Hooking","text":""},{"location":"Mod-Creation/C%23-Programming/IL-Hooking/#what-is-cil","title":"What is CIL?","text":"<p>In short, CIL is a stack based language that can manipulate arbitrary high level objects within a low level, stack based environment. CIL is a powerful tool which can provide access to restricted/protected areas of code, such as local variables within methods, private fields, private subtypes/objects, or allow the interception of readonly values. IL Hooks will allow you to manipulate method logic in ways that are not possible with On.Event hooks.</p>"},{"location":"Mod-Creation/C%23-Programming/IL-Hooking/#what-is-a-stack","title":"What is a Stack?","text":"<p>A Stack is used at a low/intermediate level to process data. As explained by Wikipedia, only the value at the very top of the stack can be popped from the stack. Given a list of IL instructions, the processor will iterate its way through the operations, emitting values to the stack, and executing operations upon the stack as and when the instruction is executed. At the point of termination(return), the stack must be empty, with no more instructions or values remaining. If this is not the case, the stack is said to be unbalanced and the process will terminate with the error <code>Invalid ILCode</code></p> <pre><code>ldc.i4.1 //pushes the int32(1) onto the stack\nldc.i4.2 //pushes the int32(2) onto the stack\nldc.i4.3 //pushes the int32(3) onto the stack\nadd\nadd\nret //method return\n</code></pre> <p>In the above example, after the first 3 instructions, from bottom to top the stack contains <code>[1,2,3]</code>. When the first add operation is executed, first [3] and then [2] will be popped from the stack, added together to produce [5], which is then pushed onto the stack resulting in <code>[1,5]</code>. Finally, the second add will be executed, where [5] and [1] will be popped from the stack, added together, and the resulting stack will contain only <code>[6]</code>. The method will then return, passing the value 6 to the calling method. The method has finished executing, there are no more operations and the stack is now empty, thus the stack is balanced. If the stack is not balanced, or you perform an incorrect operation on the data at the top of the stack, the <code>ILCode</code> error will be produced.</p> <p>You can find out about specific OpCodes from MSDN. Each opcode will explain how many parameters it pops from the stack, the ordering of the values, and the return type of the operation.</p>"},{"location":"Mod-Creation/C%23-Programming/IL-Hooking/#ilcursor-basic-stack-manipulation","title":"ILCursor &amp; basic stack manipulation","text":"<p>The IL Cursor is an implementation by MonoMod to facilitate traversal of the stack in a user friendly manner. <code>ILCursor</code> is a specific implementation by monomod, so you will not find any MSDN documentation on it.</p> <p>To begin, we will define a problem to solve. Lets say that we desire to modify the health fraction of the crowbar. Firstly, we must understand that damage is handled by <code>HealthComponent.TakeDamage</code>, and all damage interactions are serverside. TakeDamage instantly returns if run by a client.</p> <pre><code>    public void TakeDamage(DamageInfo damageInfo)\n    {\n        if (!NetworkServer.active)\n        {\n            Debug.LogWarning(\"[Server] function 'System.Void RoR2.HealthComponent::TakeDamage(RoR2.DamageInfo)' called on client\");\n            return;\n        }\n</code></pre> <p>Similarly, the relevant section of code from HealthComponent.TakeDamage() is:</p> <pre><code>if (this.combinedHealth &gt;= this.fullCombinedHealth * 0.9f)\n{\n    int itemCount2 = master2.inventory.GetItemCount(ItemIndex.Crowbar);\n    if (itemCount2 &gt; 0)\n    {\n        Util.PlaySound(\"Play_item_proc_crowbar\", base.gameObject);\n        num *= 1.5f + 0.3f * (float)(itemCount2 - 1);\n        EffectManager.instance.SimpleImpactEffect(Resources.Load&lt;GameObject&gt;(\"Prefabs/Effects/ImpactEffects/ImpactCrowbar\"), damageInfo.position, -damageInfo.force, true);\n    }\n}\n</code></pre> <p>Clearly, we want to modify the 0.9f. If we right click the line with DnSpy, and edit IL, we can see the corresponding opcodes for this line:</p> <pre><code>175 01F1    ldarg.0\n176 01F2    call    instance float32 RoR2.HealthComponent::get_combinedHealth()\n177 01F7    ldarg.0\n178 01F8    call    instance float32 RoR2.HealthComponent::get_fullCombinedHealth()\n179 01FD    ldc.r4  0.9\n180 0202    mul\n181 0203    blt.un.s    216 (0266) ldarg.0\n</code></pre> <p>So at operation index 179 we want to replace that value, but how do we get there? Well, we could simply move the cursor to the 179'th instruction, however if another mod, or another update modifies any instruction prior to this, the modification will likely break the game. Therefore, we are going to move the cursor to some specific instructions that we match directly. The <code>ILCursor</code> will assist with this task, and we will require the following references:</p> <pre><code>using Mono.Cecil.Cil;\nusing MonoMod.Cil;\n</code></pre> <p>Inside of Awake() we are going to define our hook location and an <code>ILCursor</code>. We will then use lambda chaining &amp; the monomod match methods to find specific instructions. The ILCursor's location is always placed between one instruction, and the next. Debug.Log(c) will output the two instructions either side of the cursor. The ILCursor location will bind before the first instruction that is matched, in this case the cursor will be ready to execute <code>Ldarg.0</code>. In order to reach our destination, we need to increment the cursor index by 4 to place ourselves before <code>Ldc.R4(0.9f)</code>. A common exception you will see is the <code>KeyNotFoundException</code> which will occur if one or more of your match operations does not hold true. It is likely that the operand specified for the match is incorrect, or in the case of <code>MatchCall</code>, you will likely want to use <code>MatchCallVirt</code>.</p> <pre><code>        IL.RoR2.HealthComponent.TakeDamage += (il) =&gt;\n        {\n            ILCursor c = new ILCursor(il);\n            if (c.TryGotoNext(\n                    x =&gt; x.MatchLdarg(0),\n                    x =&gt; x.MatchCallvirt&lt;HealthComponent&gt;(\"get_combinedHealth\"),\n                    x =&gt; x.MatchLdarg(0),\n                    x =&gt; x.MatchCallvirt&lt;HealthComponent&gt;(\"get_fullCombinedHealth\"),\n                    x =&gt; x.MatchLdcR4(0.9f)\n                ))\n            {\n                c.Index += 4;\n            }\n            else \n            {\n                Log.Error(il.Method.Name + \" IL Hook failed!\");\n            }\n        }\n</code></pre> <p>In this example, lets say we just want to increase this to 80% health instead of 90%. We can simply:</p> <pre><code>c.Next.Operand = 0.8f;\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/IL-Hooking/#delegates","title":"Delegates","text":"<p>Alternatively, perhaps we want a bit more complicated logic, but we don't want to go writing a ton of different opcodes, logic, and branches in order to accomplish the task. In such a scenario we can use a <code>Delegate</code>, which is a method that we can define via a lambda expression. For example instead of the above remove and emit, we could use something like the following:</p> <pre><code>c.Remove();\nc.Emit(OpCodes.Ldloc_1);\nc.EmitDelegate&lt;Func&lt;CharacterBody, float&gt;&gt;((cb) =&gt;\n{\n    if (cb.master.inventory)\n    {\n        int bars = cb.master.inventory.GetItemCount(ItemIndex.Crowbar);\n        if (bars &gt; 0)\n        {\n            return 1f - ((1f - 1f / (_crowbarScalar * (float)bars + 1f)) * _crowbarCap);\n        }\n    }\n    return 0.9f;\n});\n</code></pre> <p><code>Delegates</code> can either return a value, as defined by <code>Func&lt;T&gt;</code>, or they can return void, defined by <code>Action&lt;T&gt;</code>. In the Case of <code>Func&lt;T&gt;</code> the last type defined is the return type, in the above example the return type is a float. The delegate also takes a <code>CharacterBody</code> as a parameter, which is referred too by the arguement <code>cb</code>. </p> <p>EmitDelegate was designed to behave the same as call / callvirt, thus passing all args from stack onto the delegate just like if it was a normal method call thus, if you push A, B, C, your delegate should accept A, B, C in that order. It doesn't pop one by one, it \"pops\" the last N elements from the stack at once. https://discordapp.com/channels/562704639141740588/562704639569428506/604753431894294528</p> <p>At the cursor location there is currently no reference of a <code>CharacterBody</code> ontop of the stack, so if we want to refer to this object we need to put one there. The method body of <code>TakeDamage</code> defines the local Variable <code>characterBody</code> on line 380 of <code>HealthComponent</code>, so a reference to the attackers characterBody already exists within the method. As such, we can simply emit this local variable to the stack using <code>c.Emit(OpCodes.LdLoc1);</code>. We have removed the existing value, pushed the character body onto the stack, ready to be popped by our delegate which then performs its own method logic before returning a value which is then pushed back onto the stack ready to be manipulated by the original code/logic.</p> <p>Output the result IL of a delegate</p> <pre><code>var dmd = new DynamicMethodDefinition(method.Method);\nvar il = dmd.GetILProcessor().Body.Instructions.ToList();\n</code></pre> <p>With thanks to Viseyth for finding the solution to this problem.</p>"},{"location":"Mod-Creation/C%23-Programming/IL-Hooking/#arguments-properties-fields-local-variables-values-private-readonly-subtypes","title":"Arguments, Properties, Fields, Local Variables &amp; Values, Private, readonly, SubTypes","text":"<p>Arguements</p> <p>Methods are called with 0+ arguments, and we can refer to those arguments by the use of <code>c.Emit(OpCodes.Ldarg0);</code>, <code>c.Emit(OpCodes.Ldarg1);</code>, <code>c.Emit(OpCodes.Ldarg2);</code> and so on. Ldarg0 is a reference to the current object/(this). Ldarg1,2,3 would be the parameters passed to the method. For instance <code>(this).TakeDamage(Ldarg1,Ldarg2...)</code></p> <p>If we want to manipulate the object (this) via a delegate, we can simply emit Ldarg0 to the stack, and then call a delegate method which takes a parameter using this.Type.</p> <p>Properties Properties are called like methods. For example if we want to return the this.fullHealth Property of the HealthComponent: </p> <pre><code>c.Emit(Opcodes.Ldarg0) //push this/HealthComponent onto the stack.\nc.Emit(OpCodes.Call, typeof(HealthComponent).GetMethod(\"get_fullHealth\")); //call the get_fullHealth method of (this)\n</code></pre> <p>Fields We can load a field reference onto the stack somewhat similarly by specifying the TypeInfo and calling the GetFieldCached method:</p> <pre><code>c.Emit(OpCodes.Ldarg0);\nc.Emit(OpCodes.Ldfld, typeof(HealthComponent).GetFieldCached(\"health\");\n</code></pre> <p>First (this) is pushed to the stack, and then we load the field \"health\" from the TypeInfo defined by HealthComponent, which consumes (this) from the stack, and pushes the value of this.health field onto the stack. Similarly, if we want to store a value inside a field, we can use the OpCode Stfld, which will consume the value ontop of the stack and store it as the value of the field reference.</p> <p>Local Variables Local Variables are manipulated with ldloc.# to load and stloc.# to store. Local variables are named incrementally with numbers, much like arguments are named. Local variables always refer to the current scope, and as such there is no need to emit ldarg.0 to the stack, as the variables only apply to this object anyway.</p> <pre><code>c.Emit(OpCodes.Ldloc_1);\nc.Emit(OpCodes.Ldloc_2);\nc.Emit(OpCodes.Add);\nc.Emit(OpCodes.Stloc_s, (byte)3);\n</code></pre> <p>The above would load the value of the first local variable onto the stack, then load the value of the second local variable onto the stack, add would then pop both values from the stack, and then push the result onto the stack. Stloc(2) would then pop the result from the stack, and store it in the third local variable.</p> <p>Values</p> <p>We can push values directly onto the stack, ready to be manipulated or store in other fields by emitting primitives such as integers and floats.</p> <pre><code>c.Emit(OpCodes.Ldc_I4, 1); //will push (int32)1 onto the stack.\nc.Emit(OpCodes.Ldc_R4, 2f); //will push (float32)2f onto the stack.\nc.Emit(OpCodes.Stloc_s, (byte)3); //will pop 2f from the stack and store it in the third local variable.\nc.Emit(OpCodes.Stloc_s, (byte)4); //will pop 1 from the stack and store it in the fourth local variable.\n</code></pre> <p>Private fields</p> <p>There are two methods we can use to refer to a private field. First, we can specify BindingFlags as a parameter:</p> <pre><code>c.Emit(OpCodes.Ldarg_0); \nc.Emit(OpCodes.Ldfld, typeof(HealthComponent).GetField(\"increaseHealingCount\", BindingFlags.Instance | BindingFlags.NonPublic));\n</code></pre> <p>Secondly, we can use the GetFieldCached method, which will not only be faster for any future references, but will also increase readability:</p> <pre><code>c.Emit(OpCodes.Ldarg_0); \nc.Emit(OpCodes.Ldfld, typeof(HealthComponent).GetFieldCached(\"increaseHealingCount\"));\n</code></pre> <p>Readonly please put some stuff here kthxbye</p> <p>Subtypes</p> <p>Subtypes can be referenced by using the GetNestedType/Cached method.</p> <pre><code>            c.Emit(OpCodes.Ldarg_0);\n            c.Emit(OpCodes.Ldfld, typeof(HealthComponent).GetNestedType(\"RepeatHealComponent\", BindingFlags.Instance | BindingFlags.NonPublic).GetFieldCached(\"reserve\")); //private field (this)HealthComponent/RepeatHealComponent.reserve\n            c.Emit(OpCodes.Ldfld, typeof(HealthComponent).GetNestedTypeCached(\"RepeatHealComponent\").GetFieldCached(\"reserve\")); //cached reference to private field (this)HealthComponent/RepeatHealComponent.reserve\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/IL-Hooking/#conditionals-branches-iteration-labelsreturn-addresses","title":"Conditionals, Branches, Iteration, &amp; Labels/Return addresses","text":"<p>todo</p>"},{"location":"Mod-Creation/C%23-Programming/IL-Hooking/#returning-the-calling-method-from-the-delegate","title":"Returning the calling method from the delegate","text":"<p>todo</p>"},{"location":"Mod-Creation/C%23-Programming/IL-Hooking/#remove-jump-addresses","title":"Remove() &amp; jump addresses","text":"<p>It is important to note, that removing instructions can result in IndexOutOfBounds exception when an already existing instruction references the address of an instruction which has been removed. In such a scenario its best to use <code>cursor.Next.OpCode</code>/<code>.Operand</code> to replace the instruction with either the desired operation, branch, or NUL.</p> <p>todo</p>"},{"location":"Mod-Creation/C%23-Programming/IL-Hooking/#original","title":"Original:","text":"<p>IL Instructions and what they do - https://en.wikipedia.org/wiki/List_of_CIL_instructions If this is you're first time, I highly suggest reading this impromptu tutorial from 0x0ade  </p> <p>To get started, make sure your project is referencing MonoMod.Utils.dll and Mono.Cecil.dll We can view C# translated to IL with dnSpy. Right click on what you want to edit and press <code>Edit IL Instructions</code></p>"},{"location":"Mod-Creation/C%23-Programming/IL-Hooking/#example-code-for-removing-the-strange-sensitivity-while-sprinting","title":"Example code for removing the strange sensitivity while sprinting","text":"<p>What we want to edit is at line 413 of RoR2.CameraRigController <pre><code>IL.RoR2.CameraRigController.Update += (il) =&gt; \n{\n    var c = new ILCursor(il);\n\n    //We use GotoNext to locate the code we want to edit\n    //Notice we can specify a block of instructions to match, rather than only a single instruction\n    //This is preferable as it is less likely to break something else because of an update\n\n    if (c.TryGotoNext(\n            x =&gt; x.MatchLdloc(4),      // num14 *= 0.5f;\n            x =&gt; x.MatchLdcR4(0.5f),   // \n            x =&gt; x.MatchMul(),         // \n            x =&gt; x.MatchStloc(4),      // \n            x =&gt; x.MatchLdloc(5),      // num15 *= 0.5f;\n            x =&gt; x.MatchLdcR4(0.5f),   //\n            x =&gt; x.MatchMul(),         //\n            x =&gt; x.MatchStloc(5)       //\n        ))\n    {\n        //When we GotoNext, the cursor is before the first instruction we match.\n        //So we remove the next 8 instructions\n        c.RemoveRange(8);\n    }\n    else \n    {\n        Log.Error(il.Method.Name + \" IL Hook failed!\");\n        Log.Error(il.ToString()); // Print out the method IL to help with debugging match fails\n    }\n};\n</code></pre></p>"},{"location":"Mod-Creation/C%23-Programming/IL-Hooking/#example-code-snippet-from-bepis","title":"Example code snippet from Bepis","text":"<pre><code>        public void Awake()\n        {\n            IL.RoR2.CombatDirector.AttemptSpawnOnTarget += il =&gt;\n            {\n                var cursor = new ILCursor(il);\n\n                if (!cursor.TryGotoNext(x =&gt; x.MatchStloc(8))) \n                {\n                    // If our match fails, exit before making any modifications\n                    Log.Error(il.Method.Name + \" IL Hook failed!\");\n                    Log.Error(il.ToString());\n                    return;\n                }\n\n                //at this point, the CharacterMaster component is already on the stack\n                //we need to pass in the current instance onto the stack too, so we call `ldarg 0`, which is `this`\n\n                cursor.Emit(OpCodes.Ldarg_0);\n\n                cursor.EmitDelegate&lt;Func&lt;CharacterMaster, CombatDirector, CharacterMaster&gt;&gt;((component, director) =&gt;\n                {\n                    CharacterMaster characterMaster = component;\n                    StartCoroutine(GiveRandomItems(characterMaster));\n                    Chat.AddMessage(\"Ran EmitDelegate, Component is : \" + component.ToString());\n                    return characterMaster;\n                });\n            };\n\n        }  \n</code></pre> <p>Tips: </p> <ul> <li>Use <code>Debug.Log(il.ToString())</code> to see what your edit has done.  </li> </ul>"},{"location":"Mod-Creation/C%23-Programming/Mod-Compatibility%3A-Soft-Dependency/","title":"Mod Compatibility: Soft Dependency","text":""},{"location":"Mod-Creation/C%23-Programming/Mod-Compatibility%3A-Soft-Dependency/#bepindependency-attribute","title":"<code>BepInDependency</code> Attribute","text":"<p>Add the attribute on top of your BaseUnityPlugin class.</p> <p>Use <code>BepInDependency.DependencyFlags.SoftDependency</code> for the 2nd argument.</p> <p>For example, we will try to access the API of <code>OtherMod</code>.</p> <pre><code>[BepInDependency(\"com.chen.othermod\", BepInDependency.DependencyFlags.SoftDependency)]\npublic class MyPlugin : BaseUnityPlugin\n{\n\n}\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/Mod-Compatibility%3A-Soft-Dependency/#make-a-non-nested-wrapper-class","title":"Make a non nested wrapper class","text":"<p>This is optional but much cleaner just for the sake of project organization.</p> <p>The wrapper class will house all the APIs from the mod that we are soft-dependending on.</p> <pre><code>public static class OtherModCompatibility\n{\n\n}\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/Mod-Compatibility%3A-Soft-Dependency/#methodimpl","title":"MethodImpl","text":"<p>The important thing is that anything that require elements from the soft dependencies are only used behind methods that have these two attributes.</p> <pre><code>[MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]\n</code></pre> <p>This is due to internal details on how the c# runtime works.</p> <p>If these are not here you'll most likely get exceptions thrown at you telling you the soft dependency is not loaded, even though we properly check with the <code>PluginInfos.ContainsKey</code>!</p> <pre><code>public static class OtherModCompatibility\n{\n    private static bool? _enabled;\n\n    public static bool enabled {\n        get {\n            if (_enabled == null) {\n                _enabled = BepInEx.Bootstrap.Chainloader.PluginInfos.ContainsKey(\"com.chen.othermod\");\n            }\n            return (bool)_enabled;\n        }\n    }\n\n    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]\n    public static void SomeMethodThatRequireTheDependencyToBeHere()\n    {\n      // stuff that require the dependency to be loaded\n    }\n}\n</code></pre> <p>Finally, some example usage.</p> <pre><code>[BepInDependency(\"com.chen.othermod\", BepInDependency.DependencyFlags.SoftDependency)]\npublic class MyPlugin : BaseUnityPlugin\n{\n    private void Awake()\n    {\n        if (OtherModCompatibility.enabled)\n        {\n            OtherModCompatibility.SomeMethodThatRequireTheDependencyToBeHere();\n        }\n    }\n}\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/Reflection-Crash-Course/","title":"Reflection Crash Course","text":"<p>This guide goes through how to reference classes, fields, properties and methods via <code>System.Reflection</code>.</p>"},{"location":"Mod-Creation/C%23-Programming/Reflection-Crash-Course/#please-note","title":"PLEASE NOTE","text":"<p>If you just want to access private stuff in assemblies, you most likely want this instead</p>"},{"location":"Mod-Creation/C%23-Programming/Reflection-Crash-Course/#the-basics","title":"The basics","text":"<p>Reflection provides objects (of type Type) that describe assemblies, modules and types. You can use reflection to dynamically create an instance of a type, bind the type to an existing object, or get the type from an existing object and invoke its methods or access its fields and properties.</p> <p>Simply put, reflection allows you to reference object behaviours, properties, and fields when they are otherwise out of scope. Some examples of these might be as the title suggests, but you may also use reflection when the Type of the object is ambiguous in order to attempt to invoke a method of a specific type, if the object conforms to that TypeInfo, MethodInfo, or so on.</p>"},{"location":"Mod-Creation/C%23-Programming/Reflection-Crash-Course/#types","title":"Types","text":"<p>TypeInfo:</p> <p>Represents type declarations for class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</p> <p>TypeInfo can be thought of as a signature for types, their unique identifier that differentiates them from all other types. Given a specific TypeInfo, we can perform comparisons in order to determine, and therefor invoke the correct methods, reference the correct fields and so on for a given object.</p> <pre><code>    var obj = \"asdf\";\n    if(typeof(obj) == typeof(string)) {//true}\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/Reflection-Crash-Course/#static-vs-instance-members","title":"Static vs Instance members","text":"<p>For static members you must specify the type like so</p> <pre><code>    typeof(MyStaticClass).GetXXX&lt;int&gt;(\"myStaticInt\");\n</code></pre> <p>For instance members</p> <pre><code>    myInstance.GetXXX&lt;int&gt;(\"myInt\");\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/Reflection-Crash-Course/#fields-properties-and-invoking-methods","title":"Fields, Properties, and invoking methods.","text":"<p>Given an instance of an object, we can use reflection to reference properties and behaviours of that object, even ones that would normally be out of scope for us. We pass the return type of the field via  and the fieldinfo / name via parameter: <p>Fields</p> <pre><code>    HealthComponent hc = new HealthComponent();\n    var rhc = hc.GetFieldValue&lt;float&gt;(\"regenAccumulator\");\n</code></pre> <p><code>Note: For structs you must use an alternate method: GetStructFieldValue&lt;&gt; / SetStructFieldValue&lt;&gt;</code></p> <p>Properties</p> <p>At their core, Properties are basically just methods. Under the hood, the method names are prepended with get and set respectively, however reflection does provide specific methods that interface with them specifically, however they can also be invoked via methods:</p> <pre><code>    HealthComponent hc = new HealthComponent();\n    var alive = hc.GetPropertyValue&lt;bool&gt;(\"alive\");\n</code></pre> <p>Methods</p> <p>Methods return void, or the return type specified, and are invoked via passing <code>args[]</code> as parameter. Properties take no parameters for get, however they take only one parameter for set, which will match the return type.</p> <pre><code>    HealthComponent hc = new HealthComponent();\n    hc.InvokeMethod&lt;bool&gt;(\"set_godMode\", true);\n</code></pre> <p>or for static types that return void (no type argument required)</p> <pre><code>    typeof(SurvivorCatalog).InvokeMethod(\"Init\");\n</code></pre> <p>Note that both static / instance methods and void / methods that return are supported (see above <code>Static vs Instance members</code> above)</p>"},{"location":"Mod-Creation/C%23-Programming/Reflection-Crash-Course/#private-subtypes-and-their-propertiesmethods","title":"Private subtypes, and their properties/methods","text":"<p>Private subtypes can be referred to through reflection from their parent class/object, and can cascade down to their properties and methods:</p> <pre><code>    HealthComponent hc = new HealthComponent();\n    var rhc = hc.GetType().GetNestedTypeCached(\"RepeatHealComponent\").GetFieldCached(\"reserve\");\n</code></pre> <p>When reflecting upon a type, rather than an object instance, we can use the Cached getter methods provided by R2API.Utils in order to speed up any future references to the same instance.</p>"},{"location":"Mod-Creation/C%23-Programming/Reflection-Crash-Course/#msdn","title":"MSDN","text":"<p>If anything has not been covered, or more info is required, please read over MSDN: https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/viewing-type-information#memberinfo-methodinfo-fieldinfo-and-propertyinfo</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/","title":"Unity and MonoBehaviour","text":""},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#scene-gameobject-and-component","title":"Scene, GameObject, and Component","text":"<p>Every Unity game is running a scene that is composed of GameObject's which have a collection of components attached to them. Components are the main source of game logic. A MonoBehaviour is the main class you want to derive from to create your own GameObject component. Generally when people say \"component\" they are talking about classes derived from MonoBehaviour, and visa versa.</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#constructing-a-monobehaviour","title":"Constructing a MonoBehaviour","text":""},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#constructor","title":"Constructor","text":"<p>Generally, you shouldn't use constructors in classes derived from MonoBehaviour. If you need to initialize something, do it in Awake. https://ilkinulas.github.io/development/unity/2016/05/30/monobehaviour-constructor.html</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#monobehaviour-messages","title":"MonoBehaviour Messages","text":"<p>Every instance of MonoBehaviour has some special functions that are called by the engine at specific events. Here is the game loop.</p> <p>All MonoBehaviour callbacks are described in unity documentation: Check under \"Messages\" header Down below we'll talk about some of them.</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#awake","title":"Awake","text":"<p>Awake is the first thing that is called when a GameObject with this MonoBehaviour attached is created. Awake also runs in your main plugin class, and occurs prior to all catalog init, so it should be used for any hooks or catalog events.</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#start","title":"Start","text":"<p>Start is basically a second awake, for when you need things to happen right after the first initialization. In your main plugin class, this happens after all plugin mods are loaded in the appdomain and their metadata available through the BepInEx Chainloader</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#update","title":"Update","text":"<p>The update is called every frame if the MonoBehaviour is enabled.</p> <p>This is usually the most commonly used function of scripts in Unity games, however, RoR2 does most of its logic in FixedUpdate. Usually, if you want to do something every frame, like making sure visuals line up, you should do this here.</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#fixedupdate","title":"FixedUpdate","text":"<p>FixedUpdate has the frequency of the physics system; it is called every fixed frame-rate time. This means that depending on framerate it can skip frames, or be called multiple times in one frame. The majority of game logic runs in this update, so that it is independent of framerate. FixedUpdate in RoR2 updates 50 times per second, or every 0.02 seconds</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#lateupdate","title":"LateUpdate","text":"<p>Same as Update but gets called after coroutines and animations. Less commonly used</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#ondestroy","title":"OnDestroy","text":"<p>Happens after component or its game object is destroyed. You can destroy any component/game object with <code>Object.Destroy</code> </p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#onenable","title":"OnEnable","text":"<p>Happens every time your MonoBehaviour is enabled, or more likely, the GameObject is attached to is set active. This is different from Awake or Start in that those functions only happen once</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#ondisable","title":"OnDisable","text":"<p>Happens every time your MonoBehaviour is disabled, or more likely, the GameObject is attached to is set inactive.  </p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#monobehaviour-functions","title":"MonoBehaviour functions","text":"<p>These functions are generally called from within MonoBehaviour components and are in some way related to the gameobject</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#invoke","title":"Invoke","text":"<p>Calls a function after a specified amount of time. It is for the best to avoid this method. If you want to invoke something with a delay use coroutine instead.</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#invokerepeating","title":"InvokeRepeating","text":"<p>Calls a function after a specified amount of time and then continues to call that function with a given time interval between calls. Avoid, same as Invoke.</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#startcoroutine","title":"StartCoroutine","text":"<p>Starts an asynchronous process similar to a thread. Use this to repeat a function a specific number of times or Lerp a value without slowdown.</p> <p>interesting article about coroutine vs threading</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#manipulating-components","title":"Manipulating Components","text":"<p>These functions are used to add, reference, and remove components of GameObjects. If your mod is done through code, you will likely have to wrangle with these a lot. </p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#addcomponent","title":"AddComponent","text":"<p>Adds a component to an object. This also returns the component that was just added. This can be used to add extra functionality to a game object by making it run a script that it does not currently run.</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#objectdestroy","title":"Object.Destroy","text":"<p>When a component is passed in, it will remove the component from the GameObject. Of course, if a GameObject is passed in, it will destroy the whole GameObject.</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#getcomponent","title":"GetComponent","text":"<p>Get component returns a script / component that is attached to an object. This will return null if it is trying to access a component that an object does not have, and you will run into a NullReferenceException if you try to do anything with that null component. Can be used to get other scripts on an object and access their variables and functions.</p> <p>A warning, GetComponent can be a bit cpu intensive especially on objects like Characters which have a lot of components. It is best to avoid this at runtime, and most importantly, in functions like Update or FixedUpdate. If you want to use it, especially multiple times, generally call it once at the beginning of your code and store it in a variable.</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#getcomponents","title":"GetComponents","text":"<p>Returns an array of all the components of the desired type attached to a GameObject. This is guaranteed to iterate through all components of the GameObject, and should avoided even more than GetComponent</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#getcomponentinchildren","title":"GetComponentInChildren","text":"<p>As the name implies, it iterates through all children of the GameObject and returns the first component of the desired type. Should be avoided even more than GetComponent</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#findobjectoftype","title":"FindObjectOfType","text":"<p>Do not ever use this The power to find any object in a scene with a desired component sounds appealing, but it will iterate through every single object in the scene, searching through their components. It is a terrible performance killer and if you are caught using this you will be publicly shamed.</p>"},{"location":"Mod-Creation/C%23-Programming/Unity-and-MonoBehaviour/#using-scripts-in-editor","title":"Using Scripts in Editor","text":"<p>While you are free to manipulate them as much as you want through code, MonoBehaviour components were intended to use in editor. Refer to this article on how to do as such</p>"},{"location":"Mod-Creation/C%23-Programming/Game-Code/Common-Components%2C-Events-and-Methods/","title":"Common Components, Events and Methods","text":""},{"location":"Mod-Creation/C%23-Programming/Game-Code/Common-Components%2C-Events-and-Methods/#ror2","title":"RoR2","text":"<p>The RoR2 Namespace contains all game specific objects &amp; references. For the most part, everything you might need to refer too, modify, or call is either here, or within the EntityStates namespace. EntityStates contains all the class definitions for any game object. Survivors, chests, AI/Monsters, and their respective behaviours is all defined within EntityStates.</p> <p>RoR2 on the other hand contains most of the core game functionality, behaviours, components, and their containers.</p>"},{"location":"Mod-Creation/C%23-Programming/Game-Code/Common-Components%2C-Events-and-Methods/#useful-objects-methods","title":"Useful Objects &amp; methods","text":"<ul> <li><code>RoR2.Run.instance</code> - Returns the current Run of a game of RoR2. A Run is a session/playthrough of RoR2. RoR2.Run.runStartGlobal is a popular hook location for the start of a game. RoR2.Run contains many properties and methods, like the difficult coefficient, droplists, RNG, Boss Spawns, and time.</li> <li><code>RoR2.SceneDirector</code> - The SceneDirector manages the logic &amp; behaviour for each stage. The scene director controls AI spawning, Combat groups, Interactable spawns, player spawns, credits/RNG/Object placement.</li> <li><code>RoR2.SpawnCard</code> - SpawnCards are used as metadata to control the different spawn types for both interactables as well as AI. Each Type is associate with a card that has a weight, cost, and category. Categories weights are summed to create a % chance for a specific item in a category to be spawned.</li> <li><code>RoR2.CharacterBody</code> - Every Player/AI has a CharacterBody object. CharacterBody contains properties such as NetworkID's, Steam usernames, prefabs, Buffs, levels, statistics, equipment, and various effects/actions that Characters can perform. Every entity has a CharacterBody.</li> <li><code>RoR2.HealthComponent</code> - HealthComponent contains all the health/shield/overhealth/healthreserve information. Every entity has a HealthComponent associated with them.</li> <li><code>RoR2.NetworkUser</code> - NetworkUser can be used to reference the connected networkusers by means of readOnlyInstancesList. Each NetworkUser has a netID, which uniquely identifies that user. netIDs are regenerated every stage. NetworkUser.Network_id however is again unique, but remains unchanging throughout the run.</li> <li><code>PlayerCharacterMasterController</code>- A reference specifically to Player controllers. PlayerCharacterMasterController.instances[i] can be used to refer to specific players.</li> <li><code>LocalUserManager</code> - a reference specifically to local users. Use LocalUserManager.GetFirstLocalUser() to return the localhost/client.</li> <li><code>GenericInteraction</code> - Class which handles just about every type of interaction of the player in the game (default press 'E' something). Hook into methods here to change the way you interact with objects.</li> <li><code>GenericSkill</code> - Class which handles stats and information about skills. Can be used to edit existing skills or create your own new skills. See wiki page Custom Skill Creation for more information on creating your own custom skills.</li> <li><code>SurvivorDef</code> - Definition of a survivor (playable character). See the wiki page Custom Character Creation for more information on how to add your own survivors.</li> </ul>"},{"location":"Mod-Creation/C%23-Programming/Game-Code/Tips-and-Tricks/","title":"Tips and Tricks","text":""},{"location":"Mod-Creation/C%23-Programming/Game-Code/Tips-and-Tricks/#existing-methods","title":"Existing Methods","text":"<p>RoR2.Util has a lot of existing helping methods such as CheckRoll, ApplySpread, QuaternionSafeLookRotation, and PlaySound. Consider taking a look there before making any existing methods.</p>"},{"location":"Mod-Creation/C%23-Programming/Game-Code/Tips-and-Tricks/#iterate-through-all-living-entities","title":"Iterate through all living entities","text":"<pre><code>foreach (var characterBody in CharacterBody.readOnlyInstancesList)\n{ \n    // characterBody is a living entity (like a monster, or a player / survivor body)\n}\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/Game-Code/Tips-and-Tricks/#playercharactermastercontroller-are-objects-that-hold-information-about-a-player-that-played-during-this-run-still-there-even-when-the-player-get-disconnected","title":"PlayerCharacterMasterController are objects that hold information about a player that played during this run (still there even when the player get disconnected)","text":"<pre><code>var instances = PlayerCharacterMasterController.instances;\nforeach (var playerCharacterMaster in PlayerCharacterMasterController.instances)\n{\n    //You can get the master via playerCharacterMaster.master\n    //and the body via playerCharacterMaster.master.GetBody()\n}\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/Game-Code/Tips-and-Tricks/#get-reference-to-local-players-split-screen-is-a-thing","title":"Get reference to local players (split-screen is a thing)","text":"<pre><code>var localPlayers = LocalUserManager.readOnlyLocalUsersList;\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/Game-Code/Tips-and-Tricks/#godmode-for-players","title":"GodMode for players","text":"<pre><code>On.RoR2.HealthComponent.TakeDamage += (orig, self, damageInfo) =&gt; {\n    var charComponent = self.GetComponent&lt;CharacterBody&gt;();\n    if (charComponent != null &amp;&amp; charComponent.isPlayerControlled)\n    {\n        return;\n    }\n    orig(self, damageInfo);\n};\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/Game-Code/Tips-and-Tricks/#toggle-the-mouse","title":"Toggle the mouse","text":"<pre><code>using R2API.Utils;\n\npublic int ToggleCursor()\n{\n    var pes = MPEventSystemManager.primaryEventSystem;\n    pes.cursorOpenerCount = pes.cursorOpenerCount &gt; 0 ? 0 : 1;\n    return pes.cursorOpenerCount;\n}\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/Game-Code/Tips-and-Tricks/#broadcast-chat-message","title":"Broadcast chat message:","text":"<pre><code>Chat.SendBroadcastChat(new SimpleChatMessage { baseToken = \"&lt;color=#e5eefc&gt;{0}: {1}&lt;/color&gt;\",  paramTokens = new [] { \"SOME_USERNAME_STRING\", \"SOME_TEXT_STRING\" } })\n</code></pre> <p>If you want to send something custom</p> <pre><code>Chat.SendBroadcastChat(new SimpleChatMessage { baseToken = \"&lt;color=#e5eefc&gt;{0}&lt;/color&gt;\",  paramTokens = new [] { \"SOME_TEXT_STRING\" } })\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/Networking/MiniRpcLib/","title":"MiniRpcLib","text":""},{"location":"Mod-Creation/C%23-Programming/Networking/MiniRpcLib/#nowadays-its-highly-recommended-to-use-unetweaver-instead","title":"NOWADAYS ITS HIGHLY RECOMMENDED TO USE UNETWEAVER INSTEAD","text":"<p>MiniRpcLib is a Remote Procedure Call Library implemented by Wildbook, for RoR2. Wildbook has created a Demo/tutorial so please do check this out first.</p>"},{"location":"Mod-Creation/C%23-Programming/Networking/MiniRpcLib/#implementing-update-network-communication-with-minirpclib","title":"Implementing Update() network communication with MiniRPCLib","text":"<p>MiniRPCLib is a fantastic utility and really makes it easy to to manipulate networked clients, however there are some shortcomings and drawbacks. One such issue is invoking client methods every Update(), which is perfectly fine for a client which possesses your mod, however for a vanilla client/client without your mod, invoking a method every update causes sever network desync for them due to unexpected/dropped packets. The solution to this is to implement a \"Ping\"/Check if the client responds before we continue to update them with data. A working example can be found here.</p> <pre><code>private Dictionary&lt;NetworkInstanceId, bool&gt; clientHasMod = new Dictionary&lt;NetworkInstanceId, bool&gt;();\nprivate Dictionary&lt;NetworkInstanceId, bool&gt; clientIsPinged = new Dictionary&lt;NetworkInstanceId, bool&gt;();\npublic IRpcFunc&lt;bool, bool&gt; clientPingCheck { get; set; }\npublic Constructor()\n{\n    clientPingCheck = miniRpc.RegisterFunc&lt;bool, bool&gt;(Target.Client, (user, x) =&gt;\n    {\n        Debug.Log($\"[Client] HOST sent us: {x}, returning true\");\n        return true;\n        //return $\"Hello from the server, received {x}!\";\n    }\n}\npublic void Update()\n{\n    if (NetworkServer.active)\n    {\n        foreach (NetworkUser nu in NetworkUser.readOnlyInstancesList)\n        {\n            if (nu.GetCurrentBody() != null &amp;&amp; nu.GetCurrentBody().healthComponent.alive)\n            {\n                if (clientHasMod.ContainsKey(nu.GetCurrentBody().netId) &amp;&amp; clientHasMod[nu.GetCurrentBody().netId])\n                {\n                    updateClient.Invoke(args, nu); //update client\n                }\n                else //client has not been pinged\n                {\n                    if (!clientIsPinged.ContainsKey(nu.GetCurrentBody().netId))\n                    {\n                        Debug.Log(\"[HOST]Sending PingCheck\");\n                        clientIsPinged.Add(nu.GetCurrentBody().netId, true); //ping client\n                        clientPingCheck.Invoke(false, result =&gt;\n                        {\n                            if(result)\n                            {\n                                clientHasMod.Add(nu.GetCurrentBody().netId, true); //client is modded\n                                Debug.Log($\"[HOST] Received response from {nu.GetCurrentBody().netId}: {result}, player has mod.\");\n                            }\n                            else\n                            {\n                                Debug.Log($\"[HOST] Received response from {nu.GetCurrentBody().netId}: {result}, player is not modded.\");\n                                clientHasMod.Add(nu.GetCurrentBody().netId, false); //client is vanilla\n                            }\n                        }, nu);\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/Networking/R2API.NetworkingAPI/","title":"R2API.NetworkingAPI","text":""},{"location":"Mod-Creation/C%23-Programming/Networking/R2API.NetworkingAPI/#step-1-add-submodule-dependency","title":"Step 1: Add Submodule Dependency","text":"<p>Add a <code>[BepInDependency</code> attribute to your <code>BaseUnityPlugin</code>. <pre><code>// some usings...\nnamespace MyNamespace.Something\n{\n    // some other attributes...\n    [BepInDependency(NetworkingAPI.PluginGUID)]\n    public class MyModPlugin : BaseUnityPlugin\n    {\n        // some code...\n    }\n\n    // some other classes...\n}\n</code></pre></p>"},{"location":"Mod-Creation/C%23-Programming/Networking/R2API.NetworkingAPI/#step-2-implement-inetmessage","title":"Step 2: Implement <code>INetMessage</code>","text":"<p>Somewhere in your mod, you add a <code>using R2API.Networking.Interfaces;</code> in the file where you will implement the <code>INetMessage</code> interface. You make an empty class in the same file and implement the interface. <pre><code>using R2API.Networking.Interfaces;\n// other code\npublic class SyncSomething : INetMessage\n{\n\n}\n</code></pre></p>"},{"location":"Mod-Creation/C%23-Programming/Networking/R2API.NetworkingAPI/#step-3-add-the-required-override-methods-for-the-inetmessage-interface","title":"Step 3: Add the required override methods for the <code>INetMessage</code> interface","text":"<p>If you use Visual Studio, you can just hover over <code>INetMessage</code>, then click show potential fixes. After that, click <code>Implement Interface</code>.</p> <p></p> <p></p> <p>The class should now look like this. <pre><code>public class SyncSomething : INetMessage\n{\n        public void Deserialize(NetworkReader reader)\n        {\n            throw new System.NotImplementedException();\n        }\n\n        public void OnReceived()\n        {\n            throw new System.NotImplementedException();\n        }\n\n        public void Serialize(NetworkWriter writer)\n        {\n            throw new System.NotImplementedException();\n        }\n}\n</code></pre></p>"},{"location":"Mod-Creation/C%23-Programming/Networking/R2API.NetworkingAPI/#step-4-determine-which-needs-to-be-in-sync","title":"Step 4: Determine which needs to be in sync","text":"<p>Now you must know what values must sync. In this example, we will play a sound on a player character for the clients. That means I need the <code>CharacterBody</code> of the player character. You need to send the <code>NetworkInstanceId</code> of the <code>CharacterBody.gameObject</code>. For the sake of demonstration, let's sync a bunch of useless stuff.</p>"},{"location":"Mod-Creation/C%23-Programming/Networking/R2API.NetworkingAPI/#step-5-declare-the-variables-then-code-in-serialize-and-deserialize","title":"Step 5: Declare the variables then code in <code>Serialize</code> and <code>Deserialize</code>","text":"<p>Now we know that we will sync the <code>Vector3 position</code>, the useless <code>int number</code> and the <code>NetworkInstanceId netId</code> of the <code>CharacterBody.gameObject</code>. Declare them in the class that implemented the interface. <pre><code>public class SyncSomething : INetMessage\n{\n        NetworkInstanceId netId;\n        Vector3 position;\n        int number;\n\n        // the methods...\n}\n</code></pre> Then you implement <code>Serialize</code>. <code>Serialize</code> is the method that will write the variables into the network coming from the caller of the machine. It will be used to send to the target clients or server. Order of writing them is important! <pre><code>public class SyncSomething : INetMessage\n{\n        // other code\n        public void Serialize(NetworkWriter writer)\n        {\n            writer.Write(netId);\n            writer.Write(position);\n            writer.Write(number);\n        }\n}\n</code></pre> Then you implement <code>Deserialize</code>. <code>Deserialize</code> is the method that handles how to read the data that was received on clients. The order of reading should be the same as the order of how it was written. <pre><code>public class SyncSomething : INetMessage\n{\n        // variable declarations\n\n        public void Deserialize(NetworkReader reader)\n        {\n            netId = reader.ReadNetworkId();\n            position = reader.ReadVector3();\n            number = reader.ReadInt32();\n        }\n\n        // other code\n}\n</code></pre> The class should now look like this. <pre><code>public class SyncSomething : INetMessage\n{\n        NetworkInstanceId netId;\n        Vector3 position;\n        int number;\n\n        public void Deserialize(NetworkReader reader)\n        {\n            netId = reader.ReadNetworkId();\n            position = reader.ReadVector3();\n            number = reader.ReadInt32();\n        }\n\n        public void OnReceived()\n        {\n            throw new System.NotImplementedException();\n        }\n\n        public void Serialize(NetworkWriter writer)\n        {\n            writer.Write(netId);\n            writer.Write(position);\n            writer.Write(number);\n        }\n}\n</code></pre></p>"},{"location":"Mod-Creation/C%23-Programming/Networking/R2API.NetworkingAPI/#step-6-implement-the-logic-in-onreceived","title":"Step 6: Implement the logic in <code>OnReceived</code>","text":"<p>You put the logic in <code>OnReceived</code>. The receiver will fire this method after deserializing. You can use the declared variables like normal. Here is a sample code. <pre><code>    public class SyncSomething : INetMessage\n    {\n        NetworkInstanceId netId;\n        Vector3 position;\n        int number;\n\n        public void Deserialize(NetworkReader reader)\n        {\n            netId = reader.ReadNetworkId();\n            position = reader.ReadVector3();\n            number = reader.ReadInt32();\n        }\n\n        public void OnReceived()\n        {\n            if (NetworkServer.active)\n            {\n                MyModPlugin.myLogger.LogMessage(\"SyncSomething: Host ran this. Skip.\");\n                return;\n            }\n            Chat.AddMessage($\"Client received SyncSomething. Position received is {position}. Number received is {number}.\");\n            GameObject bodyObject = Util.FindNetworkObject(ownerBodyId);\n            if (!bodyObject)\n            {\n                MyModPlugin.myLogger.LogWarning(\"SyncSomething: bodyObject is null.\");\n                return;\n            }\n            Util.PlaySound(\"somevanillasoundstring\", bodyObject);\n        }\n\n        public void Serialize(NetworkWriter writer)\n        {\n            writer.Write(netId);\n            writer.Write(position);\n            writer.Write(number);\n        }\n    }\n}\n</code></pre></p>"},{"location":"Mod-Creation/C%23-Programming/Networking/R2API.NetworkingAPI/#step-7-code-in-the-constructors-of-the-class","title":"Step 7: Code in the Constructors of the class","text":"<p>The constructors are also required for registering your Network Message and for actually using it. You need to make two: one with no arguments, and one with all the arguments based on the declared variables. <pre><code>public class SyncSomething : INetMessage\n{\n        NetworkInstanceId netId;\n        Vector3 position;\n        int number;\n\n        public SyncSomething()\n        {\n        }\n\n        public SyncSomething(NetworkInstanceId netId, Vector3 position, int num)\n        {\n            this.netId = netId;\n            this.position = position;\n            number = num;\n        }\n\n        // other methods\n}\n</code></pre></p> <p>And with that, you should have a working <code>INetMessage</code> class.</p>"},{"location":"Mod-Creation/C%23-Programming/Networking/R2API.NetworkingAPI/#step-8-register-your-network-message","title":"Step 8: Register your Network Message","text":"<p>You need to register your <code>INetMessage</code> first before actually using it. You can do this in your mod plugin's <code>Awake</code>. <pre><code>// some usings...\nnamespace MyNamespace.Something\n{\n    // some attributes\n    public class MyModPlugin : BaseUnityPlugin\n    {\n        private void Awake()\n        {\n            // some code...\n            NetworkingAPI.RegisterMessageType&lt;SyncSomething&gt;();\n            // more code...\n        }\n        // other methods...\n    }\n\n    // some other classes...\n}\n</code></pre></p>"},{"location":"Mod-Creation/C%23-Programming/Networking/R2API.NetworkingAPI/#step-9-calling-the-class-to-trigger-a-sync","title":"Step 9: Calling the class to trigger a sync","text":"<p>Let's imagine we have a method where only the server fires the code. <pre><code>// Somewhere...\npublic void PlaySoundInServer(CharacterBody body)\n{\n    Util.PlaySound(\"somesoundstring\", body.gameObject);\n\n    NetworkIdentity identity = body.gameObject.GetComponent&lt;NetworkIdentity&gt;();\n    if (!identity)\n    {\n        MyModPlugin.myLogger.LogWarning(\"PlaySoundInServer: The body did not have a NetworkIdentity component!\");\n        return;\n    }\n    new SyncSomething(identity.netId, body.gameObject.transform.position, 9000).Send(NetworkDestination.Clients);\n}\n</code></pre></p>"},{"location":"Mod-Creation/C%23-Programming/Networking/R2API.NetworkingAPI/#step-10-pat-yourself-in-the-back","title":"Step 10: Pat yourself in the back","text":"<p>You managed to sync that random sound... or whatever! Check the console for errors if it fails to sync in-game. Logs will extremely help you.</p>"},{"location":"Mod-Creation/C%23-Programming/Networking/Server-side-and-client-side-mods/","title":"Server side and client side mods","text":"<p>When uploading mods to the Thunderstore, you can tag them both as client-side and/or server-side. This means that the mod needs to be installed on the multiplayer host's computer (server-side) and/or the other players' computers (client-side) in order to work properly.</p> <p>These tags themselves don't do much, they only help with searching/filtering in the Thundertore. On the code level, you can declare your mod's attitude towards multiplayer runs (this is optional). You can do this by decorating your main class (the one derived from <code>BaseUnityPlugin</code>) with the R2API NetworkCompatibility attribute.</p>"},{"location":"Mod-Creation/C%23-Programming/Networking/UNet/","title":"UNet","text":"<p>A detailed tutorial on how to use the UNetWeaver Utility for networking properly your mods.</p>"},{"location":"Mod-Creation/C%23-Programming/Networking/UNet/#unetweaver","title":"UNetWeaver","text":""},{"location":"Mod-Creation/C%23-Programming/Networking/UNet/#what-is-this","title":"What is this?","text":"<p>UNetWeaver is a patcher by the Unity code repository itself that injects code in any <code>NetworkBehaviour</code> components to ensure proper serialization and deserialization. Without it such components would fail to communicate across the server. This allows you to use the usual networking stuff used by Unity users outside the Unity Editor, such as this class.</p> <p>Why use UNetWeaver over alternatives:</p> <ul> <li>No user-side dependencies. This means that users only have to install one file (your dll).</li> <li>Native Unity tags, simply <code>using UnityEngine.Networking;</code> will get you everything you need.</li> </ul>"},{"location":"Mod-Creation/C%23-Programming/Networking/UNet/#networking-crash-course","title":"Networking crash course","text":""},{"location":"Mod-Creation/C%23-Programming/Networking/UNet/#communication","title":"Communication","text":"<p>The server is generally the authoritative figure for spawning objects, as well as sending messages to the clients and syncing variables. As such, when a client finds themselves in a position of having to execute some code that is only suitable from the server, they need to let the server know accordingly. There are mainly two ways of achieving this:</p> <ul> <li>Using the <code>CommandAttribute</code> to invoke a method on the server</li> <li>Triggering a console command on the server (Risk of Rain 2 native mechanism, internally uses the CommandAttribute)</li> </ul> <p>Once the server has received the appropriate signal, they can either execute the code on their machine or pass along a message to any other concerned clients. This can be achieved by using:</p> <ul> <li><code>TargetRpcAttribute</code> to invoke a method on a certain client's machine</li> <li><code>ClientRpcAttribute</code> to invoke a method on all clients</li> </ul> <p>These attribute should be applied on non-static methods. Furthermore:</p> <ul> <li><code>CommandAttribute</code> methods must start with the <code>Cmd</code> prefix</li> <li><code>TargetRpcAttribute</code> methods must start with the <code>Target</code> prefix</li> <li><code>ClientRpcAttribute</code> methods must start with the <code>Rpc</code> prefix</li> </ul>"},{"location":"Mod-Creation/C%23-Programming/Networking/UNet/#serializable-types","title":"Serializable types","text":"<p>Any methods associated with the aforementioned attributes can contain only certain types of arguments which can be serialized across the network.</p> <ul> <li>Basic type (byte, int, float, string, UInt64, etc)</li> <li>Built-in Unity math type (Vector3, Quaternion, etc),</li> <li>Arrays of basic types</li> <li>Structs containing allowable types</li> <li>NetworkIdentity</li> <li>NetworkInstanceId</li> <li>NetworkHash128</li> <li>GameObject with a NetworkIdentity component attached.</li> </ul>"},{"location":"Mod-Creation/C%23-Programming/Networking/UNet/#example","title":"Example","text":"<p>The simplest example of networking is to simply send a message to the console of all users.</p>"},{"location":"Mod-Creation/C%23-Programming/Networking/UNet/#implementation-with-a-console-command","title":"Implementation with a console command","text":"<pre><code>using BepInEx;\nusing R2API;\nusing UnityEngine;\nusing UnityEngine.Networking;\n\n// Necessary so concommands can be registered.\n[assembly: HG.Reflection.SearchableAttribute.OptIn]\n\n[BepInPlugin(\"com.networktest\",\"ifISeethisInTechSupportIwillBerateYou\",\"0.0.1\")]\n// PrefabAPI is needed for the InstantiateClone Method contained within.\n[BepInDependency(PrefabAPI.PluginGUID)]\nclass MyPluginClass : BaseUnityPlugin\n{\n    // Static references so we do not need to do tricky things with passing references.\n    internal static GameObject CentralNetworkObject;\n    private static GameObject _centralNetworkObjectSpawned;\n\n    private void Awake()\n    {\n        // We create an empty gameobject to hold all our networked components. The name of this GameObject is largely irrelevant.\n        var tmpGo = new GameObject(\"tmpGo\");\n        // Add the networkidentity so that Unity knows which Object it's going to be networking all about.\n        tmpGo.AddComponent&lt;NetworkIdentity&gt;();\n        // Thirdly, we use InstantiateClone from the PrefabAPI to make sure we have full control over our GameObject.\n        CentralNetworkObject = tmpGo.InstantiateClone(\"somethingUnique\");\n        // Delete the now useless temporary GameObject\n        GameObject.Destroy(tmpGo);\n        // Finally, we add a specific component that we want networked. In this example, we will only be adding one, but you can add as many components here as you like. Make sure these components inherit from NetworkBehaviour.\n        CentralNetworkObject.AddComponent&lt;MyNetworkComponent&gt;();\n    }\n\n    // ExecuteOnServer as a concommand flag makes sure it's always exectuted on the... you guessed it, server.\n    [ConCommand(commandName = \"debuglog_on_all\", flags = ConVarFlags.ExecuteOnServer, helpText = \"Logs a network message to all connected people.\")]\n    private static void CCNetworkLog(ConCommandArgs args)\n    {\n        // Although here it's not relevant, you can ensure you are the server by checking if the NetworkServer is active.\n        if (NetworkServer.active)\n        {\n            // Before we can Invoke our NetworkMessage, we need to make sure our centralized networkobject is spawned.\n            // For doing that, we Instantiate the CentralNetworkObject, we obviously check\n            // if we don't already have one that is already instantiated and activated in the current scene.\n            // Note : Make sure you Instantiate the gameobject, and not spawn it directly,\n            // it would get deleted otherwise on scene change, even with DontDestroyOnLoad.\n            if (!_centralNetworkObjectSpawned)\n            {\n                _centralNetworkObjectSpawned = Object.Instantiate(CentralNetworkObject);\n                NetworkServer.Spawn(_centralNetworkObjectSpawned);\n            }\n            // This readOnlyInstancesList is great for going over all players in general, \n            // so it might be worth commiting to memory.\n            foreach (NetworkUser user in NetworkUser.readOnlyInstancesList)\n            {\n                // `args.userArgs` is a list of all words in the command arguments.\n                MyNetworkComponent.Invoke(user, string.Join(\" \", args.userArgs));\n            }\n        }\n    }\n}\n\n// Important to note that these NetworkBehaviour classes must not be nested for UNetWeaver to find them.\ninternal class MyNetworkComponent : NetworkBehaviour\n{\n    // We only ever have one instance of the networked behaviour here.\n    private static MyNetworkComponent _instance;\n\n    private void Awake()\n    {\n        _instance = this;\n    }\n    public static void Invoke(NetworkUser user, string msg)\n    {\n        _instance.TargetLog(user.connectionToClient, msg);\n    }\n\n    [TargetRpc]\n    private void TargetLog(NetworkConnection target, string msg)\n    {\n        Debug.Log(msg);\n    }\n}\n</code></pre> <p>When you build this example (and patch it with the Weaver), you'll end up with a BepInEx plugin that adds the <code>debuglog_on_all</code> command to the console. When you call it, everything after the command will get sent to each connected player's console, provided they have this plugin installed to receive the networked component.  Notably, this only works if the Host has this plugin installed, and any client wishing to issue this command or see this command too. Otherwise their console won't know what to do with the string <code>debuglog_on_all</code>, or how to deal with the weird network message that tries to spawn an unknown object.</p> <p>In order to send this command dynamically with code, use <code>Console.instance.SubmitCmd(NetworkUser.readOnlyLocalPlayersList[0], \"debuglog_on_all Test message\", false);</code></p>"},{"location":"Mod-Creation/C%23-Programming/Networking/UNet/#implementation-with-commandattribute","title":"Implementation with CommandAttribute","text":"<pre><code>using BepInEx;\nusing UnityEngine;\nusing UnityEngine.AddressableAssets;\nusing UnityEngine.Networking;\nusing UnityEngine.ResourceManagement.AsyncOperations;\n\n[BepInPlugin(\"com.networktest\",\"ifISeethisInTechSupportIwillBerateYou\",\"0.0.1\")]\nclass MyPluginClass : BaseUnityPlugin\n{\n    private void Awake()\n    {\n        // In order for the CommandAttribute to work, we must execute it from a player game object\n        // e.g. associated with a NetworkConnection, such as PlayerMaster.\n        Addressables.LoadAssetAsync&lt;GameObject&gt;(\"RoR2/Base/Core/PlayerMaster.prefab\").Completed += delegate (AsyncOperationHandle&lt;GameObject&gt; obj)\n        {\n            if (obj.Result)\n            {\n                obj.Result.AddComponent&lt;MyNetworkComponent&gt;();\n            }\n        };\n    }\n\n    private void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.J))\n        {\n            var localUser = LocalUserManager.GetFirstLocalUser();\n            if (localUser != null &amp;&amp; localUser.cachedMaster != null)\n            {\n                localUser.cachedMaster.GetComponent&lt;MyNetworkComponent&gt;().LogMessage(\"Test message\");\n            }\n        }\n    }\n}\n\n// Important to note that these NetworkBehaviour classes must not be nested for UNetWeaver to find them.\ninternal class MyNetworkComponent : NetworkBehaviour\n{\n    public void LogMessage(string msg)\n    {\n        if (NetworkServer.active)\n        {\n            // If we are on the server, job done - just send the message to everyone\n            RpcLogMessage(msg);\n        }\n        else\n        {\n            // Else tell the server to handle the message\n            CmdLogMessage(msg);\n        }\n    }\n\n    [Command]\n    private void CmdLogMessage(string msg)\n    {\n        // The client tells the server to execute this\n        RpcLogMessage(msg);\n    }\n\n    [ClientRpc]\n    private void RpcLogMessage(string msg)\n    {\n        // The server tells everyone to execute this\n        LogMessageInternal(msg);\n    }\n\n    private void LogMessageInternal(string msg)\n    {\n        // This is executed on everyone's machine\n        Debug.Log(msg);\n    }\n}\n</code></pre>"},{"location":"Mod-Creation/C%23-Programming/Networking/UNet/#how-to-patch","title":"How to patch","text":"<p>As a PostBuild-Event</p> <ul> <li>Download the archive that contains the UnetWeaver executable.</li> <li>You can set it up how you want, but for now we'll assume that you extracted it in a folder called <code>NetworkWeaver</code> in your project root and your libraries are there too in a <code>libs</code> folder.</li> <li>In your project's properties, create the following postbuild event</li> <li><code>REM TEXT</code> is a comment. Batch is not the best for comments, but it'll keep it copypastable.</li> <li> <p>The wiki also has the Build Events page for more information on these.</p> <pre><code>REM First we copy the from the output folder to the NetworkWeaver folder.\nREM We store the output from robocopy in a file called robocopy which we'll delete at the end of the file.\nrobocopy \"$(TargetDir) \" \"$(ProjectDir)NetworkWeaver\" \"$(TargetFileName)\" &gt; \"$(TargetDir)Robocopy\"\nrobocopy \"$(TargetDir) \" \"$(ProjectDir)NetworkWeaver\" \"$(TargetName).pdb\" &gt; \"$(TargetDir)Robocopy\"\n\nREM Then we navigate our script to the NetworkWeaver folder to make the follow up line less verbose.\ncd \"$(ProjectDir)\\NetworkWeaver\"\n\nREM Unity.UNetWeaver.exe {path to Coremodule} {Path to Networking} {Path to output folder} {Path to the dll you want patched} {Path to all needed references for the to-be-patched dll}\nUnity.UNetWeaver.exe \"../libs/UnityEngine.CoreModule.dll\" \"../libs/com.unity.multiplayer-hlapi.Runtime.dll\" \"Patched/\"  $(TargetFileName) \"$(ProjectDir)/libs\"\n\nREM We store the prepatched dll disabled as a .prepatch so that you can check it if you want, but first we need to make sure that file doesn't exist already.\nIF EXIST \"$(TargetFileName).prepatch\" (\nDEL /F \"$(TargetFileName).prepatch\"\n)\nIF EXIST \"$(TargetFileName).prepatch\" (\nDEL /F \"$(TargetFile).pdb.prepatch\"\n)\n\nREM Then we rename the prepatched file to bla.dll.prepatch\nren \"$(TargetFileName)\" \"$(TargetFileName).prepatch\"\nren \"$(TargetName).pdb\" \"$(TargetName).pdb.prepatch\"\n\nREM move our script to the Patched Folder\ncd Patched\n\nREM move from the current directory (.) to the projectDirectory and store the output once more to the Robocopy file.\nrobocopy \".\" \"$(ProjectDir) \" \"$(TargetFileName)\" &gt; \"$(TargetDir)Robocopy\"\nrobocopy \".\" \"$(ProjectDir) \" \"$(TargetName).pdb\" &gt; \"$(TargetDir)Robocopy\"\n\nREM Remove the patched file from the Patched folder, because the Weaver won't run if the file already exists.\ndel \"$(TargetFileName)\"\ndel \"$(TargetName).pdb\"\n\nREM Delete the holder for all robocopy output.\ndel \"$(TargetDir)Robocopy\"\n</code></pre> </li> <li> <p>If everything went correctly, your patched plugin.dll will be in your project root whenever you build. (So next to your .csproj file.)</p> </li> </ul> <p>As a Patcher</p> <ul> <li>Download the archive that contains the BepinEx Patcher UNet Weaver.</li> <li>Extract it in your <code>Risk of Rain 2\\BepInEx\\patchers</code> folder.</li> <li>If everything went correctly, your assembly will be patched when loading the game.</li> <li>This automates the need of pointing the weaver towards the right libs, as they will all be loaded by BepInEx already.</li> <li>Note that this is run once on your (the developer's) computer. After this you will have a patched plugin that you can distribute without the patcher.</li> <li>Yes, this is essentially using Risk of Rain 2 as a plugin builder.</li> </ul> <p>If you feel like it, you can see what the Weaver changed in your assembly by opening it with dnSpy and looking at the networking classes you had. New generated methods and fields should be in them.</p>"},{"location":"Mod-Creation/Developer-Reference/Addressables-Assets-Keys/","title":"Addressables Assets Keys","text":"<p>This page is generated using this script</p> <p>Addressables Assets Keys</p>"},{"location":"Mod-Creation/Developer-Reference/Items-and-Equipments-Data/","title":"Items and Equipments Data","text":""},{"location":"Mod-Creation/Developer-Reference/Items-and-Equipments-Data/#items-and-equipments-data","title":"Items and Equipments Data","text":"<p>Last Updated: Seekers of the Storm DLC Release</p> <p>To update this page: - Script that outputs as MarkDown formatting</p>"},{"location":"Mod-Creation/Developer-Reference/Items-and-Equipments-Data/#items","title":"Items","text":"Index Code Name Real Name Tier Tags DLC Count AACannon ITEM_AACANNON_NAME No Tier No Tag No DLC 1 AdaptiveArmor ITEM_ADAPTIVEARMOR_NAME No Tier Utility No DLC 2 AlienHead Alien Head Red Utility No DLC 3 ArmorPlate Repulsion Armor Plate White Utility No DLC 4 ArmorReductionOnHit Shattering Justice Red Damage No DLC 5 ArtifactKey Artifact Key Boss WorldUnique No DLC 6 AttackSpeedAndMoveSpeed Mocha White Damage, Utility Survivors of the Void 7 AttackSpeedOnCrit Predatory Instincts Green Damage No DLC 8 AutoCastEquipment Gesture of the Drowned Lunar Utility, EquipmentRelated No DLC 9 Bandolier Bandolier Green Utility, OnKillEffect No DLC 10 BarrierOnKill Topaz Brooch White Utility, Healing, OnKillEffect No DLC 11 BarrierOnOverHeal Aegis Red Utility, Healing No DLC 12 Bear Tougher Times White Utility, BrotherBlacklist No DLC 13 BearVoid Safer Spaces Void White Utility, BrotherBlacklist Survivors of the Void 14 BeetleGland Queen's Gland Boss Utility, CannotCopy No DLC 15 Behemoth Brilliant Behemoth Red Damage No DLC 16 BleedOnHit Tri-Tip Dagger White Damage No DLC 17 BleedOnHitAndExplode Shatterspleen Boss Damage No DLC 18 BleedOnHitVoid Needletick Void White Damage Survivors of the Void 19 BonusGoldPackOnKill Ghor's Tome Green Utility, OnKillEffect No DLC 20 BoostAllStats Growth Nectar Red Utility, HalcyoniteShrine Seekers of the Storm 21 BoostAttackSpeed ITEM_BOOSTATTACKSPEED_NAME No Tier Damage No DLC 22 BoostDamage ITEM_BOOSTDAMAGE_NAME No Tier Damage No DLC 23 BoostEquipmentRecharge ITEM_BOOSTEQUIPMENTRECHARGE_NAME No Tier EquipmentRelated No DLC 24 BoostHp ITEM_BOOSTHP_NAME No Tier Utility No DLC 25 BossDamageBonus Armor-Piercing Rounds White Damage, AIBlacklist No DLC 26 BounceNearby Sentient Meat Hook Red Damage No DLC 27 BurnNearby ITEM_BURNNEARBY_NAME No Tier Damage No DLC 28 CaptainDefenseMatrix Defensive Microbots Red Utility, WorldUnique, RebirthBlacklist No DLC 29 ChainLightning Ukulele Green Damage No DLC 30 ChainLightningVoid Polylute Void Green Damage Survivors of the Void 31 Clover 57 Leaf Clover Red Utility No DLC 32 CloverVoid Benthic Bloom Void Red Utility, OnStageBeginEffect Survivors of the Void 33 ConvertCritChanceToCritDamage ITEM_CONVERTCRITCHANCETOCRITDAMAGE_NAME No Tier Damage Survivors of the Void 34 CooldownOnCrit Wicked Ring No Tier Utility No DLC 35 CrippleWardOnLevel ITEM_CRIPPLEWARDONLEVEL_NAME No Tier Utility, CannotCopy No DLC 36 CritDamage Laser Scope Red Damage Survivors of the Void 37 CritGlasses Lens-Maker's Glasses White Damage No DLC 38 CritGlassesVoid Lost Seer's Lenses Void White Damage Survivors of the Void 39 CritHeal ITEM_CRITHEAL_NAME No Tier Healing No DLC 40 Crowbar Crowbar White Damage No DLC 41 CutHp ITEM_CUTHP_NAME No Tier No Tag No DLC 42 Dagger Ceremonial Dagger Red Damage, OnKillEffect, AIBlacklist No DLC 43 DeathMark Death Mark Green Damage No DLC 44 DelayedDamage Warped Echo White Utility, HalcyoniteShrine Seekers of the Storm 45 DrizzlePlayerHelper ITEM_DRIZZLEPLAYERHELPER_NAME No Tier No Tag No DLC 46 DroneWeapons Spare Drone Parts Red Damage, CannotCopy, AIBlacklist, BrotherBlacklist Survivors of the Void 47 DroneWeaponsBoost ITEM_DRONEWEAPONSBOOST_NAME No Tier No Tag Survivors of the Void 48 DroneWeaponsDisplay1 ITEM_DRONEWEAPONSDISPLAY1_NAME No Tier No Tag Survivors of the Void 49 DroneWeaponsDisplay2 ITEM_DRONEWEAPONSDISPLAY2_NAME No Tier No Tag Survivors of the Void 50 ElementalRingVoid Singularity Band Void Green Damage, Utility Survivors of the Void 51 EmpowerAlways ITEM_EMPOWERALWAYS_NAME No Tier Utility, BrotherBlacklist Survivors of the Void 52 EnergizedOnEquipmentUse War Horn Green Damage, EquipmentRelated No DLC 53 EquipmentMagazine Fuel Cell Green Utility, EquipmentRelated No DLC 54 EquipmentMagazineVoid Lysate Cell Void Green Utility Survivors of the Void 55 ExecuteLowHealthElite Old Guillotine Green Damage, AIBlacklist No DLC 56 ExplodeOnDeath Will-o'-the-wisp Green Damage, OnKillEffect No DLC 57 ExplodeOnDeathVoid Voidsent Flame Void Green Damage Survivors of the Void 58 ExtraLife Dio's Best Friend Red Utility No DLC 59 ExtraLifeConsumed Dio's Best Friend (Consumed) No Tier Utility No DLC 60 ExtraLifeVoid Pluripotent Larva Void Red Utility Survivors of the Void 61 ExtraLifeVoidConsumed Pluripotent Larva (Consumed) No Tier Utility Survivors of the Void 62 ExtraShrineItem Chance Doll Green CannotDuplicate, Utility, HalcyoniteShrine Seekers of the Storm 63 ExtraStatsOnLevelUp Prayer Beads Green Utility, HalcyoniteShrine Seekers of the Storm 64 FallBoots H3AD-5T v2 Red Utility, Damage, AIBlacklist No DLC 65 Feather Hopoo Feather Green Utility, AIBlacklist No DLC 66 FireRing Kjaro's Band Green Damage No DLC 67 FireballsOnHit Molten Perforator Boss Damage No DLC 68 Firework Bundle of Fireworks White Damage, AIBlacklist, InteractableRelated No DLC 69 FlatHealth Bison Steak White Healing, OnKillEffect No DLC 70 FocusConvergence Focused Convergence Lunar Utility, AIBlacklist, CannotCopy, HoldoutZoneRelated No DLC 71 FragileDamageBonus Delicate Watch White Damage, LowHealth Survivors of the Void 72 FragileDamageBonusConsumed Delicate Watch (Broken) No Tier No Tag Survivors of the Void 73 FreeChest Shipping Request Form Green Utility, OnStageBeginEffect, AIBlacklist Survivors of the Void 74 Ghost ITEM_GHOST_NAME No Tier No Tag No DLC 75 GhostOnKill Happiest Mask Red Utility, Damage, OnKillEffect No DLC 76 GoldOnHit Brittle Crown Lunar Utility No DLC 77 GoldOnHurt Roll of Pennies White Utility, AIBlacklist Survivors of the Void 78 GoldOnStageStart War Bonds Red Utility, HalcyoniteShrine Seekers of the Storm 79 GummyCloneIdentifier ITEM_GUMMYCLONEIDENTIFIER_NAME No Tier No Tag No DLC 80 HalfAttackSpeedHalfCooldowns Light Flux Pauldron Lunar Utility Survivors of the Void 81 HalfSpeedDoubleHealth Stone Flux Pauldron Lunar Utility Survivors of the Void 82 HeadHunter Wake of Vultures Red Utility, Damage, AIBlacklist, OnKillEffect No DLC 83 HealOnCrit Harvester's Scythe Green Healing No DLC 84 HealWhileSafe Cautious Slug White Healing No DLC 85 HealingPotion Power Elixir White Healing, LowHealth, AIBlacklist Survivors of the Void 86 HealingPotionConsumed Empty Bottle No Tier Healing Survivors of the Void 87 HealthDecay ITEM_HEALTHDECAY_NAME No Tier No Tag No DLC 88 Hoof Paul's Goat Hoof White Utility No DLC 89 IceRing Runald's Band Green Damage No DLC 90 Icicle Frost Relic Red Damage, OnKillEffect No DLC 91 IgniteOnKill Gasoline White Damage, OnKillEffect No DLC 92 ImmuneToDebuff Ben's Raincoat Red Utility, Healing Survivors of the Void 93 IncreaseDamageOnMultiKill Chronic Expansion White Damage, OnKillEffect, HalcyoniteShrine Seekers of the Storm 94 IncreaseHealing Rejuvenation Rack Red Healing No DLC 95 IncreasePrimaryDamage Luminous Shot Green Damage, Utility, HalcyoniteShrine Seekers of the Storm 96 Incubator Ancestral Incubator No Tier Utility, OnKillEffect No DLC 97 Infusion Infusion Green Utility, Healing, OnKillEffect No DLC 98 InvadingDoppelganger ITEM_INVADINGDOPPELGANGER_NAME No Tier No Tag No DLC 99 JumpBoost Wax Quail Green Utility, SprintRelated No DLC 100 KillEliteFrenzy Brainstalks Red Utility, AIBlacklist, OnKillEffect No DLC 101 KnockBackHitEnemies Knockback Fin White Utility, HalcyoniteShrine Seekers of the Storm 102 Knurl Titanic Knurl Boss Utility, Healing No DLC 103 LaserTurbine Resonance Disc Red Damage, OnKillEffect No DLC 104 LemurianHarness ITEM_LEMURIANHARNESS_NAME No Tier No Tag No DLC 105 LevelBonus ITEM_LEVELBONUS_NAME No Tier Utility No DLC 106 LightningStrikeOnHit Charged Perforator Boss Damage No DLC 107 LowerHealthHigherDamage Bolstering Lantern White Utility, Damage, HalcyoniteShrine Seekers of the Storm 108 LowerPricedChests Sale Star Green CannotDuplicate, Utility, HalcyoniteShrine Seekers of the Storm 109 LowerPricedChestsConsumed Sale Star (Consumed) No Tier Utility, OnStageBeginEffect Seekers of the Storm 110 LunarBadLuck Purity Lunar Utility No DLC 111 LunarDagger Shaped Glass Lunar Damage No DLC 112 LunarPrimaryReplacement Visions of Heresy Lunar Damage, AIBlacklist, CannotSteal No DLC 113 LunarSecondaryReplacement Hooks of Heresy Lunar Damage, AIBlacklist, CannotSteal No DLC 114 LunarSpecialReplacement Essence of Heresy Lunar Damage, AIBlacklist, CannotSteal No DLC 115 LunarSun Egocentrism Lunar Utility Survivors of the Void 116 LunarTrinket Beads of Fealty Lunar ObliterationRelated No DLC 117 LunarUtilityReplacement Strides of Heresy Lunar Utility, AIBlacklist, CannotSteal No DLC 118 LunarWings Blessings of Terafirmae No Tier Utility Survivors of the Void 119 MageAttunement ITEM_MAGEATTUNEMENT_NAME No Tier No Tag No DLC 120 Medkit Medkit White Healing No DLC 121 MeteorAttackOnHighDamage Runic Lens Red Damage, HalcyoniteShrine Seekers of the Storm 122 MinHealthPercentage No Tier No Tag No DLC 123 MinionLeash ITEM_MINIONLEASH_NAME No Tier No Tag No DLC 124 MinorConstructOnKill Defense Nucleus Boss OnKillEffect Survivors of the Void 125 Missile AtG Missile Mk. 1 Green Damage No DLC 126 MissileVoid Plasma Shrimp Void Green Damage Survivors of the Void 127 MonsoonPlayerHelper ITEM_MONSOONPLAYERHELPER_NAME No Tier No Tag No DLC 128 MonstersOnShrineUse Defiant Gouge Lunar Utility, AIBlacklist No DLC 129 MoreMissile Pocket I.C.B.M. Red Damage Survivors of the Void 130 MoveSpeedOnKill Hunter's Harpoon Green Utility Survivors of the Void 131 Mushroom Bustling Fungus White Healing, AIBlacklist No DLC 132 MushroomVoid Weeping Fungus Void White Healing Survivors of the Void 133 NearbyDamageBonus Focus Crystal White Damage No DLC 134 NegateAttack Antler Shield White Utility, HalcyoniteShrine, AIBlacklist Seekers of the Storm 135 NovaOnHeal N'kuhana's Opinion Red Damage No DLC 136 NovaOnLowHealth Genesis Loop Boss Damage, LowHealth No DLC 137 OnLevelUpFreeUnlock Longstanding Solitude Lunar HalcyoniteShrine, Utility, Damage Seekers of the Storm 138 OutOfCombatArmor Oddly-shaped Opal White Utility Survivors of the Void 139 ParentEgg Planula Boss Damage No DLC 140 Pearl Pearl Boss Utility, WorldUnique No DLC 141 PermanentDebuffOnHit Symbiotic Scorpion Red Damage Survivors of the Void 142 PersonalShield Personal Shield Generator White Utility No DLC 143 Phasing Old War Stealthkit Green Utility, LowHealth No DLC 144 Plant Interstellar Desk Plant Red Healing, OnKillEffect No DLC 145 PlantOnHit ITEM_PLANTONHIT_NAME No Tier Damage No DLC 146 PlasmaCore ITEM_PLASMACORE_NAME No Tier Damage No DLC 147 PrimarySkillShuriken Shuriken Green Damage Survivors of the Void 148 RandomDamageZone Mercurial Rachis Lunar Utility No DLC 149 RandomEquipmentTrigger Bottled Chaos Red Utility, EquipmentRelated Survivors of the Void 150 RandomlyLunar Eulogy Zero Lunar Utility, BrotherBlacklist Survivors of the Void 151 RegeneratingScrap Regenerating Scrap Green Utility, PriorityScrap, CannotDuplicate, OnStageBeginEffect Survivors of the Void 152 RegeneratingScrapConsumed Regenerating Scrap (Consumed) No Tier Utility, OnStageBeginEffect Survivors of the Void 153 RepeatHeal Corpsebloom Lunar Healing No DLC 154 ResetChests Sonorous Whispers Red Utility, CannotDuplicate, HalcyoniteShrine Seekers of the Storm 155 RoboBallBuddy Empathy Cores Boss Utility, CannotCopy No DLC 156 ScrapGreen Item Scrap, Green Green WorldUnique, Scrap No DLC 157 ScrapGreenSuppressed Strange Scrap, Green No Tier WorldUnique, Scrap Survivors of the Void 158 ScrapRed Item Scrap, Red Red WorldUnique, Scrap No DLC 159 ScrapRedSuppressed Strange Scrap, Red No Tier WorldUnique, Scrap Survivors of the Void 160 ScrapWhite Item Scrap, White White WorldUnique, Scrap No DLC 161 ScrapWhiteSuppressed Strange Scrap, White No Tier WorldUnique, Scrap Survivors of the Void 162 ScrapYellow Item Scrap, Yellow Boss WorldUnique, Scrap No DLC 163 SecondarySkillMagazine Backup Magazine White Utility No DLC 164 Seed Leeching Seed Green Healing No DLC 165 ShieldOnly Transcendence Lunar Utility No DLC 166 ShinyPearl Irradiant Pearl Boss Damage, Healing, Utility, WorldUnique No DLC 167 ShockNearby Unstable Tesla Coil Red Damage, AIBlacklist No DLC 168 SiphonOnLowHealth Mired Urn Boss Healing, BrotherBlacklist No DLC 169 SkullCounter Skull Token No Tier No Tag No DLC 170 SlowOnHit Chronobauble Green Utility No DLC 171 SlowOnHitVoid Tentabauble Void Green Utility Survivors of the Void 172 SprintArmor Rose Buckler Green Utility, SprintRelated No DLC 173 SprintBonus Energy Drink White Utility, SprintRelated No DLC 174 SprintOutOfCombat Red Whip Green Utility No DLC 175 SprintWisp Little Disciple Boss Damage, SprintRelated No DLC 176 Squid Squid Polyp Green Damage, AIBlacklist, InteractableRelated No DLC 177 StickyBomb Sticky Bomb White Damage No DLC 178 StrengthenBurn Ignition Tank Green Damage Survivors of the Void 179 StunAndPierce Electric Boomerang Red Damage, HalcyoniteShrine Seekers of the Storm 180 StunChanceOnHit Stun Grenade White Utility, AIBlacklist No DLC 181 Syringe Soldier's Syringe White Damage No DLC 182 TPHealingNova Lepton Daisy Green Healing, AIBlacklist, CannotCopy, HoldoutZoneRelated No DLC 183 Talisman Soulbound Catalyst Red Utility, OnKillEffect, EquipmentRelated No DLC 184 TeamSizeDamageBonus No Tier Damage No DLC 185 TeleportOnLowHealth Unstable Transmitter Green Utility, HalcyoniteShrine, LowHealth Seekers of the Storm 186 TeleportOnLowHealthConsumed No Tier No Tag Seekers of the Storm 187 TeleportWhenOob No Tier No Tag No DLC 188 TempestOnKill ITEM_TEMPESTONKILL_NAME No Tier Utility, OnKillEffect No DLC 189 Thorns Razorwire Green Damage, AIBlacklist No DLC 190 TitanGoldDuringTP Halcyon Seed Boss Utility, WorldUnique, CannotSteal, CannotCopy, HoldoutZoneRelated No DLC 191 TonicAffliction Tonic Affliction No Tier Cleansable No DLC 192 Tooth Monster Tooth White Healing, OnKillEffect No DLC 193 TreasureCache Rusted Key White Utility, AIBlacklist, OnStageBeginEffect No DLC 194 TreasureCacheVoid Encrusted Key Void White Utility, AIBlacklist, OnStageBeginEffect Survivors of the Void 195 TriggerEnemyDebuffs Noxious Thorn Green HalcyoniteShrine, Utility, AIBlacklist Seekers of the Storm 196 UseAmbientLevel No Tier CannotSteal, CannotCopy No DLC 197 UtilitySkillMagazine Hardlight Afterburner Red Utility No DLC 198 VoidMegaCrabItem Newly Hatched Zoea Void Boss Utility, CannotCopy Survivors of the Void 199 VoidmanPassiveItem No Tier No Tag Survivors of the Void 200 WarCryOnCombat ITEM_WARCRYONCOMBAT_NAME No Tier Damage No DLC 201 WarCryOnMultiKill Berzerker's Pauldron Green Damage, OnKillEffect No DLC 202 WardOnLevel Warbanner White Utility, AIBlacklist, CannotCopy No DLC"},{"location":"Mod-Creation/Developer-Reference/Items-and-Equipments-Data/#equipments","title":"Equipments","text":"Index Code Name Real Name Tier DLC 0 BFG Preon Accumulator Normal No DLC 1 Blackhole Primordial Cube Normal No DLC 2 BossHunter Trophy Hunter's Tricorn Normal Survivors of the Void 3 BossHunterConsumed Trophy Hunter's Tricorn (Consumed) Normal Survivors of the Void 4 BurnNearby Helfire Tincture Lunar No DLC 5 Cleanse Blast Shower Normal No DLC 6 CommandMissile Disposable Missile Launcher Normal No DLC 7 CrippleWard Effigy of Grief Lunar No DLC 8 CritOnUse Ocular HUD Normal No DLC 9 DeathProjectile Forgive Me Please Normal No DLC 10 DroneBackup The Back-up Normal No DLC 11 EliteAurelioniteEquipment Aurelionite's Blessing Normal Seekers of the Storm 12 EliteBeadEquipment His Spiteful Boon Normal Seekers of the Storm 13 EliteEarthEquipment His Reassurance Normal Survivors of the Void 14 EliteFireEquipment Ifrit's Distinction Normal No DLC 15 EliteGoldEquipment Coven of Gold Normal No DLC 16 EliteHauntedEquipment Spectral Circlet Normal No DLC 17 EliteIceEquipment Her Biting Embrace Normal No DLC 18 EliteLightningEquipment Silence Between Two Strikes Normal No DLC 19 EliteLunarEquipment Shared Design Lunar No DLC 20 ElitePoisonEquipment N'kuhana's Retort Normal No DLC 21 EliteSecretSpeedEquipment Beyond the Limits Normal Survivors of the Void 22 EliteVoidEquipment EQUIPMENT_AFFIXVOID_NAME Normal Survivors of the Void 23 EliteYellowEquipment Normal No DLC 24 Enigma EQUIPMENT_ENIGMA_NAME Normal No DLC 25 FireBallDash Volcanic Egg Normal No DLC 26 Fruit Foreign Fruit Normal No DLC 27 GainArmor Jade Elephant Normal No DLC 28 Gateway Eccentric Vase Normal No DLC 29 GhostGun Reaper's Remorse Normal No DLC 30 GoldGat The Crowdfunder Normal No DLC 31 GummyClone Goobo Jr. Normal Survivors of the Void 32 HealAndRevive Seed of Life Normal Seekers of the Storm 33 HealAndReviveConsumed Seed of Life (Consumed) Normal Seekers of the Storm 34 IrradiatingLaser Overloading Excavator Normal Survivors of the Void 35 Jetpack Milky Chrysalis Normal No DLC 36 LifestealOnHit Super Massive Leech Normal No DLC 37 Lightning Royal Capacitor Normal No DLC 38 LunarPortalOnUse Elegy of Extinction Lunar Survivors of the Void 39 LunarPotion EQUIPMENT_LUNARPOTION_NAME Normal No DLC 40 Meteor Glowing Meteorite Lunar No DLC 41 Molotov Molotov (6-Pack) Normal Survivors of the Void 42 MultiShopCard Executive Card Normal Survivors of the Void 43 OrbOnUse EQUIPMENT_ORBONUSE_NAME Normal Survivors of the Void 44 OrbitalLaser EQUIPMENT_ORBITALLASER_NAME Normal No DLC 45 PassiveHealing Gnarled Woodsprite Normal No DLC 46 QuestVolatileBattery Fuel Array Normal No DLC 47 Recycle Recycler Normal No DLC 48 Saw Sawmerang Normal No DLC 49 Scanner Radar Scanner Normal No DLC 50 SoulCorruptor EQUIPMENT_SOULCORRUPTOR_NAME Normal No DLC 51 SoulJar Jar of Souls Normal No DLC 52 TeamWarCry Gorag's Opus Normal No DLC 53 Tonic Spinel Tonic Lunar No DLC 54 VendingMachine Remote Caffeinator Normal Survivors of the Void"},{"location":"Mod-Creation/Developer-Reference/Layers-and-collisions/","title":"Layers and collisions","text":""},{"location":"Mod-Creation/Developer-Reference/Prefabs/","title":"Prefabs","text":"<p>From the Unity Documentation :</p> <p>Unity\u2019s Prefab system allows you to create, configure, and store a GameObject complete with all its components, property values, and child GameObjects as a reusable Asset. \\ The Prefab Asset acts as a template from which you can create new Prefab instances in the Scene.</p> <p>RoR2 isn't an exception and uses Prefabs to load most of its game objects, from bodies of all entities (classes, monsters...) to projectiles, skills, and so on.</p>"},{"location":"Mod-Creation/Developer-Reference/Prefabs/#prefab-text-dump","title":"Prefab text dump","text":"<p>prefabs1.3.8.zip</p> <p>ITS ACTUALLY A 7z FILE !!! Change extension from .zip to .7z and use 7zip or winrar for opening.</p> <p>Original dumper code</p> <p>Extended dumper code with state configuration + expanded collection values</p> <p>Further extended dumper code including inherited fields/properties and some serialised classes/structs, such as DCCS categories</p>"},{"location":"Mod-Creation/Developer-Reference/Prefabs/#using-a-runtime-inspector","title":"Using a runtime inspector","text":"<p>Both the RuntimeInspector and UnityExplorer mods allow you to view and manipulate any loaded game objects in-game.</p> <p>For a short-lived object, such as a projectile, freezing time is required to inspect it thoroughly. This can be achieved by either UnityExplorer's \"Time\" input field from the top bar, or by using DebugToolkit and its command <code>time_scale</code>, e.g., <code>time_scale 0</code>.</p> <p>Keep in mind that with UnityExplorer you need to have its overlay disabled before entering the lobby or it will break the UI.</p>"},{"location":"Mod-Creation/Developer-Reference/Prefabs/#using-thunderkit","title":"Using Thunderkit","text":"<p>A more natural approach of reading the values of prefabs is by using Thunderkit's Addressable Browser.</p>"},{"location":"Mod-Creation/Developer-Reference/Scene-Names/","title":"Scene Names","text":"<p>All scene names and their respective in-game English titles (from <code>SceneCatalog</code>). Grouped by stage type, in no particular order.</p>"},{"location":"Mod-Creation/Developer-Reference/Scene-Names/#main-stages-stage","title":"Main Stages (<code>Stage</code>)","text":"<p>For stage variants, the base name is suffixed with a number. (ex. <code>blackbeach2</code>)</p> Index Base Name English Title Subtitle DLC Description 3 ancientloft Aphelian Sanctuary Cleansing Center SOTV 4 arena Void Fields Cosmic Prison Used for the Void Fields event 10 blackbeach Distant Roost Ground Zero 11 blackbeach2 Distant Roost Ground Zero 'blackbeach' variant 13 dampcavesimple Abyssal Depths Tectonic Relics 15 foggyswamp Wetland Aspect Rehabilitation Zone 16 frozenwall Rallypoint Delta 'Contact Light' Survivor Camp 18 golemplains Titanic Plains Ground Zero 19 golemplains2 Titanic Plains Ground Zero 'golemplains' variant 20 goolake Abandoned Aqueduct Origin of Tar 21 habitat Treeborn Colony Path of the Protector SOTS Path of the Colossus Stage 3 22 habitatfall Golden Dieback March of the Fallen SOTS 'habitat' post-loop variant 23 helminthroost Helminth Hatchery A Brother's Respite SOTS 26 itancientloft The Simulacrum Threat Simulation SOTV Simulacrum stage 27 itdampcave The Simulacrum Threat Simulation SOTV Simulacrum stage 28 itfrozenwall The Simulacrum Threat Simulation SOTV Simulacrum stage 29 itgolemplains The Simulacrum Threat Simulation SOTV Simulacrum stage 30 itgoolake The Simulacrum Threat Simulation SOTV Simulacrum stage 31 itmoon The Simulacrum Threat Simulation SOTV Simulacrum stage 32 itskymeadow The Simulacrum Threat Simulation SOTV Simulacrum stage 33 lakes Verdant Falls Ground Zero 34 lakesnight Viscous Falls Seeker's Setback SOTS 'lakes' post-loop variant 35 lemuriantemple Reformed Altar Shadow of the Savior SOTS Path of the Colossus Stage 2 40 meridian Prime Meridian Relic of the False Son SOTS SOTS Final Boss 42 moon2 Commencement Moon of Petrichor V 45 rootjungle Sundered Grove Dormant Locus 47 shipgraveyard Siren's Call Ship Graveyard 48 skymeadow Sky Meadow Sprite Fields 49 snowyforest Siphoned Forest Ground Zero SOTV 51 sulfurpools Sulfur Pools Pungent Spring SOTV 52 village Shattered Abodes Ground Zero SOTS 53 villagenight Disturbed Impact Meter of the Restless SOTS 'village' post-loop variant 57 voidraid The Planetarium Cell V SOTV SOTV Final Boss 58 voidstage Void Locus Cell IIIVIIIIIILVIIIVLVILIVLLLVVVILIVLI SOTV 59 wispgraveyard Scorched Acres Wisp Installation"},{"location":"Mod-Creation/Developer-Reference/Scene-Names/#hidden-realms-intermission","title":"Hidden Realms (<code>Intermission</code>)","text":"<p>None of the scenes have subtitles.</p> Index Base Name English Title DLC Description 5 artifactworld Hidden Realm: Bulwark's Ambry 6 artifactworld01 Hidden Realm: Bulwark's Ambry SOTS ancientloft themed variant for 'artifactworld' 7 artifactworld02 Hidden Realm: Bulwark's Ambry SOTS goolake themed variant for 'artifactworld' 8 artifactworld03 Hidden Realm: Bulwark's Ambry SOTS wispgraveyard themed variant for 'artifactworld' 9 bazaar Hidden Realm: Bazaar Between Time 17 goldshores Hidden Realm: Gilded Coast 36 limbo Hidden Realm: A Moment, Whole 43 mysteryspace Hidden Realm: A Moment, Fractured 52 testscene Unused."},{"location":"Mod-Creation/Developer-Reference/Scene-Names/#menu-stages-menu","title":"Menu Stages (<code>Menu</code>)","text":"<p>None of these scenes have titles, as they are unplayable.</p> index Base Name DLC Description 0 PromoRailgunner ? Preview at the bottom of Dev Thoughts#24Direct LinkUnused. 1 PromoVoidSurvivor ? Camera setup for Dev Thoughts#25Direct LinkUnused. 12 crystalworld Prismatic Trials 14 eclipseworld Eclipse 24 infinitetowerworld SOTV Simulacrum 25 intro Intro Cutscene 37 loadingbasic Loading Bar 38 lobby Character Selection 39 logbook Logbook 50 splash HopooGames Splash Art 53 title Main Menu"},{"location":"Mod-Creation/Developer-Reference/Scene-Names/#cutscene","title":"Cutscene","text":"<p>These are of the type \"Cutscene\". Despite the 'intro' scene being a cutscene, it is has the \"menu\" type</p> Index Base Name Used Description 44 outro Yes Outro cutscene for main ending. 46 satellitescene No Used for Satellite ARG (?) 56 voidoutro No Unused outro cutscene for DLC endingYouTube Preview"},{"location":"Mod-Creation/Developer-Reference/Scene-Names/#invalid","title":"Invalid","text":"<p>These are of the type \"Invalid\". They are unused in-game.</p> index Base Name Used Description 3 ai_test No Testing for pathfinding 41 moon No Previous version used for the final stage"},{"location":"Mod-Creation/Developer-Reference/Scene-Names/#removed","title":"Removed","text":"<p>These scenes are removed and do not exist anymore as of 3/7/2022. They were not used in-game.</p> Index Base Name DLC Remove Date Description ? dampcave SOTV Untextured map, likely more complex version of 'dampcavesimple' ? golemplains_trailer SOTV Modified 'golemplains'Used for the Early Access Launch Trailer ? blackbeachtest SOTV Buggy version of 'blackbeach' with pre-placed Wisps, Magma Worms, and a TC-280 Drone.img1 img2"},{"location":"Mod-Creation/Developer-Reference/Sound-%E2%80%90-Wwise-Events/","title":"Sound - Wwise Events","text":"<p>Event Viewer</p> <p>Event Viewer Repo</p>"},{"location":"Mod-Creation/Developer-Reference/Style-Reference-Sheet/","title":"Style Reference Sheet","text":"<p>This page just serves as a quick reference sheet for people who are using custom items/artifacts/whatever &amp; would like to see what the preset Style tags are and what they look like.</p> <p>At present (28/09/2020) the style list sheet is this:</p> <ul> <li> <p>Damage = cIsDamage</p> </li> <li> <p>Healing = cIsHealing</p> </li> <li> <p>Utility = cIsUtility</p> </li> <li> <p>Health = cIsHealth</p> </li> <li> <p>Stack = cStack</p> </li> <li> <p>Mono = cMono</p> </li> <li> <p>Death = cDeath</p> </li> <li> <p>User Settings = cUserSetting</p> </li> <li> <p>Artifact = cArtifact</p> </li> <li> <p>Sub = cSub</p> </li> <li> <p>Event = cEvent</p> </li> <li> <p>World Event = cWorldEvent</p> </li> <li> <p>Keyword Name = cKeywordName</p> </li> <li> <p>Shrine = cShrine</p> </li> </ul> <p>And they looks like this:</p> <p></p> <p>There are also a set of sprites that can be used inline with text. They are:</p> <ul> <li> <p>LunarCoin</p> </li> <li> <p>CloudLeft</p> </li> <li> <p>CloudRight</p> </li> <li> <p>Skull</p> </li> <li> <p>TP</p> </li> <li> <p>WIP</p> </li> <li> <p>VoidCoin</p> </li> </ul> <p>This link showcases the Rich Text from TextMesh Pro, it shows every other form of customization available to the Developer and you are not limited to the preset Styles Hopoo created.</p> <p>You can also see live previews in your browser here: https://xuerian.github.io/RoR2LanguageEditor/</p>"},{"location":"Mod-Creation/Getting-Started/First-Mod/","title":"First Mod","text":""},{"location":"Mod-Creation/Getting-Started/First-Mod/#what-you-need","title":"What you need","text":"<ul> <li>Risk of Rain 2</li> <li>Visual Studio 2022 Community</li> <li>Make sure that when installing Visual Studio that the .NET desktop development workload is ticked. In the case you already have VS installed you can get back to the window below by opening the Visual Studio Installer and clicking on the Modify button.</li> </ul>"},{"location":"Mod-Creation/Getting-Started/First-Mod/#install-bepinex-hookgenpatcher-and-r2api","title":"Install BepInEx, HookGenPatcher and R2API","text":"<p>It is recommended that you install these prerequisites using a mod manager (r2modman/thunderstore mod manager), and in a profile separate from the modded profile you play the game with. </p>"},{"location":"Mod-Creation/Getting-Started/First-Mod/#bepinex","title":"BepInEx","text":"<p>BepInEx is a tool that allow us to load the mods into the game.</p> <ul> <li> <p>r2modman</p> </li> <li> <p>Download the BepInExPack and click \"install with mod manager\"</p> </li> <li> <p>Manual Install</p> </li> <li> <p>Follow the instructions here.</p> </li> </ul>"},{"location":"Mod-Creation/Getting-Started/First-Mod/#hookgenpatcher","title":"HookGenPatcher","text":"<p>You also need HookGenPatcher, it allow us to generate a dll assembly (Name is usually prefixed with <code>MMHOOK_</code>) for hooking the game methods.</p> <ul> <li> <p>r2modman:</p> </li> <li> <p>Download the HookGenPatcher and click \"install with mod manager\"</p> </li> <li> <p>Manual Install</p> </li> <li> <p>Download and follow the instructions here.</p> </li> </ul>"},{"location":"Mod-Creation/Getting-Started/First-Mod/#r2api","title":"R2API","text":"<p>The boilerplate mod uses some R2API modules as dependencies, it provides helper methods to quickly integrate custom additions into the game.</p> <ul> <li> <p>r2modman:</p> </li> <li> <p>Download the R2API Items and click \"install with mod manager\"</p> </li> <li> <p>Download the R2API Language and click \"install with mod manager\"</p> </li> <li> <p>Manual Install</p> </li> <li> <p>Download R2API Core. (R2API Core is a dependency of R2API Items and R2API Language)</p> </li> <li> <p>Download R2API ContentManagement. (R2API ContentManagement is a dependency of R2API Items)</p> </li> <li> <p>Download R2API Items.</p> </li> <li> <p>Download R2API Language.</p> </li> </ul> <p>Manual Install Only: For installing them just drop the dll files into <code>BepInEx/plugins</code>.</p>"},{"location":"Mod-Creation/Getting-Started/First-Mod/#getting-the-boilerplate","title":"Getting the boilerplate","text":"<p>Download the boilerplate from here.</p> <p>Extract it.</p>"},{"location":"Mod-Creation/Getting-Started/First-Mod/#building-the-boilerplate","title":"Building the Boilerplate","text":"<p>Open the <code>.sln</code> solution file with Visual Studio.</p> <p>Make sure the <code>Debug</code> Configuration is selected, there is two configuration available, <code>Debug</code> and <code>Release</code>, <code>Debug</code> will allow us to have .cs lines showing up in stack traces in the console log, which is incredibly helpful for figuring out programming mistakes.</p> <p>Now build the solution:</p> <p></p>"},{"location":"Mod-Creation/Getting-Started/First-Mod/#put-the-mod-in-the-game","title":"Put the mod in the game","text":"<p>Find the <code>ExamplePlugin\\bin\\Debug\\netstandard2.0\\ExamplePlugin.dll</code> and <code>ExamplePlugin\\bin\\Debug\\netstandard2.0\\ExamplePlugin.pdb</code> on your own machine.</p> <ul> <li> <p>r2modman:</p> </li> <li> <p>Copy the <code>ExamplePlugin.dll</code> and <code>ExamplePlugin.pdb</code> to your <code>BepInEx/plugins/</code> folder. You can find the folder by opening r2modman, going to settings, and clicking Browse profile folder.</p> </li> <li> <p>manual install:</p> </li> <li> <p>Copy the <code>ExamplePlugin.dll</code> and <code>ExamplePlugin.pdb</code> to your <code>Game Folder/BepInEx/plugins/</code> folder.</p> </li> </ul>"},{"location":"Mod-Creation/Getting-Started/First-Mod/#testing-the-mod","title":"Testing the mod","text":"<p>If it's your first time ever launching the game with the latest BepInEx Pack, you may have notice the BepInEx GUI has a console, it has multiple features that could be useful to you:</p> <ul> <li> <p>Pausing / Resuming the game process</p> </li> <li> <p>Copying / extracting some log entries by selecting them (you can drag) and pressing Ctrl+C</p> </li> <li> <p>Filtering log entries by text or their log level</p> </li> <li> <p>Filtering by mod name</p> </li> <li> <p>Can close the game and the GUI very quickly by pressing CTRL + F5 while the GUI is focused</p> </li> <li> <p>Full feature list available here</p> </li> </ul> <p>The console overall is very useful for debugging your code alongside the Visual Studio debugger if you follow this tutorial</p> <p>When logging stuff to the console, don't forget to use the dedicated <code>Log</code> class available in the boilerplate!</p> <p>Once the game launched:</p> <ul> <li> <p>Go in singleplayer.</p> </li> <li> <p>Press F2. Our custom item should be spawning.</p> </li> </ul>"},{"location":"Mod-Creation/Getting-Started/First-Mod/#to-go-further","title":"To go further","text":"<p>The sidebar is very useful for navigating the wiki (please navigate it through the github io page)</p> <p>Must see pages:</p> <ul> <li> <p>Debugging your mods</p> </li> <li> <p>C# Assembly References (aka how C# .dll file dependencies work)</p> </li> <li> <p>Analysing / Reading the game code</p> </li> <li> <p>How to load / modify any game assets</p> <ul> <li> <p>Explaining the concept of prefabs</p> </li> <li> <p>Load game assets / prefabs</p> </li> </ul> </li> <li> <p>Hooks: For modifying the game code</p> </li> <li> <p>Understanding Unity Principles</p> <ul> <li> <p>MonoBehaviour</p> </li> <li> <p>Prefabs</p> </li> </ul> </li> </ul>"},{"location":"Mod-Creation/Getting-Started/First-Mod/#github","title":"Github","text":"<p>This step isn't strictly necessary but it is good practice to use source control and the most commonly used source control with C# in Visual Studio is git.</p> <p>You should be using this and synchronising your repository with github.</p> <p>To do this from Visual Studio follow these simple steps</p> <p>If you encounter any problem following this tutorial or have suggestions to make it better, feel free to edit the wiki page directly and drop a message in the modding discord</p>"},{"location":"Mod-Creation/Getting-Started/So-you-want-to-mod-Risk-of-Rain-2%3F/","title":"So you want to mod Risk of Rain 2?","text":"<p>Modding Risk of Rain 2 can be really demanding. Depending on what a solo developer is doing, they might need to know the entire game development stack (coding, modeling, sound design, etc). At the bare minimum, at least programming knowledge is required, and custom models and sound effects add to a mod's quality. Oftentimes people work as teams or commission others for skill sets, they're missing, but it is possible to do everything solo. </p> <p>This page is meant to be a learning reference for any skills you might feel weak in or want to learn so you can mod the game effectively. You don't need to do it all to make good mods!</p> <p>&lt; PAGE IN PROGRESS &gt;</p>"},{"location":"Mod-Creation/Getting-Started/So-you-want-to-mod-Risk-of-Rain-2%3F/#programming","title":"Programming","text":"<p>This free video course from freecodecamp will explain to you the basics of c# programming.</p> <p>If reading is more your style, you can find a written guide you follow along with from microsoft here.</p>"},{"location":"Mod-Creation/Getting-Started/So-you-want-to-mod-Risk-of-Rain-2%3F/#unity","title":"Unity","text":""},{"location":"Mod-Creation/Getting-Started/So-you-want-to-mod-Risk-of-Rain-2%3F/#modeling","title":"Modeling","text":"<p>You can find the iconic blender donut tutorial here.</p> <p>Other channels you can learn from include Grant Abbitt and Ian McGlasham.</p>"},{"location":"Mod-Creation/Getting-Started/So-you-want-to-mod-Risk-of-Rain-2%3F/#animating","title":"Animating","text":""},{"location":"Mod-Creation/Getting-Started/So-you-want-to-mod-Risk-of-Rain-2%3F/#2d-art","title":"2D Art","text":""},{"location":"Mod-Creation/Getting-Started/So-you-want-to-mod-Risk-of-Rain-2%3F/#visual-fx","title":"Visual FX","text":""},{"location":"Mod-Creation/Getting-Started/So-you-want-to-mod-Risk-of-Rain-2%3F/#sound-design","title":"Sound Design","text":""},{"location":"Mod-Creation/IDE/Visual-Studio-Code/","title":"Visual Studio Code","text":"<p>Caution: You may be more comfortable using VSCode, but most modders use Visual Studio Community for writing mods, and Visual Studio supports more .NET configurations than VSCode currently does. It's still possible to use VSCode, but requires some setup.</p> <p>Visual Studio Code (or VSCode) is a general-purpose open source IDE by Microsoft. If you are more comfortabe in VSCode and prefer to use it rather than learning a new IDE (Visual Studio, which most modders and developers use for C#/.NET projects), this page is a description on some of the differences between the two IDEs.</p> <p>Reference: - https://code.visualstudio.com/docs/languages/csharp - https://docs.microsoft.com/en-us/dotnet/core/tutorials/with-visual-studio-code</p>"},{"location":"Mod-Creation/IDE/Visual-Studio-Code/#new-project","title":"New Project","text":"<p>To match the convention that most mods use, we will create a top-level \"solution\" (using a <code>.sln</code> file) and then write our code in a source directory as a .NET <code>classlib</code>.</p> <p>Create a new folder called <code>SamplePlugin</code> (can be done in VSCode or File Explorer).</p> <p>Open this folder in VSCode, and open a Terminal. We will use the <code>dotnet</code> CLI to create the necessary solution and and cs/csproj files.</p> <pre><code># Terminal\n\nD:\\Mods\\SamplePlugin &gt; dotnet new sln\n\nD:\\Mods\\SamplePlugin &gt; dotnet new classlib -o SamplePlugin\n\nD:\\Mods\\SamplePlugin &gt; dotnet sln add .\\SamplePlugin\\SamplePlugin.csproj\n</code></pre> <p>After running these commands, your directory should look like this:</p> <pre><code>SamplePlugin\n\u251c\u2500\u2500 SamplePlugin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 Class1.cs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 SamplePlugin.csproj\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 obj\n\u2514\u2500\u2500 SamplePlugin.sln\n</code></pre> <p>The top-level solution relates to build information for the \"solution\" (this project, or a group of projects) such as Debug/Release compiling or the architecture target. The <code>.csproj</code> file specifies information for a project such as its .NET version and its dependencies.</p>"},{"location":"Mod-Creation/IDE/Visual-Studio-Code/#adding-references","title":"Adding References","text":"<p>Visual Studio can add references through a file chooser dialog, but VSCode doesn't have a good extension that does this (as of this writing).</p> <p>The csproj file can be manually edited to add the required references to BepInEx and Risk of Rain 2 DLLs. Please take a look at this page for more details</p>"},{"location":"Mod-Creation/IDE/Visual-Studio-Code/#building","title":"Building","text":""},{"location":"Mod-Creation/IDE/Visual-Studio-Code/#building-with-vscode","title":"Building with VSCode","text":"<p>VSCode can auto-generate a \"build\" task for a .NET project that runs <code>dotnet build</code> or <code>dotnet msbuild</code>.</p> <p>Go to <code>Terminal &gt; Run Build Task</code>: - click dialog \"No build task found. Configure Build Task ...\" - \"Create tasks.json\" from template (VSCode will auto-generate a <code>tasks.json</code>) - Select <code>.NET Core</code> since this project builds via <code>dotnet</code>.</p> <p>You can see VSCode has filled out a tasks.json file that defines a build command that calls <code>dotnet build</code> with some additional arguments. This build task can now be run with <code>ctrl + shift + b</code> every time you want to build the project.</p>"},{"location":"Mod-Creation/IDE/Visual-Studio-Code/#building-directly-with-dotnet","title":"Building Directly with <code>dotnet</code>","text":"<p>The project can be built from the command line by using the <code>dotnet</code> cli:</p> <pre><code>D:\\Mods\\SamplePlugin &gt; dotnet restore\n\nD:\\Mods\\SamplePlugin &gt; dotnet msbuild\n</code></pre> <p>The build artifact will be be created under <code>SamplePlugin/SamplePlugin/bin/Debug/netstandard2.0/SamplePlugin.dll</code>.</p> <p>When compiling for release, typically you will pass the Release parameter to msbuild:</p> <pre><code>D:\\Mods\\SamplePlugin &gt; dotnet msbuild /p:Configuration=Release\n</code></pre> <p>The target will now be under <code>bin/Release</code>.</p>"},{"location":"Mod-Creation/IDE/Visual-Studio-Code/#build-events","title":"Build Events","text":"<p>See: Build Events page that describes workflows while using Visual Studio.</p> <p>Visual Studio Code also supports tasks that can be added in <code>.vscode/tasks.json</code></p>"},{"location":"Mod-Creation/IDE/Visual-Studio-Code/#copy-result-dll-to-bepinex-directory","title":"Copy result DLL to BepInEx directory","text":"<p>Create a directory in your <code>BepInEx/plugins</code> directory to store your plugin, e.g. <code>SamplePlugin/</code>.</p> <p>Then add the following to your the tasks list in tasks.json for this project, adjusting paths as necessary:</p> <pre><code>        {\n            \"label\": \"deploy\",\n            \"command\": \"Copy-Item\",\n            \"type\": \"shell\",\n            \"args\": [\n                \"SamplePlugin/bin/Debug/netstandard2.0/SamplePlugin.dll\",\n                \"D:/Program Files (x86)/Steam/steamapps/common/Risk of Rain 2/BepInEx/plugins/SamplePlugin/\"\n            ],\n            \"group\": \"build\"\n        }\n</code></pre>"},{"location":"Mod-Creation/IDE/Visual-Studio/Post-Build-Events/","title":"Post Build Events","text":"<p>Say you want to automate the process of moving your mod to your plugin folder, or maybe run custom commands after. Maybe some files need to be moved before hand. To do this, visual studio has things called \"Pre-Build Events\" and \"Post-Build Events\". You can find these under your project properties (You find these under \"Project\" at the top, followed by \"Properties\" all the way at the bottom <code>alt, P, P</code>) Under Build Events, you will see two text fields: Pre-build and Post-Build.</p> <p>Pre-build events are run before the compiler compiles your project, and post-build after. We will mainly focus on post-build events here.</p> <p>The language for these events is Batch with additional macros with variables localized to your project. While this page shall not go into the details of language, we will discuss some of the more commonly used post-build events.</p> <p>If you are running into issues due to macros being empty. Feel free to hop into the discord and ask Paddywan or ping Harb. We'll share your pain and hopefully be able to tell you how to remedy it.</p>"},{"location":"Mod-Creation/IDE/Visual-Studio/Post-Build-Events/#copy-output-dll","title":"Copy output DLL","text":"<p>Most commonly used is the copy command to get your dll to where you want it. <pre><code>copy &lt;something&gt; &lt;somewhere&gt;\n::example\ncopy /Y \"$(TargetPath)\" \"$(SolutionPath)Builds\\\"\n</code></pre> Let's go over the arguments individually - <code>copy</code> signifies a copy instruction. It takes two arguments: what to copy and where to copy it to. - <code>/y</code> is a flag for the copy instruction to suppress the prompting if you want to overwrite the destination file. - <code>\"$(TargetPath)\"</code> is a macro to the output dll produced by building the project. See macros at the end of the page. - <code>\"$(ProjectPath)Builds\\\"</code> is a folder named Builds right next to your <code>.sln</code> file. This is especially useful if you want to have folder containing all latest builds of your mods contained in your solution.</p> <p>Use <code>xcopy</code> to copy a folder if your mod requires multiple files.</p>"},{"location":"Mod-Creation/IDE/Visual-Studio/Post-Build-Events/#external-programs","title":"External Programs","text":"<p>If you have external files or programs you want to run, simply provide the absolute path to run it, followed by any arguments that you might need it. <pre><code>[program] arg1 arg2 etc\n::example\nC:\\MyAwesomeProgram.exe -makeReallyCool \"$(TargetPath)\"\n</code></pre> Now sometimes you want to use the output of such a program in your build events. Because batch is windows and sometimes dumb, you need to save it to a file first. <pre><code>[program] arg1 arg2 etc &gt; file.ext\nset VARNAME=&lt;file.ext\ndel file.ext\n::example\nC:\\MyAwesomeProgram.exe -makeReallyCool \"$(TargetPath)\" &gt; temp.txt\nset COOLDLL=&lt;temp.txt\ndel temp.txt\n</code></pre> Afterwards you can use this variable in commands by using <code>%VARNAME%</code>, in the example's case, this would be <code>%COOLDLL%</code>.</p>"},{"location":"Mod-Creation/IDE/Visual-Studio/Post-Build-Events/#unetweaver","title":"UNetWeaver","text":"<p>Possibly the most common example of an external program would be the use of Unity's UNetWeaver for networking. See this page to learn more.</p> <p>If you are using a .bat file, make sure you <code>call</code> it before you perform other post build actions in your IDE, or the post build will for some reason stop at the .bat <pre><code>call weaver.bat\n\ncopy /Y \"$(TargetPath)\" \"$(SolutionPath)Builds\\\"\nrem the rest of your commands\n</code></pre></p>"},{"location":"Mod-Creation/IDE/Visual-Studio/Post-Build-Events/#conditionals","title":"Conditionals","text":"<p>Batch has <code>for, if</code> and probably more go google! Batch does not have conditional operators, but there are some implementations for <code>or</code> and <code>and</code></p> <p>Or <pre><code>set result=false\nif %a% == 1 set result=true\nif %b% == 1 set result=true\nif \"%result%\" == \"true\" (\n    do something\n)\n</code></pre> and <pre><code>if %a% == 1 (\n    if %b% == 1 (\n        do something\n    )\n)\n</code></pre></p>"},{"location":"Mod-Creation/IDE/Visual-Studio/Post-Build-Events/#macros","title":"Macros","text":"<ul> <li><code>$(OutDir)</code> is the folder to which your dll is outputted. This path ends in a <code>\\</code>.</li> <li><code>$(ConfigurationName)</code> is the configuration under which you've chosen to build under. By default this is set to \"Debug\", and a \"Release\" configuration is available. NOTE: sometimes this does not work and you need to use <code>$(Configuration)</code> instead.</li> <li><code>$(ProjectName)</code> is the name of your project.</li> <li><code>$(TargetName)</code> is the name of the output dll, excluding the <code>.dll</code> part.</li> <li><code>$(TargetPath)</code> is the absolute path to your output dll, including the <code>.dll</code> part.</li> <li><code>$(ProjectPath)</code> is the absolute path to your project file, including the <code>.csproj</code> part.</li> <li><code>$(ProjectFileName)</code> is the file name of the project, usually ending in <code>.csproj</code></li> <li><code>$(TargetDir)</code> is the absolute path to the folder your dll will be placed in. This path ends in a <code>\\</code>.</li> <li><code>$(ProjectDir)</code> is the absolute path to the folder that contains your project file. This path ends in a <code>\\</code>.</li> <li><code>$(SolutionFileName)</code> is the filename of your solution, which contains all your projects. this file usually ends in in <code>.sln</code>.</li> <li><code>$(SolutionPath)</code> is the absolute path to your solution file. Ending in <code>.sln</code>.</li> <li><code>$(SolutionName)</code> is your solution name, excluding the <code>.sln</code> part.</li> <li><code>$(TargetExt)</code>, <code>$(ProjectExt)</code>, and <code>$(SolutionExt)</code> will likely be <code>.dll</code>, <code>.csproj</code>, and <code>.sln</code> respectively.</li> </ul>"},{"location":"Mod-Creation/Testing/Testing-Multiplayer-Alone/","title":"Testing Multiplayer Alone","text":"<p>source: <code>!localnetwork</code> and <code>!exeshortcut</code> in the Risk of Rain 2 Modding Discord server.</p>"},{"location":"Mod-Creation/Testing/Testing-Multiplayer-Alone/#connecting-two-local-instances-of-the-game","title":"Connecting two local instances of the game","text":"<ol> <li>Add the following line to the <code>Awake()</code> function of your <code>BaseUnityPlugin</code> subclass:     <pre><code>// Remove this line before publishing/releasing your mod!\nOn.RoR2.Networking.NetworkManagerSystemSteam.OnClientConnect += (s, u, t) =&gt; {};\n</code></pre><ul> <li>Alternatively, you can install the mod Nuxlar-MultiplayerModTesting instead (read the README for usage)<ul> <li>Note: only the host mod profile should have this mod enabled. Otherwise, clients will be spawned in as Commando(??)</li> </ul> </li> </ul> </li> <li>Launch two instances of the game</li> <li>Host a private lobby with one instance</li> <li>Open the console on the other instance and input <code>connect localhost:7777</code></li> </ol>"},{"location":"Mod-Creation/Testing/Testing-Multiplayer-Alone/#create-an-executable-shortcut-for-modded-profiles","title":"Create an executable shortcut for modded profiles","text":"<p>You can create a shortcut that points to the Risk of Rain 2 executable that, when clicked, will open an instance that corresponds to a desired r2modman profile. This is especially useful in scenarios where you need two instances of the game open, such as when testing networking locally.</p>"},{"location":"Mod-Creation/Testing/Testing-Multiplayer-Alone/#steps","title":"Steps","text":"<ol> <li>Create a shortcut of your Risk of Rain 2 executable<ul> <li>Windows: right-click <code>Risk of Rain 2.exe</code>, then \"Create shortcut\" in the context menu</li> </ul> </li> <li>Open the properties of the new shortcut<ul> <li>Windows: right-click the shortcut, then select \"Properties\" in the context menu</li> </ul> </li> <li>Copy your preferred r2modman profile's launch parameters<ol> <li>Open r2modman</li> <li>Select profile</li> <li>\"Settings\" section &gt; \"Debugging\" tab &gt; \"Set launch parameters\" option</li> <li>Copy the inline code block labelled \"Modded\" <pre><code># Example\n--doorstop-enabled true --doorstop-target-assembly \"C:\\Users\\user\\AppData\\Roaming\\r2modmanPlus-local\\RiskOfRain2\\profiles\\Default\\BepInEx\\core\\BepInEx.Preloader.dll\n</code></pre></li> </ol> </li> <li>Append the launch parameters to the \"Target\" field of the shortcut's properties     <pre><code># Example\n\n# before\n\"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Risk of Rain 2\\Risk of Rain 2.exe\"\n\n# after\n\"C:\\Program Files (x86)\\Steam\\steamapps\\common\\Risk of Rain 2\\Risk of Rain 2.exe\" --doorstop-enabled true --doorstop-target-assembly \"C:\\Users\\user\\AppData\\Roaming\\r2modmanPlus-local\\RiskOfRain2\\profiles\\Default\\BepInEx\\core\\BepInEx.Preloader.dll\n</code></pre></li> </ol>"},{"location":"Mod-Creation/ThunderKit/Crash-Course-and-Getting-Started/","title":"ThunderKit - Crash course and Getting Started","text":"<p>ThunderKit is a Mod development Environment that's used for the creation of mods focusing on large amounts of content and with heavy utilization of the Assets system, wether those assets take form of GameObjects or ScriptableObjects. Due to the nature of working within the editor, you get access to all sorts of editor tooling, such as developing mods in a close aproximation to what GearBox uses for developing the game.</p> <p></p>"},{"location":"Mod-Creation/ThunderKit/Crash-Course-and-Getting-Started/#key-features","title":"Key Features","text":"<p>Below are a series of images detailing the key features of the ThunderKit environment</p> <p> </p>"},{"location":"Mod-Creation/ThunderKit/Crash-Course-and-Getting-Started/#getting-started","title":"Getting Started","text":"<p>You will need the current unity version used by the game, you can find the current version of unity being used in this page. This part of the guide will walk you thru the process of creating a Github repository for your mod, alongside creating your project. The guide will not cover how to utilize ThunderKit or setup a basic workflow, if youre looking for a setup that utilizes a well tested and developed Framework Library, look into Moonstorm Shared Utils Page</p> <p>Note: Any version strings you may see on pictures are purely from the moment this guide was written, these version numbers may change in the future, when in doubt, ask around the modcord to ensure youre using the correct versions of software</p>"},{"location":"Mod-Creation/ThunderKit/Crash-Course-and-Getting-Started/#step-1-github-repository","title":"Step 1: Github Repository","text":"<p>This part of the guide asumes youre utilizing a GitGUI, such as GithubDesktop</p> <ol> <li>Create and Initialize your repository</li> </ol> <p>Keep in mind, you MUST select the Unity .gitignore, the gitignore file ignores key entries that are excluded from your project to lower the overall size of the repo on the github servers.</p> <p></p> <ol> <li>Modify the GitIgnore</li> </ol> <p>The .gitignore file can be modified to ignore more specific files and assets, it is recommended to modify the following entries:</p> <ul> <li>Remove the beginning '/' character on all paths. this only applies if '/' is the first character of the path.</li> </ul> <p></p> <p>Should now look like the next image.</p> <p></p> <p>We now have a very basic git repository for our mod using ThunderKit. Now we can proceed to create the project.</p>"},{"location":"Mod-Creation/ThunderKit/Crash-Course-and-Getting-Started/#step-2-the-unity-project","title":"Step 2: The unity project","text":"<ol> <li>Create a new unity project using the current version of unity. Make sure to utilize the Built In render pipeline option, as Risk of Rain 2 does not use neither the Universal or High Definition render pipelines.</li> </ol> <ol> <li>Once the project is created you should only have a couple of changed files, (Less than 100). if more than 100, or more than a 1000 files are changed, make sure your gitignore file is properly confiured.</li> </ol>"},{"location":"Mod-Creation/ThunderKit/Crash-Course-and-Getting-Started/#step-3-preparing-the-gitignore-for-more-entries","title":"Step 3: Preparing the .gitignore for more entries","text":"<p>You may want to modify your gitignore further to contain the following entries. You can replace the substring <code>&lt;PROJECT_NAME&gt;</code> with your project's name</p> <pre><code>#Ensures RoR2 assemblies are not redistributed accidentally\n&lt;PROJECT_NAME&gt;/[Pp]ackages/[Rr]isk of Rain 2/*.dll\n&lt;PROJECT_NAME&gt;/[Pp]ackages/[Rr]isk of Rain 2/[Pp]lugins/*.dll\n\n#Client side only thunderkit related files.\n&lt;PROJECT_NAME&gt;/Assets/ThunderKitSettings/EditorInspectorSettings.asset\n&lt;PROJECT_NAME&gt;/Assets/ThunderKitSettings/RoR2.asset\n&lt;PROJECT_NAME&gt;/Assets/ThunderKitSettings/Logs/*\n&lt;PROJECT_NAME&gt;/Assets/ThunderKitSettings/ThunderKit Extensions.asset\n&lt;PROJECT_NAME&gt;/ThunderKit/\n\n#Ensures mod dependencies such as R2API and others are not explicitly added to the github repository to avoid unecesary redistribution\nSS2-Project/Packages/*\n!SS2-Project/Packages/packages-lock.json\n!SS2-Project/Packages/manifest.json\n</code></pre>"},{"location":"Mod-Creation/ThunderKit/Crash-Course-and-Getting-Started/#step-35-installing-the-wwise-integration-optional","title":"Step 3.5: Installing the WWise integration. (Optional)","text":"<p>As you may already know, RoR2 utilizes Audiokinetic's Wwise as its audio engine. Integrating wwise into your unity project lets you utilize key Wwise components and features properly during your mod's development. Ask around in the modding discord server for the current wwise version. This step is optional and not mandatory for developing mods with thunderkit.</p> <p></p> <ol> <li>Open the Audiokinetic launcher, and click on the \"Unity\" section. Locate your unity project and hit \"Integrate Wwise in project\"</li> </ol> <p></p> <ol> <li>Integrate wwise into the project utilizing the current wwise version, ask around in modcord if you do not know which version we're using.</li> </ol> <p> </p> <ol> <li>Once completed, the wwise integration package has been installed.</li> </ol> <p></p> <ol> <li>On the project's root folder, you'll see two zip files, these two zip files can be deleted safely to reduce the size of the repository</li> </ol> <p></p>"},{"location":"Mod-Creation/ThunderKit/Crash-Course-and-Getting-Started/#step-4-installing-thunderkit","title":"Step 4: Installing ThunderKit","text":"<ol> <li>Open the unity project, go to <code>Window/Package Manager</code> to open the Unity Package Manager</li> </ol> <ol> <li>Go to the ThunderKit Repository. Taking a look at the website you can see a big green <code>&lt;&gt; Code</code> button. Clicking it and then clicking the copy url button will copy the link to the repository.</li> </ol> <ol> <li>On the Package Manager window, hit the <code>+</code> button, and click the <code>Add package from Git URL...</code> option</li> </ol> <ol> <li>Paste the git URL copied beforehand. As a side note, it is recommeneded to install only the latest tagged release from the repository. To install a specific release tag, append the Tag's name preceded by a <code>#</code> character.</li> </ol> <p>For example, to download the version 9.1.0 of ThunderKit to your project, you must use the git url <code>https://github.com/PassivePicasso/ThunderKit.git#9.1.0</code></p> <p></p> <ol> <li>Once the package installs, its settings window should appear, thunderkit has been installed.</li> </ol> <p></p>"},{"location":"Mod-Creation/ThunderKit/Crash-Course-and-Getting-Started/#step-5-importing-the-game-and-the-ror2-import-extensions","title":"Step 5: Importing the game and the RoR2 Import Extensions.","text":"<p>On a Thunderkit Context, we call a \"Game Import\" the process of importing the game's assemblies into our thunderkit project, this process is what allows us to utilize ThunderKit to the fullest by using the game's actual assemblies for development.</p> <p></p> <p>By default, ThunderKit comes with a set of basic import steps that are required for succesful game import, however, on Risk of Rain 2, we require extra import steps, we will achieve these steps by utilizing the RoR2 Importer Extensions</p> <ol> <li> <p>Open once again the Package Manager window by going to <code>Window/Package Manager</code></p> </li> <li> <p>Go to the RoR2 Import Extensions repository, and download, and install the latest version of the package.</p> </li> <li> <p>Once the import extensions package is open, travel to <code>Assets/ThunderKitSettings</code> and delete the <code>ImportConfiguration</code> asset. This asset will be created automatically post deletion.</p> </li> </ol> <p></p> <ol> <li>Close the Thunderkit Settings window if its opened. Then open it again and traverse to the Import Configuration section. You should see an expanded selection of import steps.</li> </ol> <p></p> <p>Here's an indepth table with what each step does.</p> Import Step Description Check Unity Version Ensures the unity editor version matches the game's unity version. This exists mostly for debugging and utilizing thunderkit with a mismatch unity version is unsuported. Disable Assembly Updater Disables the assembly updater, this is to avoid unity updating managed libraries that should not be modified which can cause issues. PostProcessing Unity Package Installer Installs the Postprocessing unity package, useful if youre looking for adding custom post processing Assembly Publicizer Publicizes the listed assembly names, making all the fields public and removing their read only identifiers. fields that become public via the publicizer are marked as not serializable, keeping the inspector look intact. MMHook Generator Generates MMHook assemblies based off the listed assembly names, allowing you to easily hook game code to inject your custom code. Import Assemblies Imports the game's assemblies, this step is required to be enabled for the publicizer and mmhook generators to work properly. Import Project Settings Import the game's project settings, it is recommended to import all project settings Set Deferred Shading Sets the rendering path for all Graphics Tiers to Deferred Create Game Package Creates a new <code>package.json</code> file for the game's assemblies, leaving this disabled will cause the game's assemblies to not be detected by unity Import Addressable Catalog Imports the Addressable Catalog, also enables the Addressable Browser Configure Addressable Graphics Settings Assigns teh Risk of Rain 2 Deferred Shading and DeferredReflectionCustom shaders in the AddressableGraphicsSettings and by proxy in the project's Graphic Settings Ensure RoR2 Thunderstore Source Ensures the creation of a Thunderstore Source for Risk of Rain 2, allowing you to install external mods for cross compatibility Install Bepinex Installs BepInEx to your project, alongside its dependencies. R2API Submodule Installer Allows you to select specific R2API Submodules to install to the project. Install RoR2MultiplayerHLAPI Installs the RoR2MultiplayerHLAPI fork of the Unity HLAPI. allowing for networking procedures for your mod Install RoR2 Editor Kit Installs RoR2EditorKit, which contains a plethora of utilities and inspectors for developing mods. Get Bitness Obtains the \"Bitness\" of the game. (Wether the game runs on 32 or 64 bits) Beep Unity will play a system beep sound to inform the import is complete Prompt Restart Once the import process is complete, unity will prompt for a project restart for stability reasons <ol> <li>Once your import configuration is configured, go to the ThunderKit Settings option</li> </ol> <p></p> <ol> <li> <p>Hit Browse and select the game's executable. Once the executable is selected, click \"Import\" to begin the import process.</p> </li> <li> <p>You may be prompted to disbale the assembly updater, click \"Restart Project\"</p> </li> </ol> <p></p> <ol> <li> <p>The import has begun, please keep in mind that importing the game takes time, patience is key You may see CMD windows poping up, this is Normal and not a cause for concern</p> </li> <li> <p>Once the import process is complete, you may be prompted to restart the project for stability reasons, it is recommended to restart it.</p> </li> </ol> <p></p> <ol> <li> <p>If you integrated wwise, you may notice some errors related to duplicate assemblies. You'll need to manually delete the following assemblies from the project:</p> <p>Packages/riskofrain2/plugins/AkSoundEngine.dll</p> </li> </ol>"},{"location":"Mod-Creation/ThunderKit/Crash-Course-and-Getting-Started/#step-6-compossable-object-crashcourse","title":"Step 6: Compossable Object Crashcourse","text":"<p>Before we start creating a simple mod, it is EXTREMELY important to understand the concept of Compossable Objects within ThunderKit.</p> <p>Creating mods in ThunderKit utilizes it's setups for managing and handling mod identity and deployment, this is done via whats known as the \"Manifest\" and \"Pipelines\", which are \"Compossable Objects\"</p> <p>A Compossable Object, in this case, is a custom ScriptableObject that contains internal scriptable objects that \"Compose\" the main element. its used to contain large amount of compossable and modifiable data. Each main Compossable Object has a Compossable Element.</p> Compossable Object Compossable Element Pipeline Pipeline Job Manifest Manifest Datum Path Reference Path Component <ol> <li>Manifest and Manifest Datum</li> </ol> <p>As explained before, a Manifest's Compossable Element is a \"Manifest Datum\". A manifest datum always has a \"Staging Paths\" field. This field is utilized by ThunderKit to know where to \"Stage\" the manifest's data during the building process. It is recommended to use the default staging paths unless you want to create a more sophisticated build setup.</p> <p>Below is a table that has all of the default datum types and a description of them</p> Datum Type Description Manifest Identity This is the main datum all manifests have, and it describes the <code>manifest.json</code> of your mod which will be used during the upload to thunderstore. Contains metadata such as the Author, the name of the mod, it's description, the version, and a list of Manifest Depencencies. Which ThunderKit will use to construct a valid <code>manifest.json</code> for Thunderstore. Assembly Definitions A Datum that represents assemblies of your mod, you can specify multiple assemblies for your mod, for more information on Assembly Definitions, check the manual entry here Asset Bundle Definitions A Datum that represents ASsetBundles for your mod, you can specify multiple assetbundles for your mod, and you can specify specific assets for your mod's bundle. If you specify a folder, all of the folder's contents and subfolders will be added to the specified Assetbundle. Files A generic datum used to contain extra files for your mod, these files can be staged in specific folders, and as such can be used to copy over a myriad of files such as language files, manifest files such as the mod's icon, readme and changelog, etc. ThunderStore Data A Datum that's used to hold your mod's github url. Unity Packages A Datum thats used to relate specific unity asset packages with your mod, this is rarely used in a modding context. <ol> <li>Pipeline and Pipeline Job</li> </ol> <p>A Pipeline compossable element is composed by PipelineJobs. A Pipeline in this case is a Scriptable Object thats used to execute complex code routines that act upon data held by a Manifest. You can think of the Manifest as pure data held that contains the metadata of a mod, and a Pipeline as code pieces that execute specific actions related to the manifest's data.</p> <p>The pipeline by default has a single field, called the \"Manifest\" this is the main manifest that the pipeline will process. You can also set a Quick access to the pipeline to have access to it from the top toolbar.</p> <p>Pipeline job execution is Sequential, meaning that the compossable element at index 0 will be the first job to run, then the index 1 will be next, so on and so forth.</p> <p></p> <p>Pipeline job execution is Sequential, meaning that the compossable element at index 0 will be the first job to run, then the index 1 will be next, so on and so forth.</p> <p>Below is a table that has all of the default Pipeline Job types and a description of them</p> Pipeline Job Type Description Apply Patch Applies a bsDiff patch file to an assembly to patch its managed code, this is rarely used in a modding context. Create Patch Creates a bsDiff patch based off an old assembly and a modified one, this is rarely used in a modding context. Copy A pipeline job thats used to copy over files and directories. Delete A pipeline job thats used to delete files and directories. Execute Pipeline A Pipeline job that executes another pipeline and awaits for its completion, this can be used to create complex deployment pipelines. Execute Process A Pipeline job that executes a executable as a process and awaits for its completion, this is rarely used in a modding context. Stage Assemblies A Pipeline job that stages the assemblies associated with the manifest. This staging process builds the assembly. You can specify wether to mark it as a release build or a debug build, allowing you to utilize conditional compilation Stage AssetBundles A pipeline job that stages the assetbundles associated with the manifest. This staging process builds the assetbundles. Stage Dependencies A Pipeline job that stages the dependencies associated with the manifest. you can specify a black list Stage Manifest Files A Pipeline job that stages any manifest datum of type \"Files\". this can be used to stage things like langauge files, changelogs, readmes, icons, etc. Stage Thunderstore Manifest A Pipeline job that stages your manifest's <code>manifest.json</code> file, allowing you to easily upload your mod to thunderstore. Stage Unity Packages A Pipeline job that stages your manifest's Unity Asset Packages, this is rarely used in a modding context. Zip A Pipeline job that Zips a specific source folder and creates a zip file, this can be used to easily generate a .zip file ready for upload to thunderstore. <ol> <li>Path Reference and Path Components</li> </ol> <p>A PathReference compossable element is composed by PathComponents, these are used to create and represent complex path representations that are created when requested. You may notice during the previous two sections that some compossable elements have strings that are surrounded by <code>&lt;&gt;</code>. In a ThunderKit context, a path stirng that's surrounded by <code>&lt;&gt;</code> means that the pipeline or manifest is requesting for a PathReference that has the name within the <code>&lt;&gt;</code>. For example, You may notice that the Stage AssetBundles pipeline job has a BundleArtifactPath with it's default value set to <code>&lt;AssetBundleStaging&gt;</code>.</p> <p></p> <p>This in turn, represents this specific Path Reference, which will be used to construct the full path during the pipeline job where the asset bundles will be created.</p> <p></p> <p>The creation of a Path from a Path Reference and its components is Sequential, meaning that the Path Component at index 0 will be the root path, then the next component will be combined with the previous component, so on and so forth.</p> <p>Below is a table that has all of the default PathComponent types and a description of them</p> Path Component Type Description Asset Reference Marks that an asset's path should be part of the generated path. Constant A Constant value, this can be either a complete path or part of a path, such as a folder name Find Directory Finds a specified directory with a specified pattern on <code>path</code>, and uses that directory as part of the path generation. Find File Finds a specified file with a specified pattern on <code>path</code>, and uses that file as a part of the path generation. Game Executable Returns the path to the game's executable, as dictated on the ThunderKit Settings. Game Path Returns the path to the game's main directory, as dictated on the ThunderKit Settings. Manifest Name Returns the name of the manifest, this is usually used within pipelines Manifest Version Returns the version string of the manfiest, this is usually used within pipelines Output Reference Returns the computed output of a specified Path Reference. Path Component Returns an empty string, might be unintented Registry Lookup Returns a specific key's value from the system's registry Resolver Given a specified <code>&lt;PathReference&gt;</code>, return its resolved output ThunderKit Root Returns the main ThunderKit root folder, which is located in <code>Project Root/ThunderKit</code> Working Directory Returns the main project's root folder."},{"location":"Mod-Creation/ThunderKit/Crash-Course-and-Getting-Started/#step-7-my-first-thunderkit-mod","title":"Step 7: My first ThunderKit mod","text":"<p>Now that we have a very basic grasp of compossable objects, we will begin creating a very simple mod that adds an ItemDef which increases all out stat multipliers by .1</p> <p>This part of the project will utilize the unofficial editor extension \"RoR2EditorKit\", as it contains a wizard that will create basically all of the boilerplate for us. If you did not install RoR2EditorKit or you left it's import step disabled, you can manually install it using it's github repository the same way you installed ThunderKit and the Importer Extensions.</p> <ol> <li>Go to <code>Tools/RoR2EditorKit/Wizards/Mod</code>, click it and the Mod creator wizard will open.</li> </ol> <p></p> <ul> <li> <p>Note: If there is no option as described above, its because ThunderKit failed to import the game's version properly, to fix this, go to <code>Packages\\Risk of Rain 2</code> and select it's <code>package.json</code> file. You may notice it's Version number is set to a very low value (0.0.1). Replace this value with a number thats higher than <code>1.3.0</code>, and the RoR2 side of the editor kit will enable, this is done to avoid opening a project for the first time and finding a multitude of errors, which can intimidate newcomers</p> </li> <li> <p>The window will open, in this window you can fill out your mod's metadata. You can also tick on the \"Add R2API Assemblies\" option to add all R2API assemblies to your mod. You can also add more Precompiled Assemblies by adding them using the Precompiled Assembly References list.</p> </li> </ul> <p></p> <ol> <li>Once configured, hit Run Wizard. once it completes, close the wiszard and go to your newly created folder where your mod resides. If your classes are missing, reimport the mod's folder by right clicking it and selecting \"Reimport\"</li> </ol> <p></p> <p>You may appreciate a couple of new files in the folder.</p> File/Folder Name Description Assets (folder) A folder where your mod's assets are located, your mod's AssetBundle will be built from this folder. Keep in mind that as its a folder, any assets and sub-folders will be included to the final AssetBundle. CHANGELOG.md A MarkDown file that represents your mod's ChangeLog, this is optional in the ZIP file we'll upload to thunderstore eventually. icon.png Your mod's Icon, which will be used on thunderstore, make sure to update it because by default it'll just reuse RoR2EK's icon .asmdef This is your main mod's assembly definition, it's what tells unity to create a new CSProj for modifying and creating your assembly. Due to the wizard, it already has defined all the necesary assembly references. ContentProvider.cs This is your mod's IContentPackProvider class, this will be used to load your mod's content into the game (IE: Items, Bodies, Equipments, etc) Main.cs This is your mod's Main class that inherits from BaseUnityPlugin, it contains a simple singleton pattern to get access to its instance alongside logging methods. Due to the wizard, it already has defined all the necesary BepInDependencies for your mod. Manifest.asset This is your mod's Manifest asset configured to the bare minimum of datums, with all the required mod dependencies. It already defines your mod's assetbundle, your mod's assembly, files for the plugin and the Thunderstore URL README.md This is your mod's README file, general information about what your mod does should be here. <p>Note: To add new Precompiled Assemblies to your Assembly Definition, you can do so by adding new entries in this list: </p> <ol> <li>To begin our item, we need to create both an ExpansionDef and an ItemDef, unlike the regular way of creating these using <code>ScriptableObject.CreateInstance&lt;T&gt;()</code>, in ThunderKit we can create these ScriptableObjects as actual assets in our project. To do this, Right click the project window, and traverse to \"Create\", in there you can see further options, go to \"RoR2\" and you'll have access to all of RoR2's ScriptableObjects.</li> </ol> <p>(Do not actually use raw strings for the tokens, you can find guides regarding language elsewhere.)</p> <p></p> <ol> <li>This is the bare minimum of assets for our item to work, now comes loading our assets in code to create our ContentPack, and then give actual behaviours to our item. Open your ContentProvider class. Inside <code>LoadStaticContentAsync</code> our mod is loading our AssetBundle, after the <code>while</code> loop, we need to load both our ExpansionDef and ItemDef. And afterwards, add it to our ContentPack.</li> </ol> <p></p> <ol> <li>Now that we're adding our content to our ContentPack, we need to program the behaviour, inside <code>FinalizeAsync</code> we can run code that will be executed once all ContentPacks have been initialized. increasing stats with our item is done via R2API's RecalculateStatsAPI</li> </ol> <p></p> <ol> <li>Our item is done, now we need to build our mod. For building, we will utilize a Pipeline. Right click the project setting, and go to <code>ThunderKit/Pipeline</code></li> </ol> <p></p> <ol> <li>We now need to add our pipeline jobs to our pipeline, remember that jobs are run sequentially, this is what I Personally recommend. You will also need to create a new Path reference which will be used to tell thunderkit where to copy our built mod.</li> </ol> <p>This is what our pipeline is doing:</p> <pre><code>I. Build and Stage the selected manifest (ours)'s Assemblies, using a Release flag and staging debug databases for logging purposes.\nII. Build and Stage the selected manifest (ours)'s AssetBundles, utilizing no compression and building for Windows\nIII. Stage the selected manifest (ours)'s Files. (README, CHANGELOG, icon, etc)\nIV. Stage the selected manifest (ours)'s manifest.json file\nV. Copy all of the selected manifest (ours)'s file located within \"ManifestPluginStaging\" to \"DeploymentFolder\"\n</code></pre> <p></p> <ol> <li>Deployment folder in this case refers to a PathReference, its where ThunderKit will deploy our mod. this is what i usually do:</li> </ol> <p>Basically, this tells thunderkit to use the specified constant string (in this case, the path to my R2ModMan profile's plugins folder). And paste the files inside a folder that has our manifest's name.-</p> <p></p> <ol> <li>We are now ready to build our mod, select our pipeline and hit \"Execute\"</li> </ol> <p></p> <ol> <li>Our mod is built and has been staged into the plugins folder! download your dependencies and test it out!</li> </ol> <p> </p>"},{"location":"Mod-Creation/ThunderKit/Crash-Course-and-Getting-Started/#other-tidbits","title":"Other Tidbits","text":"<ul> <li> <p>If youre an experience modder, the assembly setup with AssemblyDefinitions do not support Embedding resources, this is because unity takes full control of your project's Solution and CSProj files, and as such, embedding is functionally impossible. Which is why stuff like AssetBundles are loaded externally.</p> </li> <li> <p>ThunderKit has relatively complete in-editor documentation, you can access it by using <code>Tools/ThunderKit/Documentation</code></p> </li> </ul> <p></p> <ul> <li>Since we're working on the editor, we can easily create and setup custom components or ScriptableObjects, use this to your advantage. Keep in mind that unity will only recognize valid monobehaviours that have only 1 class inside the file and the file and class name share the same name.</li> </ul> <p> </p> <ul> <li>If you end up with the need to create a custom ScriptableObject, you can create a custom one in code easily, you can also apply the <code>CreateAssetMenu</code> attribute to get a convenient menu for creating new instances of your ScriptableObject</li> </ul> <p> </p>"},{"location":"Mod-Creation/ThunderKit/Upgrading-your-project-to-use-R2API%27s-Split-Assemblies/","title":"Upgrading your project to use R2API's Split Assemblies","text":"<p>This guide will cover how you can upgrade your ThunderKit project from using the legacy R2API package, to using the new Split Assemblies package.</p>"},{"location":"Mod-Creation/ThunderKit/Upgrading-your-project-to-use-R2API%27s-Split-Assemblies/#the-what-now","title":"The what now?","text":"<p>The split assemblies package is the newest major release of R2API, this update took all the individual important aspects of R2API, and split them into their own separate assemblies, this reduces load times slightly, while increasing the development speed for new features, alongside quicker updates instead of waiting for a bunch of updates to pile up.</p> <p>Using the split assemblies update is useful if you dont want to have a dependency on all of the 21 dependencies the legacy package has (The legacy package contains a dependency for each and every submodule that was originally part of it, this is to avoid errors and crashing)</p> <p>This guide will cover the upgrade process done by Nebby, on his upcoming Revenant mod's Thunderkit project.</p>"},{"location":"Mod-Creation/ThunderKit/Upgrading-your-project-to-use-R2API%27s-Split-Assemblies/#step-1-preparing-your-project","title":"Step 1: Preparing your project","text":"<p>First and foremost, ALWAYS backup your projects before doing any kind of upgrade process! the RiskOfThunder team is NOT responsible for blunders or data loss resulting from these blunders. We're always happy to help if issues do arise.</p> <p>For migrating to the Split assemblies update, you'll require the following things:</p> <pre><code>ThunderKit version 6.0.0 or Greater\nRoR2ImporterExtensions version 1.3.0 or Greater\nRoR2EditorKit version 3.5.0 or Greater\n</code></pre> <p>If you dont have these versions, you can update ThunderKit by modifying the Package.Json file in your packages folder, alongside removing the package lock for said versions, make sure you ask around if you dont know what this means.</p> <p>For the importer extensions and the ror2ek, you can either use the Thunderkit Package manager, or use the github releases.</p>"},{"location":"Mod-Creation/ThunderKit/Upgrading-your-project-to-use-R2API%27s-Split-Assemblies/#step-2-locating-your-dependencies","title":"Step 2: Locating your dependencies","text":"<p>The simplest way to know what dependencies you'll need, is by checking what you're already requesting using SubmoduleDependencies! While the Revenant mod unity project doesnt specify any SubmoduleDependencies, one of it's dependants does request them, we'll use these for the guide, but make sure you find yours!</p> <p></p> <p>Something to keep in mind: If in your dependencies you have any of the following:</p> <pre><code>PrefabAPI\nItemAPI\nEliteAPI\nLoadoutAPI\nSoundAPI\nTempVisualEffectAPI\nUnlockableAPI\n</code></pre> <p>You'll also want to add \"ContentManagement\" to your dependency list! as the api's listed above depend on it.</p>"},{"location":"Mod-Creation/ThunderKit/Upgrading-your-project-to-use-R2API%27s-Split-Assemblies/#step-3-the-r2api-submodule-installer","title":"Step 3: The R2API Submodule Installer","text":"<p>The R2API Submodule Installer is a new extension point for ImporterExtensions that installs the selected R2API submodules, keep in mind that you cannot disable the Core module, as it's required for all other submodules to work.</p> <p></p> <p>The image may not show it, but i'm selecting the API's i had taken from my submodule dependencies, alongside ContentManagement, as Elites depends on it. You can disable all other extension points and keep the R2API submodule installer enabled to just execute it, go back to the main ThunderKitSettings, and hit import game.</p> <p>If during the installation you stumble upon a message regarding an API update, hit \"No Thanks\". if you hit \"I Made a Backup, Go ahead!\" the stability of your project WILL decrease significantly.</p> <p>After a while, you can see that all the submodules i needed have been installed in my project.</p> <p></p>"},{"location":"Mod-Creation/ThunderKit/Upgrading-your-project-to-use-R2API%27s-Split-Assemblies/#step-4-the-r2api-migrator-wizard","title":"Step 4: The R2API Migrator Wizard","text":"<p>RoR2EditorKit version 3.5.0 adds the R2API Migrator Wizard, a custom wizard that can help during the migration process.</p> <p></p> <p>The migrator does the following things: * If a main class is supplied, and the migrator finds the following text: <code>[BepInDependency(\"com.bepis.r2api\", BepInDependency.DependencyFlags.HardDependency)]</code> (and only this, it wont accept soft dependency or not specifying the type of dependency). it'll replace said BepInDependency for multiple BepInDependencies that point to each R2API submodule installed in the project. * If an AssemblyDefinition is supplied, and in the precompiled references has the words <code>R2API.dll</code>, it'll remove said reference and instead add all the R2API submodules installed in the project. * If a Manifest is supplied, and in the Manifest's Identity's Dependency array is the R2API legacy manifest, it'll remove said dependency and instead add all the R2API submodule's manifests installed in the project.</p> <p>It is recommended to supply all three, but, in the case of revenant, i only need to migrate my references in the assembly definition.</p> <p></p>"},{"location":"Mod-Creation/ThunderKit/Upgrading-your-project-to-use-R2API%27s-Split-Assemblies/#step-5-what-now","title":"Step 5: What now","text":"<p>Assuming the wizard did its job, your mod has been updated to use the new split assemblies system! all you need to do now is to make sure everything's working as intended. The main class ugprader might cause some new line inconsistencies, make sure to fix these, your IDE should prompt an automatic fix.</p>"},{"location":"Mod-Creation/ThunderKit/Using-the-DOTS-framework-in-Modding/","title":"Thunderkit - Using the DOTS framework in Modding","text":"<p>The Data Oriented Technology Stack (otherwise known as the DOTS framework) is a development philososphy and technology tools designed for creating fast performant code by utilizing Data oriented programming. which allows for highly efficient and performant code.</p> <p>The DOTS framework is built on three key pillars, of which 2 are accessible and one is unknown if it can be used in modding.</p> Framework Part Description Availability ESC - Entity Component System The ECS is a framework that works on a purely data driven design, where it has Entities that populate scenes, but lack data and behaviour, components which hold the data in an Entity, and Systems, which transform the data of components in a deterministic way Unknown Burst Compiler Burst is a compiler that can be used alongside the Job system to create code that improves performance by translating your IL/.Net bytercode into native CPU code using the LLVM compiler. Available, known method via Unity and ThunderKit C# Jobs Allows you to create multithreaded code for performance intensive tasks, such as multiple transform modifications, complex mathematic operations and more. Has built in guard rails for development of safe multithreaded code Available <p>This guide will not cover how to use the Burst Compiler or how to Write C# jobs, it'll only cover how to get access to the framework on a ThunderKit context and how to compile your mod</p>"},{"location":"Mod-Creation/ThunderKit/Using-the-DOTS-framework-in-Modding/#burst-and-jobs-in-ror2","title":"Burst and Jobs in RoR2","text":"<p>Utilizing Jobs is an already by default implemented feature of the current unity version, however, We've made the mod BurstsOfRain for the purposes of extending the development potential by including extra libraries for running burst compiled Jobs and access to improved Native Collections such as Native Lists, Native Hash Maps and more.</p> <p></p> <p>Bursts of Rain is a thunderstore package that contains a lightweight assembly that can be used for loading burst-code assemblies, however, it also comes with re-distribution of specific unity DLL's that are loaded which can be used in jobs.</p> Redistributed Assembly Description Version System.Runtime Required for the collections package. Not Applicable Unity.Burst The runtime front-end of the Burst compilation system, this runs the bursted code when applicable. 1.8.18 Unity.Collections A package that contains multiple, thread safe, native collections that can be used within jobs, such as Lists, Queues, Hashmaps and more. 1.5.1 Unity.Mathematics A light-weight math library with a shader-like syntax which can be safely used within jobs. 1.2.6 <p>As a note, it is NOT recommended to install Bursts of Rain directly with the ThunderKit package manager for the following reasons:</p> <ul> <li>Unity will not recognize the redistributed unity assemblies, this is an intentional feature.</li> <li>You'll have to manually install the selected versions of Burst, Collections and Mathematics.</li> <li>The collections package has a dependency on Mono.Cecil, which makes modding difficult.</li> </ul> <p>For these reasons, this guide will cover installing Bursts of Rain using the RoR2 Thunder Burster package.</p>"},{"location":"Mod-Creation/ThunderKit/Using-the-DOTS-framework-in-Modding/#installing-ror2-thunder-burster","title":"Installing RoR2 Thunder Burster","text":"<p>It is recommended to do a full game re-import once the package is installed. to do this, select all folders within your project's Packages folder (<code>ProjectRoot/Packages</code>) except for <code>manifest.json</code> and <code>packages-lock.json</code>. and Delete the folders.</p> <p></p> <ol> <li>Go to <code>Window/Package Manager</code> to open the Unity Package Manager</li> </ol> <p></p> <ol> <li>Go to the RoR2ThunderBurster Repository. Taking a look at the website you can see a big green <code>&lt;&gt; Code</code> button. Clicking it and then clicking the copy url button will copy the link to the repository.</li> </ol> <p></p> <ol> <li>On the Package Manager window, hit the <code>+</code> button, and click the <code>Add package from Git URL...</code> option</li> </ol> <p></p> <ol> <li>Paste the git URL copied beforehand. As a side note, it is recommeneded to install only the latest tagged release from the repository. To install a specific release tag, append the Tag's name preceded by a <code>#</code> character.</li> </ol> <p>For example, to download the version 0.0.2 of RoR2 Thunder Burster to your project, you must use the git url <code>https://github.com/risk-of-thunder/RoR2ThunderBurster#0.2.2</code></p> <p></p> <ol> <li>Once installed, you may get a popup regarding missing dependencies, clicking on \"Install All\" will install all the listed packages. it may take a while for the editor to finish installing your dependencies.</li> </ol> <p></p> <ol> <li>You may stumble upon this popup once the packages are installed, click \"Ok\" to proceed. If this popup does not appear or your project ends in an invalid state, refer to the next section.</li> </ol> <p></p> <ol> <li>Open the ThunderKit settings window, and go to the import config, you may notice that a new import step for installing Bursts of Rain has appeared, reimport your game and youre ready to go.</li> </ol> <p></p>"},{"location":"Mod-Creation/ThunderKit/Using-the-DOTS-framework-in-Modding/#project-troubleshooting","title":"Project Troubleshooting","text":"<p>If you installed RoR2ThunderBurster after you've imported the game your project might end up in an unstable/unusable state, this is because the Collections package comes with an explicit dependency to Mono.Cecil, which gets installed and conflicts with our BepInEx mono.cecil assemblies. To fix this, you can do the following steps.</p> <ol> <li>Go to <code>ProjectRoot/Library/PackageCache</code> find the folder <code>com.unity.collections@1.5.1</code></li> </ol> <p></p> <ol> <li>Copy this folder and paste it on <code>ProjectRoot/Packages</code> and remove the substring <code>@1.5.1</code>, this Embeds the package into your project and can now be modified.</li> </ol> <p></p> <ol> <li>Download this Zip file, which contains modified files. Open the zip file and drag all its contents inside the <code>com.unity.collections</code> folder. Replace all files.</li> </ol> <p></p> <ol> <li>Your project should be back to an usable state, if not, ask for help in the RoR2 modding community's ThunderKit channel.</li> </ol>"},{"location":"Mod-Creation/ThunderKit/Using-the-DOTS-framework-in-Modding/#using-ror2-thunder-burster","title":"Using RoR2 Thunder Burster","text":"<p>RoR2 Thunder Burster consists of 2 new Compossable Objects added.</p> Compossable Object Compossable Type Description BurstAssemblyDefinitionsDatum Manifest Datum A subclass of the AssemblyDefinitions Manifest Datum, it's used by the following pipeline job to burst the specified assemblies using the Burst compiler. BurstStagedAssemblies Pipeline Job A custom pipeline job, that takes the main manifest's BurstAssemblyDefinitionsDatum and bursts the defined assemblies. <p>Begin by modifying your manifest and replacing it's \"Assembly Definitions\" datum for the \"Burst Assembly Definitions Datum\". You can lick on the cogwheel next to the manifest datum to remove it.</p> <p></p> <p>To burst your assemblies, add the Burst Staged Assemblies pipeline job to your build pipeline, this pipeline job should run After Stage Assemblies. It also contains a field that you must assign the previously executed Stage Assemblies job. this is used to obtain necesary metadata for the burst compiler to work.</p> <p></p> <p>Executing your pipeline will build your assembly, and then burst said assembly thru the burst compiler. The bursted assemblies will be staged on the same folder as your Assembly.</p> <p></p>"},{"location":"Mod-Creation/ThunderKit/Using-the-DOTS-framework-in-Modding/#enabling-your-assembly-ingame","title":"Enabling your assembly ingame","text":"<p>To enable your assembly ingame, add a Precompiled Assembly Reference to Bursts of Rain.</p> <p></p> <p>Somewhere during your mod's initialization routine, you can utilize the main class of Bursts of Rain for loading your bursted assembly. Here it's being done in my mod's Awake call.</p> <p></p> <p>Your bursted assembly is now loaded at runtime, and burst-compiled jobs will be used instead of their native C# jobs.</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Editor-Scripts/","title":"Editor Scripts","text":"<p>An Editor Script is a C# script that runs inside the Unity Editor, these scripts can be done to basically extend the functionality of Unity's powerful editor. An Editor script can be useful to automate an annoying part of development or improve the user experience of complex Components and Scriptable Objects.</p> <p>One such example of an Editor Script is the custom Inspector of <code>EntityStateConfiguration</code> that comes bundled with RoR2EditorKit. Thanks to this inspector, utilizing Entity State Configurations is easy and convenient, without having to manually add the fields to serialize or guess the proper string formatting for serialization.</p> <p>(Left is the default look of the <code>EntityStateConfiguration</code>, right is how it looks with RoR2EditorKit's inspector)</p> <p></p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Editor-Scripts/#glossary","title":"Glossary","text":"Term Definition Editor Script A regular C# script that contains editor related code. These are usually bundled with a separate Editor only assembly. SerializedObject a SerializedObject is a special type of class that represents a UnityEngine.Object in a serialized format. Editors and multiple editing related scripts utilizes them since it allows to represent virtually any UnityEngine.Object in a generic way. SerializedProperty A SerializedProperty is a property within a SerializedObject that contains the actual data of an Object, for example, a class with a public string field named \"myString\" has a SerializedProperty of name \"myString\" that contains the actual stored value. Serialized properties can have nested properties, such as in the case of a custom Serializable data structure. Editor An \"Editor\" is a custom class that can be inherited to create custom Inspector for objects. These objects are edited utilizing their SerializedObject representations. PropertyDrawer A custom class that Draws a GUI for a type of SerializedProperty. Editor Window An actual, dockable and movable window that can be used inside the editor, these windows can have custom scripts related to them. UIElements UIElements are a custom, special class inside unity thats used to represent user interfaces, these elements in modern versions of unity are mostly used to replace the old UI systems of unity. Its built in a very similar structure to Web Development, where UIElements can be queried utilizing the UQuery system. (CSS, JS, HTML) UXML An UXML file is a file that represents the hierarchy and layout of different UIElements. Its quite similar to HTML in web development. USS A USS file is a file that represents the visual style of UIElements inside their hierarchy and layout. Its quite similar to CSS in web development. IMGUI The traditional way of writing editor UI is via IMGUI, which means basically programming your inspectors and UI. Most editors and inspectors in unity still utilize IMGUI."},{"location":"Mod-Creation/Unity-Editor-Usage/Editor-Scripts/#creating-an-editor-assembly","title":"Creating an Editor Assembly","text":"<p>By default, any script that's within an \"Editor\" folder is considered an Editor Script, and will be added to a special assembly called \"Assembly-CSharp-Editor\". We recommend instead of utilizing the default editor assembly to create a custom Assembly Definition. More information about Assembly Definitions can be found here</p> <p>To create a new Assembly Definition, right click in the project window and select <code>Create/AssemblyDefinition</code></p> <p></p> <p>To properly configure your Assembly Definition to be used within the editor, we need to select ONLY the \"Editor\" platform under the AssemblyDefinition's <code>Platforms</code> section. Failing to do so can and will cause issues when building things such as Scripts and AssetBundles. An easy way to do this is by: 1. Untick <code>Any Platform</code> 2. Click <code>Deselect All</code> 3. Tick <code>Editor</code></p> <p></p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Editor-Scripts/#my-first-inspector","title":"My first inspector","text":"<p>We will begin by creating a custom editor for a component. this inspector will have a button that does something when clicked. for simplicity sake we will utilize IMGUI to create our UI. We begin by creating a new script inside our editor assembly, instead of making it inherit from MonoBehaviour we will make it inherit from <code>UnityEditor.Editor</code></p> <p></p> <p>The editor class has a main method we can override called <code>OnInspectorGUI</code>, the base method of this method draws the default inspector, so for our purposes we will keep the <code>base</code> call. To add our new button, we can utilize the class <code>GUILayout</code>'s method <code>Button</code>. The method returns a <code>bool</code> that determines if the button was clicked or not, so we can just use an <code>if</code> statement to run code when the button is clicked.</p> <p>The class EditorUtility contains a bunch of utility methods within the editor, we will use this to create a popup dialog that informs the user they clicked the button.</p> <p>Finally, we need to tell unity what object this editor is for, we utilize the <code>CustomEditor</code>attribute for specifying what object this editor is for.</p> <p></p> <p>Now if you inspect the specified type, you can see that its inspector window has a new button, and clicking it will display our custom dialog.</p> <p></p> <p>(Note, you can draw the default inspector at any point in time by utilizing <code>DrawDefaultInspector()</code>)</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Editor-Scripts/#useful-classes","title":"Useful Classes","text":"Class Type Description AssetDatabase The AssetDatabase represents a database of all the assets within the editor, this can be used to load specific assets, manage them, save in memory objects to assets, etc Editor The base class for any and all inspector related classes, the Editor class can be used to write custom inspectors for objects. EditorApplication A static class that represents the UnityEditor.exe instance currently open. EditorGUI Class used for writing GUI code for the editor, it utilizes Serialzied Properties and Serialized Objects, the GUI written in here does not layout automatically, for automatic layout, use the class below EditorGUILayout A class used for writing GUI code for the editor, which automatically layouts to simplify writing complex windows and inspectors. EditorGUIUtility A general utility class that contains various utility methods for the unity editor's GUI system EditorUtility A general utility class that contains various utility methods for general editor usage. EditorWindow The base class for any and all editor windows. FileUtil Class used to manipulate directories and files, which can be used to copy, move, delete assets and directories. InitializeOnLoadMethodAttribute An Attribute that can be applied to static methods, methods with this attribute will be executed every time a domain reload occurs in the editor. Useful for setting up underlying systems MonoScript Representation of a .cs file within the unity editor ObjectNames Class used to create displayable names in the editor PrefabUtility Class that contains utility methods for handling and managing prefab assets PropertyDrawer A custom class that Draws a GUI for a type of SerializedProperty. Selection A class that can be used to get the selected object or assets in the editor. SerializedObject a SerializedObject is a special type of class that represents a UnityEngine.Object in a serialized format. Editors and multiple editing related scripts utilizes them since it allows to represent virtually any UnityEngine.Object in a generic way. SerializedProperty A SerializedProperty is a property within a SerializedObject that contains the actual data of an Object, for example, a class with a public string field named \"myString\" has a SerializedProperty of name \"myString\" that contains the actual stored value. Serialized properties can have nested properties, such as in the case of a custom Serializable data structure. Undo Access to the Undo/Redo system"},{"location":"Mod-Creation/Unity-Editor-Usage/Editor-Scripts/#developing-editor-scripts-with-ror2editorkit","title":"Developing editor scripts with RoR2EditorKit","text":"<p>RoR2EditorKit is a powerful package maintained by the community that contains a robust API and utilities for helping the development of Editor related scripts. Thanks to its 5.0.0 update, RoR2EditorKit's core assembly which contains its API and main functionality does not require RoR2 to be within the editor nor ThunderKit to be installed, as such, it can be used in virtually any scenario to help your development of editor scripts. We will use this to re-create our previous inspector utilizing UIElements.</p> <p></p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Editor-Scripts/#installation","title":"Installation","text":"<ol> <li>Go to <code>Window/Package Manager</code> to open the Unity Package Manager</li> </ol> <ol> <li>Go to the RoR2EditorKit Repository. Taking a look at the website you can see a big green <code>&lt;&gt; Code</code> button. Clicking it and then clicking the copy url button will copy the link to the repository.</li> </ol> <ol> <li>On the Package Manager window, hit the <code>+</code> button, and click the <code>Add package from Git URL...</code> option</li> </ol> <ol> <li>Paste the git URL copied beforehand. As a side note, it is recommeneded to install only the latest tagged release from the repository. To install a specific release tag, append the Tag's name preceded by a <code>#</code> character.</li> </ol> <p>For example, to download the version 5.4.0 of RoR2EditorKit to your project, you must use the git url <code>https://github.com/risk-of-thunder/RoR2EditorKit.git#5.4.0</code></p> <p></p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Editor-Scripts/#creating-an-inspector-using-uielements","title":"Creating an inspector using UIElements","text":"<p>To create an inspector using UIElements we recommend utilizing the editor tool <code>UIBuilder</code>. Access to the UIBuilder can be found by clicking \"Window/UI Toolkit/UI Builder\". The manual entry for UIBuilder can be found here</p> <p></p> <p>Note that by default, UIBuilder only exposes Runtime based controls, to get access to all controls for editor usage, click the main UXML file in the hierarchy and tick \"Editor Extension Authoring\". You can also enable it by default by going to the UIToolkit Project Settings</p> <p> </p> <p>We can create the UI of our inspector by simply utilizing the \"PropertyField\" element, this element will draw the correct control for a field with the given name.</p> <p></p> <p>Something worth mentioning is that a lot of UIElements have a property called \"Binding Path\", the Binding Path is used in the editor to bind the values and states of a Serialized Property to a specific UIElement, to bind an element to a property, set \"BindingPath\" to the field's name.</p> <p></p> <p>For the button we can simply drag and drop the Button element into our UXML file.</p> <p></p> <p>You may notice that all UIElements have a section called \"Style\", the \"Style\" of the UIElement is used to modify how an element looks and well, its style. These styles can be inlined, or written as actual style classes stored inside a USS file.</p> <p></p> <p>You can now save the UXML file, which will be how our inspector is laid out and how it looks. The name of the UXML file should match the name of the inspector class youre going to create.</p> <p></p> <p>Now, we can start giving our UI a proper behaviour and have it appear as the UI of our custom inspector, while you can make your inspector inherit from <code>Editor</code>and override <code>CreateInspectorGUI</code>, unity by default does not provide any tooling for obtaining an inspector's UXML file and instantiating it. For this case, we will levrage the custom inspector setup in RoR2EditorKit. to differentiate the <code>UnityEditor.Editor</code> class from the custom subclasses in RoR2EditorKit, RoR2EditorKit calls them <code>Inspector</code>. For our specific usage which is for creating an inspector for a ScriptableObject, we will inherit from <code>VisualElementScriptableObjectInspector</code></p> <p></p> <p>Inside the class we can see we're required to implement the <code>InitializeVisualElement</code> method, RoR2EditorKit calls this method after creating an instance of your UXML file and assigning it to your inspected object, and as such, <code>templateInstanceRoot</code> represents the actual root of your UXML document. We can utilize the extension method <code>.Q</code> to quickly query and obtain a Visual Element that matches the given filters. In the following code, the Query statement tells unity to \"Find a UIElement of type 'Button' that has the name 'MyButton' and return it\".</p> <p>The <code>Button</code> element has a <code>clicked</code> event that we can use to run code when the button is clicked.</p> <p>Lastly, we need to implement an override to the <code>ValidatePath</code> method, since there can be situations where multiple UXML files have the same name, RoR2EditorKit uses this method to check if the path to an UXML file is the correct path to its inspector. The default behaviour is that it only checks if the path contains the package's name. For our use case, we can just do the same but replace the package name with a directory that's parent of our UXML file.</p> <p></p> <p>The resulting UI gives an inspector that separates the layout and look of the UI and it's functionality, And still works as the IMGUI inspector.</p> <p></p> <p>For an indepth explanation of the utilities provided by RoR2EditorKit, check this wiki page.</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Editor-Scripts/#utilizing-editor-code-within-runtime-code","title":"Utilizing editor code within Runtime code","text":"<p>You may stumble into the necesity of running Editor related code in a regular, runtime level MonoBehaviour or ScriptableObject. This scenario can be solved by utilizing conditional compilation using pre-processor directives.</p> <p>Take for example, this OnValidate method that needs to save the asset after its been modified by some user.</p> <pre><code>private void OnValidate()\n{\n    if(someCondition)\n    {\n        _hidenInInspectorValue = 0.4f;\n        //Find a way to save the above change somehow\n    }\n}\n</code></pre> <p>To ensure proper saving of our modified asset, we can utilize <code>EditorUtility.SetDirty</code>. To properly utilize this method without causing issues at build time we can encapsulate the statement inside an <code>#if UNITY_EDITOR</code> pre-processor, and fully qualify the type name <code>EditorUtility</code></p> <pre><code>private void OnValidate()\n{\n    if(someCondition)\n    {\n        _hidenInInspectorValue = 0.4f;\n#if UNITY_EDITOR\n        UnityEditor.EditorUtility.SetDirty(this);\n#endif\n    }\n}\n</code></pre> <p>Of course, it is worth mentioning that any code encapsulated by the <code>#if UNITY_EDITOR</code> statement will not be present in builds of your content.</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Editor-Scripts/#imgui-ui-in-visual-elements","title":"IMGUI UI in Visual Elements","text":"<p>Sometimes you may encounter the need to utilize IMGUI inside an UI created with Visual Elements. This can be due to some limitation of UIElements that hasnt been developed yet, or for ease of utilization of certain features such as dropdown menus.</p> <p>For situations like this, you can utilize the <code>IMGUIContainer</code> element, which is a special VisualElement that can be used to draw UI using IMGUI.</p> <pre><code>public void SetupElement(VisualElement rootElement)\n{\n    rootElement.Add(new IMGUIContainer(MyIMGUIMethod);\n}\n\nprivate void MyIMGUIMethod()\n{\n    EditorGUILayout.LabelField(\"This label was written using IMGUI!\");\n}\n</code></pre> <p>Due to limitations, you cannot use Visual Elements in an IMGUI UI</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/","title":"RoR2 Editor Kit Utilization","text":"<p>RoR2EditorKit is a powerful package maintained by the community that contains a robust API and utilities for helping the development of Editor related scripts. Thanks to its 5.0.0 update, RoR2EditorKit's core assembly which contains its API and main functionality does not require RoR2 to be within the editor nor ThunderKit to be installed, as such, it can be used in virtually any scenario to help your development of editor scripts.</p> <p>This guide will cover common utilizations and tips with working with the API for your editor scripts.</p> <p></p>"},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#installation","title":"Installation","text":"<ol> <li>Go to <code>Window/Package Manager</code> to open the Unity Package Manager</li> </ol> <ol> <li>Go to the RoR2EditorKit Repository. Taking a look at the website you can see a big green <code>&lt;&gt; Code</code> button. Clicking it and then clicking the copy url button will copy the link to the repository.</li> </ol> <ol> <li>On the Package Manager window, hit the <code>+</code> button, and click the <code>Add package from Git URL...</code> option</li> </ol> <ol> <li>Paste the git URL copied beforehand. As a side note, it is recommeneded to install only the latest tagged release from the repository. To install a specific release tag, append the Tag's name preceded by a <code>#</code> character.</li> </ol> <p>For example, to download the version 5.4.0 of RoR2EditorKit to your project, you must use the git url <code>https://github.com/risk-of-thunder/RoR2EditorKit.git#5.4.0</code></p> <p></p>"},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#assembly-structure","title":"Assembly structure","text":"<p>The RoR2EditorKit package consists of 4 main assemblies.</p> Assembly Name Features Core The core RoR2EditorKit assembly, it contains all the infrasturcture, framework and APIs for developing editor scripts, this assembly has no dependencies outside of the Editor Coroutines dependency, which gets installed atuomatically when you first install RoR2EditorKit. R2API Support A smaller assembly that contains editor related utilities when specific R2API assemblies are installed, such as support for proper DirectorAPI stage serialization and the AddressReferencedAsset system RoR2 The secondary assembly which contains all editor related utilities for RoR2 specifically, It mainly features inspectors, property drawers and windows. ThunderKit A smaller assembly that contains editor related utilities when ThunderKit is installed. <p>Due to the nature of these assemblies, they only get enabled and compiled when specific requirements are met (IE: the ThunderKit assembly only enables if ThunderKit is Installed)</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#ror2editorkits-base-editors","title":"RoR2EditorKit's base Editors","text":"<p>RoR2EditorKit comes bundled with a total of 7 inspector subclasses. These are the inspectors sorted in a hierarchy</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#inspector-t-unityengineobject","title":"Inspector&gt; (T : UnityEngine.Object) <p>The <code>Inspector&lt;T&gt;</code> is the base class for any and all of RoR2EditorKit's editors, the package uses the word \"Inspector\" to refer to any <code>UnityEditor.Editor</code> for distinction purposes.</p> <p>Features:</p> <ul> <li>Access to a EditorSettingCollection for the inspector for both Project and Preference settings</li> <li>A way to both enable and disable said inspector, enabling and disabling inspectors is one of the key features of RoR2EditorKit. When an inspector is disabled it uses the default inspector.</li> <li>Generic callbacks when the inspector is enabled or disabled</li> <li>Easy access to a root VisualElement</li> <li>Access to the edited object, casted to  <li>Easy access for creating and setting Editor Settings.</li>  <p>If youre going to inherit from the Inspector class, you'll need to implement a way for the end user to enable or disable your custom inspector. alongside implementing your own UI utilizing the <code>CreateInspectorUI</code></p>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#scriptableobjectinspector-t-scriptableobject","title":"ScriptableObjectInspector&gt; (T : ScriptableObject) <p>The <code>ScriptableObjectInspector&lt;T&gt;</code> inherits from <code>Inspector&lt;T&gt;</code> and its used for creating an Inspector for a Scriptable Object.</p> <p>Features:</p> <ul> <li>Implements a toggle for enabling and disabling the inspector, this toggle is placed on the Header of the inspector.</li> </ul> <p>You'll still need to implement your UI manually, or alternatively, inherit from either of the 2 following inspector types.</p>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#imguiscriptableobjectinspector-t-scriptableobject","title":"IMGUIScriptableObjectInspector&gt; (T : ScriptableObject) <p>The <code>IMGUIScriptableObjectInspector&lt;T&gt;</code> inherits from <code>ScriptableObjectInspector&lt;T&gt;</code> and its used for creating an Inspector for a ScriptableObject using IMGUI.</p> <p>Features:</p> <ul> <li>Handles the creation of an IMGUIContainer which will be used to render your UI</li> </ul> <p>You can implement your IMGUI UI inside the <code>DrawIMGUI()</code> method.</p>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#visualelementscriptableobjectinspector-t-scriptableobject","title":"VisualElementScriptableObjectInspector&gt; (T: ScriptableObject) <p>The <code>VisualElementScriptableObjectInspector&lt;T&gt;</code> inherits from <code>ScriptableObjectInspector&lt;T&gt;</code> and its used for creating an Inspector for a ScriptableObject using Visual Elements.</p> <p>Features:</p> <ul> <li>Automatically obtains an UXML instance based off the inspector's name, this UXML instance will be used as the actual UI, which then the inspector passes to an abstract method for initialization.</li> <li>A method that you can override to validate if a specified path corresponds to your inspector.</li> </ul>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#componentinspector-t-component","title":"ComponentInspector&gt; (T : Component) <p>The <code>ComponentInspector&lt;T&gt;</code> inherits from <code>Inspector&lt;T&gt;</code> and its used for creating an Inspector for a Component or MonoBehaviour.</p> <p>Features:</p> <ul> <li>Implements a toggle for enabling and disabling the inspector, this toggle is placed right at the beginning of the component's inspector UI</li> </ul> <p>You'll still need to implement your UI manually, or alternatively, inherit from either of the 2 following inspector types.</p>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#imguicomponentinspector-t-component","title":"IMGUIComponentInspector&gt; (T : Component) <p>The <code>IMGUIComponentInspector&lt;T&gt;</code> inherits from <code>ComponentInspector&lt;T&gt;</code> and its used for creating an Inspector for a Component or MonoBehaviour using IMGUI.</p> <p>Features:</p> <ul> <li>Handles the creation of an IMGUIContainer which will be used to render your UI</li> </ul> <p>You can implement your IMGUI UI inside the <code>DrawIMGUI()</code> method.</p>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#visualelementcomponentinspector-t-component","title":"VisualElementComponentInspector&gt; (T : Component) <p>The <code>VisualElementComponentInspector&lt;T&gt;</code> inherits from <code>ComponentInspector&lt;T&gt;</code> and its used for creating an Inspector for a Component or MonoBehaviour using Visual Elements.</p> <p>Features:</p> <ul> <li>Automatically obtains an UXML instance based off the inspector's name, this UXML instance will be used as the actual UI, which then the inspector passes to an abstract method for initialization.</li> <li>A method that you can override to validate if a specified path corresponds to your inspector.</li> </ul>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#ror2editorkits-base-property-drawers","title":"RoR2EditorKit's base Property Drawers","text":"<p>RoR2EditorKit comes bundled with a total of 3 PropertyDrawer subclasses. These are the PropertyDrawer sorted in a hierarchy</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#extendedpropertydrawer","title":"ExtendedPropertyDrawer&gt; <p>The <code>ExtendedPropertyDrawer&lt;T&gt;</code> is the base class for any and all of RoR2EditorKit's PropertyDrawers.</p> <p>The TypeParam  can be used to specify what kind of value this PropertyDrawer is Drawing. For example, you can use  to specify that the Property drawer draws a Variant Skill Def. Or you can use  to specify the PropertyDrawer is used for drawing a PropertyAttribute (IE: [Range]) <p>Features:</p> <ul> <li>Access to a EditorSettingCollection for the PropertyDrawer for both Project and Preference settings</li> <li>Easy access to the Data youre drawing by using the <code>propertyDrawerData</code> property.</li> <li>Easy access for creating and setting Editor Settings.</li> </ul>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#imguipropertydrawer","title":"IMGUIPropertyDrawer&gt; <p>The <code>IMGUIPropertyDrawer&lt;T&gt;</code> inherits from <code>ExtendedPropertyDrawer&lt;T&gt;</code>and its used for drawing Property Drawers using IMGUI.</p> <p>Features:</p> <ul> <li>Utility methods for drawing properties using the non automatic layout GUI system</li> </ul> <p>Due to the nature of IMGUI in PropertyDrawers, you cannot use <code>EditorGUILayout</code> for drawing IMGUI, you'll need to use <code>EditorGUI</code> instead.</p>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#visualelementpropertydrawer","title":"VisualElementPropertyDrawer&gt; <p>The <code>VisualElementPropertyDrawer&lt;T&gt;</code> inherits from <code>ExtendedPropertyDrawer&lt;T&gt;</code> and its used for creating a PropertyDrawer using Visual Elements</p> <p>Features:</p> <ul> <li>Automatically obtains an UXML instance based off the PropertyDrawer's name, this UXML instance will be used as the actual UI, which then the PropertyDrawer passes to an abstract method for initialization.</li> <li>A method that you can override to validate if a specified path corresponds to your PropertyDrawer.</li> </ul>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#ror2editorkits-base-editorwindows","title":"RoR2EditorKit's base EditorWindows","text":"<p>RoR2EditorKit comes bundled with a total of 5 EditorWindow subclasses. These are the EditorWindow  sorted in a hierarchy</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#extendededitorwindow","title":"ExtendedEditorWindow <p>The <code>ExtendedEditorWindow</code> is the base class for any and all of RoR2EditorKit's Editor Windows.</p> <p>Features:</p> <ul> <li>Access to a EditorSettingCollection for the Window for both Project and Preference settings</li> <li>Implementation of Serialized Object binding for ease of creation of UI</li> <li>Generic callbacks for Serialized Object manipulation</li> <li>Custom Open method for assigning the Serialized Object</li> <li>Easy access for creating and setting Editor Settings.</li> </ul> <p>If youre going to inherit from the ExtendedEditorWindow class, you'll need to implement your own UI utilizing the <code>CreateGUI</code> method</p>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#objecteditingeditorwindow-t-unityengineobject","title":"ObjectEditingEditorWindow&gt; (T : UnityEngine.Object) <p>The <code>ObjectEditingEditorWindow&lt;T&gt;</code> inherits from <code>ExtendedEditorWindow&lt;T&gt;</code> and it's used for creating an Editor Window for editing a single object.</p> <p>This type is especially useful for creating a complex UI for editing the specified object and making said editing experience better for the end user</p> <p>Features: * Direct access to the editing object by using the <code>targetType</code> attribute.</p>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#imguiobjecteditingeditorwindow-t-unityengineobject","title":"IMGUIObjectEditingEditorWindow&gt; (T : UnityEngine.Object) <p>The <code>IMGUIObjectEditingEditorWindow&lt;T&gt;</code> inherits from <code>ObjectEditingEditorWindow&lt;T&gt;</code> and it's used for creating an Editor Window for editing a single object using IMGUI</p> <p>Features:</p> <ul> <li>Allows the creation of the UI using only IMGUI</li> </ul>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#visualelementobjecteditingeditorwindow-t-unityengineobject","title":"VisualElementObjectEditingEditorWindow&gt; (T : UnityEngine.Object) <p>The <code>VisualElementObjectEditingEditorWindow&lt;T&gt;</code> inherits from <code>ObjectEditingEditorWindow&lt;T&gt;</code> and it's used for creating an Editor Window for editing a single object using Visual Elements</p> <p>Features:</p> <ul> <li>Automatically obtains an UXML instance based off the EditorWindow's name, this UXML instance will be used as the actual UI, which then the EditorWindow passes to an abstract method for initialization.</li> <li>A method that you can override to validate if a specified path corresponds to your EditorWindow.</li> </ul>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#editorwizardwindow","title":"EditorWizardWindow <p>The <code>EditorWizardWindow</code> inherits from <code>ExtendedEditorWindow</code> and its used for creating complex wizard setups for aiding the end user in development of assets in a semi-asynchronous fashion utilizing Coroutines.</p> <p>Unlike <code>ObjectEditingEditorWindow</code>s, an EditorWizardWindow works exclusively with Visual Elements, albeit IMGUI can still be used by using <code>IMGUIContainers</code></p> <p>Features:</p> <ul> <li>A Header, Center and Footer pre-created by RoR2EditorKit that displays the wizard's name, your UI content, and buttons for closing and running the wizard</li> <li>A Progress bar that can be used to accurately display the progress of the wizard</li> <li>Automatically obtains an UXML instance based off the EditorWizardWindow's name, this UXML instance will be used as the actual UI, which then the EditorWizardWindow passes to an abstract method for initialization.</li> <li>Robust implementation of asynchronous code utilizing Coroutines thanks to the <code>EditorCoroutines</code> package.</li> </ul> <p>Alongside the EditorWizardWindow, RoR2EditorKit comes with the WizardCoroutineHelper, which is used to maintain complex, step-based wizard setups (Coroutine for writing text to a file, then a secondary step that does something with said file)</p>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#the-editor-setting-system","title":"The Editor Setting system","text":"<p>One of the Key Features of RoR2EditorKit is its robust Settings system, the Editor Setting System allows you to save metadata to specific files that contains settings related to misc Types within the editor. Thanks to a powerful string based serialization system, the Editor Settings system can serialize a multitude of types, such as Strings, integer, chars, colours, animation curves, etc.</p> <p></p> <p>All of the previously mentioned systems (Inspectors, Editor Windows and PropertyDrawers) have access to the EditorSetting system by either using the properties <code>xProjectSettings</code> or <code>xPreferenceSettings</code></p> <p>By default, RoR2 Editor Kit comes with 2 types of Editor Settings.</p> Editor Setting Type Description Project Settings Located within your specified project, these settings are bound exclusively within the project itself, and are not shared between project instances. Preference Settings These settings are bound to your machine, and are used across different instances of RoR2EditorKit, a key example is that inspectors being enabled or disabled are considered a \"Preference\" setting, this way, user A can have the inspector enabled while user B can have it disabled. <p>The Editor Settings system is split in 4 key types.</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#editorsettingcollection","title":"EditorSettingCollection <p>The <code>EditorSettingCollection</code> is a serializable class which as the name suggests, represents a collection of Editor Settings for a specified Type. A SettingCollection will always have an owner variable which is obtained from the <code>System.Type</code> that requested the creation of it, albeit in some scenarios the Type could not exist in the project (IE: Its a preference setting from a type thats not present in the current project)</p> <p>It contains methods for Obtaining or Creating new settings utilizing <code>GetOrCreateSetting</code>, alongside simply assigning setting values and saving the settings.</p> <p>Editor Setting Collections are stored in what are called <code>IEditorSettingProvider</code>s.</p>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#ieditorsettingprovider","title":"IEditorSettingProvider <p>The <code>IEditorSettingProvider</code> is an interface that can be implemented in an object to mark it as a provider of Editor Settings. It contains the following members to implement:</p> <ul> <li>A <code>List&lt;EditorSettingCollection&gt;</code>, which are the actual settings stored by the provider.</li> <li>A <code>string</code> property, which is used to represent the provider with a unique identifier name.</li> <li>A <code>void SaveSettings()</code> method, which is used to save the settings for the provider to disk.</li> </ul> <p>RoR2EditorKit comes bundled with two providers, the Project and Preference settings. These are ScriptableSingletons. for more information on scriptable singletons, refer to this page.</p> <p>IEditorSettingProviders can be obtained by using the <code>EditorSettingManager</code></p>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#editor-setting-manager","title":"Editor Setting Manager <p>The <code>EditorSettingManager</code>is a static class that manages providers and works as a front-end for obtaining <code>EditorSettingCollection</code>s.</p> <p>It contains methods for getting or creating new instances of EditorSettingCollections for specified <code>System.Type</code> and can be stored in specified Providers. Providers can be specified by either an Enum to represent the default Providers that come bundled with RoR2EditorKit, or via a string for custom providers.</p> <p>The manager also exposes methods for Resetting and Removing entire editor setting collections, or even resetting entire providers. Careful utilization of these methods must be used as you can easily wipe preference settings by mistake.</p>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#implementing-a-custom-editorsettingprovider","title":"Implementing a custom EditorSettingProvider <p>This part will cover how to implement your own EditorSettingProvider to the manager. below is an example of one using a ScriptableSingleton.</p> <pre><code>public sealed class CustomEditorSettings : ScriptableSingleton&lt;CustomEditorSettings &gt;, EditorSettingManager.IEditorSettingProvider\n{\n    [SerializeField]\n    private List&lt;EditorSettingCollection&gt; _projectSettings = new List&lt;EditorSettingCollection&gt;();\n\n    List&lt;EditorSettingCollection&gt; EditorSettingManager.IEditorSettingProvider.editorSettings =&gt; _projectSettings;\n    string EditorSettingManager.IEditorSettingProvider.providerName =&gt; nameof(CustomEditorSettings);\n    public void SaveSettings() =&gt; Save(true);\n\n    private void Awake()\n    {\n        EditorApplication.quitting += EditorApplication_quitting;\n    }\n\n    private void EditorApplication_quitting()\n    {\n        Save(true);\n    }\n\n    private void OnDestroy()\n    {\n        EditorApplication.quitting -= EditorApplication_quitting;\n    }\n\n    [InitializeOnLoadMethod]\n    private static void Init()\n    {\n        EditorSettingManager.RegisterProvider(instance, () =&gt; instance);\n    }\n}\n</code></pre> <p>Some things to note:</p> <ul> <li>The InitializeOnLoad decorated attribute is used for initializing and adding the instance of the ScriptableSingleton to the EditorSettingManager. which is how you can expose your provider to the system.</li> <li>For a ScriptableSingleton to work properly in the editor you need to decorate the class with a <code>[FilePath]</code> attribute, more information about this attribute can be found here</li> </ul>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#implementing-an-ui-for-a-provider","title":"Implementing an UI for a provider <p>You can utilize the <code>EditorSettingsElement</code> to expose a provider's editor settings, this can be achieved by using the following constructor</p> <p><code>new EditorSettingsElement((EditorSettingManager.IEditorSettingProvider)settings));</code></p> <p>Afterwards adding the element to any Visual Element will display the provider's settings in a UI</p>","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/RoR2-Editor-Kit-Utilization/#ror2editorkit-useful-classes","title":"RoR2EditorKit Useful Classes","text":"<p>The core library of RoR2EditorKit comes bundled with multiple classes that can aid in the development of editor scripts.</p> Class Type Description AssetDatabaseUtil Contains utility methods for interacting with the AssetDatabase, such as directly obtaining an asset's guid, directly loading an asset via its GUID, Finding Assets AssetGUID A struct that is used for encapsulating an Asset via its GUID, useful for keeping constants of assets. these assets can then be loaded using the implicit casting operators. ElementContextMenuHelper A static class that works as an extension for Visual Elements, it allows you to easily add context menus to any element that are visible via an icon that's added alongside the element. IMGUIUtil A static class that contains methods for drawing controls using IMGUI in an automatic layout context, it contains methods like drawing a property with a check system, and drawing field based on their type. It also exposes a method for drawing a field for an EditorSetting inside a collection. IOUtils Contains utility methods for interacting with Paths, such as ensuring directories, obtaining currently selected directories and manipulating paths. R2EKMath A simple math class used for arithmetic operations, including the ability to round vectors to the nearest grid value rounding vectors and a remap function ReflectionUtils A static class which contains reflection utilities. SerializableShaderWrapper A class used for serializing Shader objects as shader name or guid. SerializationMediator A front-end facade for the Serialization system within RoR2EditorKit, it can be used to match the game's serialization methods for usage on runtime solutions. An optional safety bypass exists as a sub-class which should only be used for Editor related solutions. VisualoElementEditorSettingHelper A static class that works as an extension for Visual Elements, it allows you to directly connect a VisualElement to an Editor Setting. When the value of the Visual Element changes, the value within the editor setting changes as well. VisualElementTemplateDictionary A ScriptableSingleton that contains a dictionary of string to Visual Element Tempaltes, you can use this to find a UXML Template by name VisualElementUtil A static class containing a plethora of extension utilities used for Visual Elements"},{"location":"Mod-Creation/Unity-Editor-Usage/Using-MonoBehaviour-Scripts-in-Editor/","title":"Using MonoBehaviour Scripts in Editor","text":"<p>MonoBehaviours are components that are attached to Unity GameObjects and perform various functions. See our article about them here, and see Unity documentation about them here</p> <p>MonoBehaviours are most commonly used in prefabs, created in the Unity Editor. From here, this article will assume you know how to create prefabs, attach scripts to them, and build those prefabs into assetbundles. See here to learn how to load those assetbundles into your mod.</p> <p>If you are creating and loading prefabs for use in your mod, you have the ability to attach any of the game's MonoBehaviours, and any custom MonoBehaviours that you want to write as well. Refer to the respective sections on how to do each.</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Using-MonoBehaviour-Scripts-in-Editor/#using-ror2-monobehaviours","title":"Using RoR2 MonoBehaviours","text":""},{"location":"Mod-Creation/Unity-Editor-Usage/Using-MonoBehaviour-Scripts-in-Editor/#option-0-addcomponent","title":"Option 0: AddComponent","text":"<p>Possibly the simplest way is to skip the editor and simply call AddComponent in your code at runtime.</p> <p>This works perfectly fine, but does not scale, and doesn't take advantage of the editor. It can easily become tedious to the point of limiting.</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Using-MonoBehaviour-Scripts-in-Editor/#option-1-dummy-scripts","title":"Option 1: Dummy Scripts","text":"<p>Preferred if you are only using a few scripts</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Using-MonoBehaviour-Scripts-in-Editor/#steps","title":"Steps","text":"<ol> <li>Create a script with the same name as an existing RoR2 script.</li> <li>Open this script, and make sure it has the same namespace as the in-game script you want to use.</li> <li>Copy over any Serialized Fields in the script that you want to use in editor.<ul> <li>For example, for the class <code>RagdollController</code>, a script like this will suffice: <pre><code>namespace RoR2 \n{\n    public class RagdollController : MonoBehaviour\n    {\n        public Transform[] bones;\n\n        public MonoBehaviour[] componentsToDisableOnRagdoll;\n    }\n}\n</code></pre></li> </ul> </li> <li>You can now attach it to your prefab and assign fields in editor. When built into an assetbundle and loaded into the game, RoR2 will recognize this script as its own.</li> </ol> <p>That's it. pretty simple, but this doesn't really scale. You will have to do this with every script you want to use in editor. Consider the next option if you want to use many RoR2 scripts.</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Using-MonoBehaviour-Scripts-in-Editor/#option-2-importing-all-ror2-scripts","title":"Option 2: Importing all RoR2 scripts","text":"<p>Preferred if you are using many RoR2 scripts, namely if you are creating projectiles.</p> <p>If you are currently creating your mod in code, and only using Unity to build assetbundles, you can gain access to all of the RoR2 components by importing the game into your project.  </p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Using-MonoBehaviour-Scripts-in-Editor/#notes","title":"Notes","text":"<ul> <li>This process uses Thunderkit, as it was built to do this, however you don't have to fully move to the thunderkit workflow of creating mods. You can continue creating your mod in code, and building your assetbundle as before.</li> <li>This will take some setup, but if you are using components a lot, and if you want to work with projectiles, it is definitely worth it.</li> <li>If you are creating a character using the Henry Template, refer to this article.  </li> </ul>"},{"location":"Mod-Creation/Unity-Editor-Usage/Using-MonoBehaviour-Scripts-in-Editor/#steps_1","title":"Steps","text":"<ol> <li>See this guide all about how to create mods with thunderkit</li> <li>Skip to steps 4 and 5 if you're not pursuing a full thunderkit setup. More on this below.</li> <li>If you're building your mod in code, you may disable the following steps in the import process:<ul> <li>MMHook Generator</li> <li>Ensure RoR2 Thunderstore Source</li> <li>Install Bepinex</li> <li>R2API Submodule Installer</li> <li>Install RoR2MultiplayerHLAPI</li> </ul> </li> </ol>"},{"location":"Mod-Creation/Unity-Editor-Usage/Using-MonoBehaviour-Scripts-in-Editor/#if-you-are-working-with-other-people-or-in-any-case-uploading-your-mod-on-github-make-sure-you-gitignore-the-ror2-package-otherwise-you-are-redistributing-game-assets-and-thats-a-big-no-no","title":"If you are working with other people or in any case uploading your mod on github, make sure you .gitignore the RoR2 package. Otherwise, you are redistributing game assets and that's a big no-no.","text":"<p>Add this to the .gitignore: <pre><code>#RoR2 Packages Folder\nPackages/Risk of Rain 2\n#ThunderKit root folder &amp; Logs\nThunderKit/\nAssets/ThunderKitSettings/Logs/\n</code></pre></p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Using-MonoBehaviour-Scripts-in-Editor/#option-3-just-use-thunderkit","title":"Option 3: Just Use Thunderkit","text":"<p>If you are more Unity-minded, Thunderkit is a mod creating workflow where everything is in editor.</p> <p>All objects, code, and mod creation happens in one place and you can simply attach any scripts as normal, RoR2 or custom, so you may be interested in that. However, it is not recommended for beginners, as it requires familiarity with Unity, ror2, and thunderkit itself.  </p> <p>See here to get started, and if you run into any issues pursuing this, reach out in the modding discord.</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Using-MonoBehaviour-Scripts-in-Editor/#using-custom-monobehaviours","title":"Using Custom MonoBehaviours","text":"<p>If you try to write a component, attach it to your prefab, and build your bundle, the game will not recognize it. There are a few options to accomplish this</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Using-MonoBehaviour-Scripts-in-Editor/#option-0-addcomponent_1","title":"Option 0: AddComponent","text":"<p>Possibly the simplest way is to skip the editor and simply call AddComponent in your code at runtime.</p> <p>This works perfectly fine, but does not scale, and doesn't take advantage of the editor. It can easily become tedious to the point of limiting.</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Using-MonoBehaviour-Scripts-in-Editor/#option-1-dummy-scripts_1","title":"Option 1: Dummy Scripts","text":"<ol> <li>Create a script with the same name and namespace as your MonoBehaviour class in your mod<ul> <li>You can likely just copy the whole code over, but if you can't, you only need the class name and any serialized fields you want to use in editor.</li> </ul> </li> <li>Put this script in a folder in your Unity project</li> <li>Right click and create an Assembly Definition in this folder, with the same name as the .csproj of your mod</li> </ol> <p>Now you can attach this script to your prefab and the game will recognize it. Have fun assigning things in the inspector instead of having to call AddComponent a million times!</p> <p>Note: If your code runs into errors because it references other RoR2 code, you will have to have that code in your project as well. Follow the RoR2 section above to find out how to do this.</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Using-MonoBehaviour-Scripts-in-Editor/#option-2-whole-assembly-in-unity","title":"Option 2: Whole Assembly in Unity","text":"<p>You can just take your whole mod dll and slap it in your Unity project. To do this, you will need to use Thunderkit to add RoR2 and all other dependencies of your mod to your Unity project.</p> <p>In my experience, this just ended up slowing down my development, compared to Option 1. If you are considering this option because you are using a ton of components, it may be time to pursue a thunderkit setup</p>"},{"location":"Mod-Creation/Unity-Editor-Usage/Using-MonoBehaviour-Scripts-in-Editor/#option-3-just-use-thunderkit_1","title":"Option 3: Just Use Thunderkit","text":"<p>If you are more Unity-minded, Thunderkit is a mod creating workflow where everything is in editor.</p> <p>All objects, code, and mod creation happens in one place and you can simply attach any scripts as normal, RoR2 or custom, so you may be interested in that. However, it is not recommended for beginners, as it requires familiarity with Unity, ror2, and thunderkit itself.  </p> <p>See here to get started, and if you run into any issues pursuing this, reach out in the modding discord.</p>"},{"location":"Mod-Creation/Updating-Your-Mods/For-Seekers-of-the-Storm/","title":"For Seekers of the Storm","text":"<p>report on discord here if you find anything else, please and thanks</p>"},{"location":"Mod-Creation/Updating-Your-Mods/For-Seekers-of-the-Storm/#general","title":"General","text":""},{"location":"Mod-Creation/Updating-Your-Mods/For-Seekers-of-the-Storm/#before-updating-libraries","title":"Before Updating Libraries","text":"<p>there is a namespace that begins <code>Assets.RoR2</code></p> <p>if you have a class named <code>Assets</code> (all henry survivors will), code attempting to call this class will be intercepted by that namespace. Before updating. Rename <code>Assets</code> class to  just <code>Asset</code> or <code>ModAssets</code> or something</p>"},{"location":"Mod-Creation/Updating-Your-Mods/For-Seekers-of-the-Storm/#update-your-projects","title":"Update Your Projects","text":"<ul> <li>in visual studio, right click your csproj &gt; properties &gt; General &gt; set Target Framework to 2.1 if it isn't already</li> <li>I'm copypasting this to update my nuget libraries If you need to find the latest yourself, RiskOfRain2.GameLibs is here and MMHook is here. <pre><code>        &lt;PackageReference Include=\"BepInEx.Core\" Version=\"5.*\" /&gt;\n        &lt;PackageReference Include=\"RiskOfRain2.GameLibs\" Version=\"1.3.6-r.0\" /&gt;\n        &lt;PackageReference Include=\"UnityEngine.Modules\" Version=\"2021.3.33\" /&gt;\n        &lt;PackageReference Include=\"MMHOOK.RoR2\" Version=\"2024.12.10\"&gt;\n            &lt;NoWarn&gt;NU1701&lt;/NoWarn&gt;\n        &lt;/PackageReference&gt;\n</code></pre></li> <li>update your unity project to version 2021.3.33</li> <li>update your wwise project to v2023.1.4.8496 and rebuild your soundbanks</li> <li>I had issues loading the soundbank through code, so I just cut that code and renamed my soundbank from .bnk to .sound and let r2api do it</li> <li>if your weaver doesn't weave, make sure your post build is targeting the right destination (2.1 folder instead of 2.0) and throw this dll in your libs folder haha woops who put that there </li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/For-Seekers-of-the-Storm/#code-changes","title":"Code Changes","text":"<ul> <li><code>TemporaryOverlay</code> changed to <code>TemporaryOverlayInstance</code></li> <li>instead of <code>TemporaryOverlay overlay = someModelGameObject.AddComponent&lt;TemporaryOverlay&gt;();</code><ul> <li><code>TemporaryOverlayInstance temporaryOverlayInstance = TemporaryOverlayManager.AddOverlay(someModelGameObject);</code></li> </ul> </li> <li>rest of the fields are generally the same, sans <code>AddToCharacerModel</code> being corrected</li> <li>instead of destroying the component, now do <code>if(temporaryOverlayInstance != null) temporaryOverlayInstance.Destroy()</code></li> <li>Achievements now give lunar coins. <code>RegisterAchievementAttribute</code> now has a field for lunar coin rewards</li> <li>mastery skins give 10</li> <li>some skill achievements give 3, some 5. check the game's achievements for more examples</li> <li>On that, UnlockableAPI hasn't been updated to work with this. I believe it's ripperino for that. you should update your achievements to just use the registerachievementattribute. Henry Tutorial has a good way of doing this.</li> <li>a lot of catalog.init functions have been changed to be coroutines returning <code>IEnumerator</code> instead of <code>void</code>. do <code>yield return Orig()</code> instead of just <code>orig()</code></li> <li><code>DamageType</code> changed to <code>DamageTypeCombo</code> (due to the addition of <code>DamageTypeExtended</code> and <code>DamageSource</code>)</li> <li>All character's instances of damage from skills must be updated to include the proper <code>DamageSource</code>, or certain items like Breaching Fin will not work</li> <li>This doesn't affect r2api damageapi. That should be working the same. If you are seeing issues with that, report them.</li> <li><code>BulletAttack.BulletHit</code> is pooled now. If, for whatever reason, you were instantiating any directly (with e.g. = default(BulletHit)), it'll now cause some weird NREs -- capable of, among other things, completely killing the BepInEx logger if you try to log it directly. </li> <li>This needs to be replaced with BulletAttack.GetBulletHit(), and probably something to clear the pool manually later if you aren't doing stuff during existing BulletAttack code</li> <li>function <code>GenericSkill.OnFixedUpdate</code> now has a <code>float deltaTime</code> parameter</li> <li><code>EntityStateCatalog.InstantiateState</code> now needs <code>ref</code> before the <code>SerializableEntityStateType</code> parameter</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/For-Seekers-of-the-Storm/#character-stuff","title":"Character Stuff","text":"<ul> <li>some Effects and ProjectileGhosts are pooled now. </li> <li>if your projectiles aren't set up for this, I just did a <code>projectileController.ghostPrefab.AddComponent&lt;VFXAttributes&gt;().DoNotPool = true;</code> to avoid it for now</li> <li>I would highly suggest looking into adding an <code>EffectManagerHelper</code> component to pool your effects. pool is cool. I will update this with more detail when I do it myself</li> <li>if you set up your <code>KinematicCharacterController</code> yourself, set the <code>playerCharacter</code> value to true for survivors.</li> <li>Henry clones commando's body for his setup so you're likely not to need to</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/For-Seekers-of-the-Storm/#misc","title":"Misc","text":"<ul> <li>If your mod is translated, in addition to <code>es-ES</code> for Spanish (Spain), there is now <code>es-419</code> for Spanish (Mexico)</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/For-Seekers-of-the-Storm/#how-to-upgrade-a-20194-thunderkit-project-to-2021333","title":"How to upgrade a 2019.4 Thunderkit project to 2021.3.33","text":"<ol> <li>Create a new branch for the upgrade process, you'll want this in case you fuck something up.</li> <li>Open your project on the 2019.4 version of unity</li> <li>Ensure no errors are present, push your commit to your new branch</li> <li>proceed to open your project on 2021.3 <code>If you get a message regarding the project having compilation errors and wanting to init the project in safe mode, do not enter safe mode, it disables thunderkit and we'll need it to reimport the game.</code></li> <li>Once your project is open, close it and browse to your \"Packages\" folder on the project root</li> <li>Open your <code>manifest.json</code> file.</li> <li>Update any and all GIT dependencies on your project. bellow are the current latest versions of the common git projects used for modding  <ul> <li>ThunderKit - 9.0.0 or Greater  </li> <li>Risk of thunder multiplayer HLAPI  </li> <li>1.1.1 or Greater  </li> <li>RoR2EditorKit - 5.2.1 or Greater  </li> <li>RoR2ImportExtensions - 1.7.0  </li> <li>MSU - 2.0.0 or Greater (if used)</li> </ul> </li> <li>On the same folder where the manifest.json is located, delete the packages-lock.json file.</li> <li>Once this is done, select every folder inside \"Packages\" and delete them, we're going to reimport the game.</li> <li>Open the Project, you may get prompted to initialize R2EK, up to you if you initialize it now or later.</li> <li>on your \"ThunderKitSettings\" folder, delete the following if present:<ul> <li>MaterialEditorSettings</li> <li>R2EditorSettings</li> <li>RoR2EditorKitSettings</li> <li>ShaderDictionary</li> </ul> </li> <li> <p>Open your Thunderkit settings window, configure your import configuration and import.</p> <ul> <li>If using MSU, make sure that the WWise BlackLister is ENABLED, this will save us time for later</li> </ul> </li> <li> <p>Post import, if youre using WWIse, follow the following lettered steps, otherwise, skip to 14     a. If using the WWIse integration, you'll want to delete the WWise assemblies imported by the game, which are the following:</p> <pre><code>  * Ak.Wwise.API.WAAPI\n  * AK.Wwise.Unity.API\n  * AK.Wwise.Unity.API.WwiseTypes\n  * AK.Wwise.Unity.MonoBehaviour\n  * AK.Wwise.Unity.Timeline\n  * Note: if you where using MSU and you had the wwise blacklister enabled, these assemblies where already ommited during import process.\n</code></pre> <p>b. Once you ensure only the WWise AssemblyDef and WWise Editor assembly defs are present, fix any and all compilation issues. c. Once your project is free of compilation issues, travel to your mod's AssemblyDef, if the \"useGuids\" option on the assembly definition references is toggled, untoggle it. d. Open your assemblyDef on a text editor, make sure the strings inside the \"references\" array has the following entries. do not remove \"Wwise\", as otherwise the integration step update will fail       * \"Ak.Wwise.Api.WAAPI\",       * \"AK.Wwise.Unity.API\",       * \"AK.Wwise.Unity.API.WwiseTypes\",       * \"AK.Wwise.Unity.MonoBehaviour\",       * \"AK.Wwise.Unity.Timeline\" e. Once you've ensured no errors remain, close your project and open the wwise launcher. f. ensure you have version <code>2023.1.4.8496</code> of Wwise installed. g. on the \"Recent unity projects\" tab, locate your project, clik \"Upgrade WWise in project\" h. Ensure the settings are correct, and then click \"Upgrade\" (or integrate, i forgot the exact word) i. The wwise launcher will proceed to upgrade your project to 2023.1.4 version of wwise, this will also keep any script references to your project's assets. Its important that there where no compilation errors because otherwise WWise fails to integrate. j. Once you finish integration, click the wwise icon shown on the image below k. You'll be prompted to upgrade your wwise project to the specific version, proceed with the upgrade. 14. once import is complete, you should be good to go. if you used the \"LanguageTree\" datum from R2EK, your manifest is going to have invalid entries in it. you can either remake your manifest or fix it yourself.</p> </li> </ol>"},{"location":"Mod-Creation/Updating-Your-Mods/For-Survivors-of-the-Void/","title":"Updating Your Mods for SotV","text":"<p>This page is a repository of information detailing information that is useful for developers updating mods. (Source: ROR2 Modding Discord, #development, \"Modders Need to know\" thread)</p>"},{"location":"Mod-Creation/Updating-Your-Mods/For-Survivors-of-the-Void/#other","title":"Other","text":"<ul> <li>Survivors need to have <code>SurvivorDef.cachedName</code> set before contentpack loading starts for eclipse tracking to work properly</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/For-Survivors-of-the-Void/#r2api","title":"R2API","text":"<ul> <li>R2API is receiving updates to function with the changes to RoR2's assembly structure and content loading system</li> <li>R2API lost the following APIs: <code>BuffAPI</code>, <code>BuffAPI</code>, <code>EffectAPI</code>, <code>FontAPI</code>, <code>ProjectileAPI</code>, <code>ResourcesAPI</code> (and its Providers), and <code>SurvivorAPI</code>, and <code>ItemDropAPI</code>.<ul> <li>Most of these APIs have been moved to R2API.ContentAdditon, and ItemDropAPI has been (mostly) replaced by RoR2.Run.</li> </ul> </li> <li>(Enable/Disable)Pickup (this might get a small addition to ItemAPI later on that would allow you to enable/disable for all runs, but that won't be in the initial 4.0.0 release)  Most of these APIs were already marked as obsolete and had their functionality moved elsewhere</li> <li>SoundAPI  has been affected but only the method for adding networksoundevents, since its been replaced by content addition</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/For-Survivors-of-the-Void/#loading-assets","title":"Loading Assets","text":"<ul> <li>The games asset resources are now accessible using Addressables. </li> <li>The old method of Resources.Load will work once the RoR2 BepInEx package has been updated to re-route Resources.Load calls to the LegacyResourcesAPI provided by HG</li> <li>The <code>Shader.Find()</code> is replaced by the <code>LegacyShaderAPI.Find()</code> call in order to easily find shaders in their new homes, using the old paths</li> <li>If you want to migrate your code, you can use <code>LegacyResourcesAPI</code> directly before Bepinex is updated by calling <code>RoR2.LegacyResourcesAPI.Load</code> instead, you will need to reference the <code>LegacyResourcesAPI.dll</code> to do so</li> <li>Alternatively you can update your code to use addressables, like follows <code>Addressables.LoadAssetAsync&lt;GameObject&gt;(key: \"RoR2/Base/WarCryOnMultiKill/WarCryEffect.prefab\").WaitForCompletion()</code></li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/For-Survivors-of-the-Void/#references","title":"References","text":"<ul> <li>Code from <code>Assembly-CSharp.dll</code> has been moved mostly to <code>RoR2.DLL</code></li> <li>If you're using <code>NetworkBehavior</code>, you will now need to reference <code>com.unity.multiplayer-hlapi.Runtime.dll</code></li> <li>RoR2 is now on Unity <code>2019.4.26</code>, if you use the Editor you will need to update to <code>2019.4.26</code></li> <li>If you use <code>CharacterMotor</code>, you will now need to reference <code>KinematicCharacterController.dll</code></li> <li>The version of <code>PostProcessing</code> package RoR2 uses is version <code>2.3.0</code></li> <li>The class <code>GameNetworkManager</code> has been renamed to <code>NetworkManagerSystem</code></li> <li>Unfinished content, such as Wicked Ring or Ancestral Incubator are now in the class <code>JunkContent</code> instead of <code>RoR2Content</code></li> <li>Wwise got updated to version <code>2019.2.12.7544</code></li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/For-Survivors-of-the-Void/#addressables","title":"Addressables","text":"<p>When writing new code to load assets from RoR2, we can now use Addressables, The following example shows how you can assign a material from a provided address (labeled Key in the code) to a MeshRenderer.</p> Click to expand! <pre><code>[RequireComponent(typeof(MeshRenderer))]\npublic class AddressableLoader : MonoBehaviour\n{\n    public static string[] AvailableKeys;\n    public string Key;\n    private string LastKey;\n    // Start is called before the first frame update\n    void Update()\n    {\n        if (LastKey == Key) return;\n        LastKey = Key;\n        var materialOp = Addressables.LoadAssetAsync&lt;Material&gt;(Key);\n        materialOp.Completed += MaterialOp_Completed;\n    }\n    void MaterialOp_Completed(AsyncOperationHandle&lt;Material&gt; obj)\n    {\n        var material = obj.Result;\n        var renderer = GetComponent&lt;MeshRenderer&gt;();\n        if (renderer &amp;&amp; material)\n        {\n            renderer.material = material;\n        }\n    }\n}\n</code></pre>"},{"location":"Mod-Creation/Updating-Your-Mods/For-Survivors-of-the-Void/#changing-the-camera","title":"Changing the Camera","text":"<p>Changes to ideallocalcamerapos now have to go through a handle and request like</p> Click to expand! <pre><code>private CameraTargetParams.CameraParamsOverrideHandle handle;\n\npublic override void FixedUpdate()\n{\n    base.FixedUpdate();\n\n    CameraTargetParams ctp = base.cameraTargetParams;\n    CharacterCameraParamsData characterCameraParamsData = ctp.currentCameraParamsData;\n    float denom = (1 + Time.fixedTime - this.initialTime);\n    float smoothFactor = 8 / Mathf.Pow(denom, 2);\n    Vector3 smoothVector = new Vector3(-3 / 20, 1 / 16, -1);\n    characterCameraParamsData.idealLocalCameraPos = CameraPosition + smoothFactor * smoothVector;\n\n    CameraTargetParams.CameraParamsOverrideRequest request = new CameraTargetParams.CameraParamsOverrideRequest\n    {\n        cameraParamsData = characterCameraParamsData,\n        priority = 0,\n    };\n\n    handle = ctp.AddParamsOverride(request);\n    base.cameraTargetParams.RemoveParamsOverride(handle);\n}\n</code></pre> <p>CharacterCameraParamsData</p> Click to Expand! <pre><code>public BlendableFloat minPitch;\npublic BlendableFloat maxPitch;\npublic BlendableFloat wallCushion;\npublic BlendableFloat pivotVerticalOffset;\npublic BlendableVector3 idealLocalCameraPos;\npublic BlendableFloat fov;\npublic BlendableBool isFirstPerson;\n</code></pre>"},{"location":"Mod-Creation/Updating-Your-Mods/For-Survivors-of-the-Void/#crosshair","title":"Crosshair","text":"<p><code>CharacterBody.defaultCrosshairPrefab</code> is now readonly; simple fix is to change <code>body.defaultCrosshairPrefab = crosshairPrefab</code> to <code>body._defaultCrosshairPrefab = crosshairPrefab</code> , 'improper' because that property is readonly and you technically aren't supposed to be changing it so your mileage may vary on side effects. proper fix using the new system is <code>RoR2.UI.CrosshairUtils.RequestOverrideForBody(body,crosshairPrefab,RoR2.UI.CrosshairUtils.OverridePriority.Sprint);</code></p>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.7/","title":"Core API Changelog 1.3.7 - Seekers of the Storm 2.0 Phase 2","text":""},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.7/#disclaimer","title":"Disclaimer","text":"<p>Modders who recieved the 1.3.7 Beta are not affiliated with Gearbox. Said modders are not responsible nor liable for these changes or any frustration.</p> <p>If there are any significant changes that are worth being documented that aren't already, simply leave a post in the <code>1.3.7 API Changelog</code> thread in <code>#development</code> in the RoR2 Modding Discord. It is possible we missed something.</p>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.7/#dccsblender","title":"DCCSBlender","text":"<p>Prior to 1.3.7, each <code>DccsPool</code> (DP) with monsters/interactables from both DLCs would need a <code>DirectorCardCategorySelection</code> (DCCS) for the base game, DLC1, DLC2, and DLC1+2. For example, <code>dpSkyMeadowMonsters</code> would need:</p> <ul> <li><code>dccsSkyMeadowMonsters</code> (The base pool)</li> <li><code>dccsSkyMeadowMonstersDLC1</code> (The pool for DLC1)</li> <li><code>dccsSkyMeadowMonstersDLC2</code> (The pool for DLC2)</li> <li><code>dccsSkyMeadowMonstersDLC1+2</code> (The pool for DLC1+2)</li> </ul> <p>This approach had some side effects where the latter three DCCS would compete with each other (<code>dccsSkyMeadowMonsters</code> doesn't compete because it is in the <code>Always Include</code> field of the <code>DccsPool</code>).  It explains why, for example, Magma Worm would be able to spawn in Sky Meadow even though DLC1 was enabled. It also explains why Void Cradles cannot roll sometimes.</p> <p>A con with this approach is scalability. To support both DLCs in a modded/new stage, you would need 4 monster DCCS and 4 interactable DCCS. There are a lot of repeated entries across all of these assets and it results in a massive time sink to implement them all.</p> <p>Post 1.3.7, a given DP would only need 1 DCCS per expansion. <code>dpSkyMeadowMonsters</code> now only needs:</p> <ul> <li><code>dccsSkyMeadowMonsters</code></li> <li><code>dccsSkyMeadowMonstersDLC1</code></li> <li><code>dccsSkyMeadowMonstersDLC2</code></li> </ul> <p>Additionally, the <code>DCCSBlender</code> class will automatically blend all of the dccs together. There are no longer repeated card entries across a DP's DCCS:</p> <ul> <li><code>dccsSkyMeadowMonsters</code> only contains cards tied to the base game.</li> <li><code>dccsSkyMeadowMonstersDLC1</code> only contains cards tied to DLC1.</li> </ul> <p></p> <p>There are new fields in the <code>ClassicStageInfo</code> of each RoR2 map called <code>contentSourceMixLimitOverride</code> and <code>contentSourceMixLimitOverrideValue</code>. Currently, the game only mixes a maximum of 2 DCCS into the base dccs provided. This means if there was a third expansion (a mod or a hypothetical DLC3) with its own DCCS, it will compete with DLC1 and DLC2 dccs. The <code>contentSourceMixLimitOverride</code> fields overrides that behavior per scene to allow more or fewer mixes.</p>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.7/#what-needs-to-be-done","title":"What needs to be done:","text":"<p>For developers that add monster entries via R2API: wait. R2API will update to account for the DCCS changes.</p> <p>For developers that make new stages or monster pools:</p> <ul> <li>Backup your stage's DCCS and DP in case of future changes.</li> <li>Remove any DLC1+2 DCCS from the associated DP.</li> <li>Remake any DLC1 or DLC2 DCCS to make it only contain respective DLC content. For example: Fogbound Lagoon's DLC1 Monster DCCS should only contain Xi Construct, Alpha Construct, Gup, etc.</li> <li>Your DP should reflect this:</li> </ul> <p></p>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.7/#false-son-entity-states","title":"False Son Entity States","text":"<p>Various entity states related to the boss fight make changes in fields and methods available which need to be adapted if accessed previously.</p> <ul> <li><code>EntityStates.FalseSonBoss.FissureSlam</code> removed <code>minimumDuration</code>, <code>swingEffectInstance</code>, <code>detonateNextFrame</code>, <code>amServer</code>, <code>totalFissuresFired</code>, and <code>timeToGenerateNextFissure</code>.</li> <li><code>EntityStates.FalseSonBoss.FissureSlamWindup</code> removed <code>gauntlet</code>, <code>soundID</code>, <code>chargeAnimPlayed</code>, and <code>stateAborted</code>.</li> <li><code>EntityStates.FalseSonBoss.LunarRaine</code> removed <code>nodesToTeleportTo</code>, <code>fissureLocation</code>, and <code>lunarRainStartTime</code>. <code>fisurreLocs</code> changed from a <code>List&lt;NodeGraph.NodeIndex&gt;</code> to a <code>List&lt;Vector3&gt;</code>.</li> <li><code>EntityStates.SwatAwayPlayerSlam</code> removed <code>damageCoefficient</code>, <code>hitEffectPrefab</code>, <code>procCoefficient</code>, <code>pushAwayForce</code>, <code>forceVector</code>, <code>impactSound</code>, <code>minimumDuration</code>, <code>blastRadius</code>, <code>blastProcCoefficient</code>, <code>blastDamageCoefficient</code>, <code>blastForce</code>, <code>blastBonusForce</code>, <code>blastImpactEffectPrefab</code>, <code>blastEffectPrefab</code>, and <code>fistEffectPrefab</code>. <code>hitBoxGroupName</code> is now static. <code>swingEffectInstance</code> is now not static. </li> <li><code>EntityStates.FalseSonBoss.LunarGazeFire</code> and <code>EntityStates.FalseSonBoss.LunarGazeFirePlus</code> completely removed.</li> <li><code>RoR2/MeridianEventTriggerInteraction</code> massive changes.</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.7/#item-references","title":"Item References","text":"<ul> <li>The following items have been renamed:</li> <li><code>LowerHealthBody</code> -&gt; <code>AttackSpeedPerNearbyAllyOrEnemy</code> (and similar for the related buff, collider, and item behavior)</li> <li><code>GoldOnStageStart</code> -&gt; <code>BarrageOnBoss</code> (and similar for the related buff and item behavior)</li> <li><code>ResetChests</code> -&gt; <code>ItemDropChanceOnKill</code></li> <li>Note that this changes the Addressable Keys for any of the associated item assets.</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.7/#character-body-flag-useambientlevel","title":"Character Body Flag UseAmbientLevel","text":"<ul> <li><code>CharacterBody.BodyFlags.UsesAmbientLevel</code> has been added.</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.7/#damage-source-equipment","title":"Damage Source Equipment","text":"<ul> <li>There is now a new <code>DamageSource</code> type called <code>Equipment</code>. This is a flag that tracks damage done by an equipment.</li> <li>This is not included in the already existing <code>SkillMask</code>.</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.7/#other-api-changes","title":"Other API Changes","text":"<ul> <li><code>RoR2.CharacterBody.OnShardDestroyed</code> changed its method signature.</li> <li><code>RoR2.Stage.FixedUpdate</code> has been renamed to <code>Update</code>.</li> <li><code>RoR2.TeleportOnLowHealthBehavior</code> removed <code>timesAddedThisLevel</code>.</li> <li><code>RoR2.UI.ChatBox.Show</code> changed its method signature.</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.7/#credits","title":"Credits","text":"<ul> <li>Writing: JaceCascade and Chinchi</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.8/","title":"Core API Changelog 1.3.8 - Seekers of the Storm 2.0 Phase 3","text":""},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.8/#disclaimer","title":"Disclaimer","text":"<p>Modders who participated in the 1.3.8 beta have no responsibility for any of the changes listed below. </p> <p>Most, if not all EntityStates for each of the DLC2 characters were changed to some degree; if a certain state isn't listed here, it does not mean it wasn't changed.</p>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.8/#most-important","title":"Most Important","text":"<ul> <li>RoR2.GenericSkill</li> <li><code>AssignSkill(SkillDef)</code> -&gt; <code>AssignSkill(SkillDef, bool)</code></li> <li>EntityStates/GenericCharacterMain</li> <li><code>ProcessJump()</code> now internally calls <code>ProcessJump(bool)</code>. This mostly affects ILHooks</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.8/#core","title":"Core","text":"<ul> <li>RoR2.CameraRigController</li> <li>Removed some music related fields and methods</li> <li>RoR2.CameraTargetParams</li> <li>Removed <code>aimRequestStack</code> and <code>RemoveRequest</code></li> <li>RoR2.CharacterBody</li> <li>Removed tamperedHeart-related fields. These are now handled by <code>ComputeTamperedHeartBonus</code></li> <li>Removed <code>damageFromRecalculateStats</code></li> <li>RoR2.CharacterMaster</li> <li>Removed <code>SEEKER_REVIVE_STATUS</code>, <code>seekerUsedRevive</code>, and <code>getSeekerUsedRevive</code></li> <li>RoR2.CharacterModel</li> <li><code>invisibilityCount</code> -&gt; <code>_invisibilityCount</code></li> <li>RoR2.DLC2Content</li> <li>Removed <code>CookingFlambe</code></li> <li>RoR2.SceneDef</li> <li>Added <code>preventStageAdvanceCounter</code>. This seemingly just prevents a scene from bumping the stage counter. (Tooltip describing the field is wrong)</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.8/#chef","title":"Chef","text":"<ul> <li>ChefController<ul> <li><code>yesChefHeatActive</code> renamed to <code>yesChefActive</code></li> <li><code>Dictionary&lt;ushort, CleaverProjectile&gt; cleaverDictionary</code> -&gt; <code>Dictionary&lt;NetworkInstanceId. CleaverProjectile&gt; cleaverDictionary</code></li> <li><code>SetYesChefHeatState</code> renamed to <code>SetYesChefState</code></li> <li><code>AddLocalProjectileReference</code> now only takes a <code>CleaverProjectile</code></li> <li><code>RemoveLocalProjectileReference</code> now only takes a <code>NetworkInstanceId</code></li> </ul> </li> <li>EntityStates.Chef.Dice<ul> <li>Removed <code>recallAnimationTransitionTime</code>, <code>approximateCleaverDistance</code>, and <code>recallInputPressed</code> fields.</li> </ul> </li> <li>EntityStates.Chef.RolyPoly<ul> <li>Removed <code>chargeDamageCoefficientLvlUp</code>, <code>impactSoundString</code>, <code>startSoundString</code>, <code>knockbackDamageCoefficient</code>, <code>massthresholdForKnockback</code>, <code>chestIndex</code>, <code>temporaryInstantiationTransform</code>, <code>midEffectInstance</code>, <code>chefController</code>, <code>hasBoost</code>, and <code>charge</code> fields.</li> </ul> </li> <li>EntityStates.Chef.Sear<ul> <li><code>Update</code> -&gt; <code>FixedUpdate</code></li> </ul> </li> <li>EntityStates.Chef.YesChef<ul> <li><code>YesChef : BaseState</code> -&gt; <code>YesChef : GenericCharacterMain</code></li> <li>Removed <code>heatDamageCo</code> and <code>blastEffectPrefab</code></li> </ul> </li> <li><code>YesChefHeatProjectileTimer</code> -&gt; <code>YesChefProjectileTimer</code></li> <li>RoR2.Projectile.CleaverProjectile<ul> <li>Now inherits <code>IProjectileSpeedModifierHandler</code></li> <li>Removed <code>transitionDuration</code>, <code>maxFlyStopwatch</code>, <code>fireAge</code>, <code>fireFrequency</code>, <code>travelTime</code>, <code>stoppedStopwatch</code> and <code>predictionId</code></li> </ul> </li> <li>Removed EntityStates.Chef.ChargeRolyPoly</li> <li>Chef Oil now synergizes with IgnitionTank. When an oiled enemy is hit with the Ignition Tank debuff, it is treated as if there is +1 stack of the item.</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.8/#false-son","title":"False Son","text":"<ul> <li>EntityStates.FalseSon.ClubGroundSlam<ul> <li><code>ClubGroundSlam : BaseState</code> -&gt; <code>ClubGroundSlam : ClubGroundSlamBase</code></li> <li>Removed <code>normalizedVFXPositionBetweenFootAndClub</code> and <code>normalizedBlastPositionBetweenFootAndClub</code></li> </ul> </li> <li>EntityStates.FalseSon.LaserFatherBurst<ul> <li>Removed <code>blastRadius</code>, <code>force</code>, <code>minSpread</code>, <code>bulletCount</code>, <code>baseDuration</code>, <code>laserTimerPercent</code>, <code>laserDirection</code>, <code>charge</code>, <code>maxSecondaryStock</code>, <code>secondaryStock</code>, <code>modelTransform</code>, <code>muzzleTransform</code>, <code>rayDistance</code>, and <code>firedLaser</code></li> </ul> </li> <li>EntityStates.FalseSon.LaserFatherCharged<ul> <li>Removed <code>fireFrequency</code> and <code>lunarSpikeCount</code></li> </ul> </li> <li>EntityStates.FalseSon.LunarSpikes<ul> <li>Removed <code>procCoefficient</code>, <code>force</code>, <code>attackSpeedAltAnimationThreshold</code>, <code>attackSoundString</code>, <code>bloom</code> and  <code>hasFiredSpike</code>.</li> </ul> </li> <li>Removed <code>EntityStates.FalseSon.ClubForsaken</code>, <code>EntityStates.FalseSon.ClubForsaken2</code>, and <code>EntityStates.FalseSon.ClubSwing2</code>.</li> <li>RoR2.FalseSonController</li> <li>Was completely rewritten</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.8/#seeker","title":"Seeker","text":"<ul> <li>EntityStates.Seeker.Meditate</li> <li>Completely Rewritten</li> <li>Seems to no longer have network gated inputs</li> <li>EntityStates.Seeker.Sojourn</li> <li>Various fields removed, they have been moved to the new <code>SojournBase</code></li> <li>RoR2.SeekerController</li> <li>Removed <code>currentChakraGate</code>. This is now handled by CharacterMaster.seekerChakraGate`</li> <li>RoR2.SojournVehicle</li> <li>A lot of its functionality and fields were moved to <code>SojournVehicleBase</code></li> <li>Removed <code>EntityStates.SeekerBaseActive</code>, <code>EntityStates.Seeker.BaseScopeState</code>, <code>EntityStates.Seeker.BaseWindDown</code>, <code>EntityStates.Seeker.BaseWindUp</code>, and <code>EntityStates.Seeker.MeditationUI</code></li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.8/#mul-t","title":"MUL-T","text":"<ul> <li>EntityStates.Toolbot.BaseNailGunState / FireBuzzsaw / FireGrenadeLauncher / FireSpear</li> <li>Assigns <code>Primary</code> or <code>Secondary</code> damage sources depending on the skill's slot. This is mainly for Power Mode. (Example: if Buzzsaw is my secondary in Power Mode, it won't activate Breaching Fin.)</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.8/#prime-meridian-false-son-boss","title":"Prime Meridian / False Son Boss","text":"<ul> <li>EntityStates.FalseSonBoss.SkyJumpDeathState</li> <li>Field type of <code>halcyonSeed</code> PickupIndex -&gt; ItemIndex</li> <li>EntityStates.PrimeMeridian.LunarGazeLaserFire</li> <li>Removed <code>lunarGazeDamageType</code></li> <li>EntityStates.PrimeMeridian.LunarGazeLaserFirePlus</li> <li>Removed <code>plusDamageCoefficient</code> and <code>plusProcCoefficientPerTick</code></li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.8/#misc","title":"Misc","text":"<ul> <li>EntityStates.Missions.MiniGeodeTracker.Listening</li> <li><code>maxStageClearCount</code> -&gt; <code>maxStageTierOrder</code></li> <li><code>bannedEventFlag</code> -&gt; <code>bannedGeodesBrokenEventFlag</code></li> <li>Added <code>JitterBoneBlacklist</code>. Used if certain characters break when picking up the Malachite Aspect.</li> <li>RoR2.TeleportOnLowHealthBehavior</li> <li><code>TryProc(HealthComponent, int)</code> -&gt; <code>TryProc(HealthComponent)</code></li> <li>RoR2.WokController</li> <li>Fields and method changes in regards to networking</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/Updating-Core-API-Changelog-1.3.8/#credits","title":"Credits","text":"<ul> <li>ChinChi, JaceCascade, Moffein</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Core-API-Changelog-1.3.9/","title":"Core API Changelog 1.3.9","text":""},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Core-API-Changelog-1.3.9/#memory-optimization-update","title":"Memory Optimization Update","text":""},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Core-API-Changelog-1.3.9/#overview","title":"Overview","text":"<p>1.3.9 focuses on overarching memory optimizations for assets relating to:   - Stage Assets   - Character Meshes, Materials, Animations, etc.   - Soundbanks</p> <p>Each of these assets are situationally preloaded, loaded, and unloaded during runtime to reduce memory uptake.</p> <ul> <li>The folowing (as of now) still take up memory during the game instance:</li> <li>Effects</li> <li>Projectiles</li> <li>Items</li> <li>Equipment</li> <li>Character Masters and Bodies</li> <li>Anything with a catalog</li> </ul> <p>To account for modding, this system is intended to be opt-in; mods should still load despite them not using these new systems. Utilization of these new systems are detailed later on in the document.</p> <p>These systems request for an Asset's GUID instead of its AddressablePath. All of the game's GUID strings can be found in <code>/StreamingAssets/lrapi_returns.json</code>. A core benifit to using an Asset GUID is that it is far less likely to change compared to an Addressable path: an Asset's GUID is only dependent on the asset itself whilst its Addressable path depends on its file path in the source project.</p> <p>Misc Notes: Some Addressable Paths have changed in this update. Any Beetle related content paths got changed.</p>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Core-API-Changelog-1.3.9/#character-optimizations","title":"Character Optimizations","text":""},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Core-API-Changelog-1.3.9/#skins","title":"Skins","text":"<p><code>SkinDef</code> has been overhauled to not contain direct asset references. Instead, they contain <code>SkinDefParams</code> -a ScriptableObject that holds Addressable references to relevant skin assets. The following have been migrated to <code>SkinDefParams</code>. - Meshes - Materials - Additional assets like Projectile Ghost replacements</p> <p>Characters DO NOT need to use the new <code>SkinDef</code> system to appear in game. The downside to not using the new system is higher memory uptake- the same amount of memory a skin would take before 1.3.9. The intention is to maintain backwards compatibility.</p> <p>Avatars and RuntimeAnimatorControllers are now kept as Addressable References inside the <code>ModelSkinController</code></p> <p>Display Prefabs now contain <code>ModelSkinController</code>s, Skins added to a survivor's body's <code>ModelSkinController</code> should be added to the Survivor's display's <code>ModelSkinController</code> and match the body's skin  order.</p>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Core-API-Changelog-1.3.9/#misc","title":"Misc","text":"<p>New <code>CharacterMaster.PreloadAssets()</code>. Used to request a master to start preloading its assets.</p>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Core-API-Changelog-1.3.9/#asset-management","title":"Asset Management","text":""},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Core-API-Changelog-1.3.9/#ror2contentmanagementassetordirectreference","title":"RoR2.ContentManagement.AssetOrDirectReference","text":"<p><code>AssetOrDirectReference&lt;T&gt;</code> is a class to help direct references towards a source reference whilst also handling Addressable cleanup. As the name implies, this class can be used to hold a reference to an asset, wether this asset is loaded dynamically using Addressables or has a direct reference.</p> <p>Most of the classes below now contain an <code>AssetReferenceT&lt;T&gt;</code> for the addressable reference option. The systems in the game take the address as the ideal asset to use, if no valid address is specified, then the direct reference is used.</p> <ul> <li>ModelSkinController</li> <li>SkinDef / SkinDefParams</li> <li>ModelPanel</li> <li>ArtifactDef (<code>pickupModelPrefab</code> (Obsolete) -&gt; <code>pickupModelReference</code>)</li> <li>DirectorCard (<code>spawnCardReference</code>)</li> <li>EquipmentDef (<code>pickupModelPrefab</code> (Obsolete) -&gt; <code>pickupModelReference</code>)</li> <li>ItemDef (<code>pickupModelPrefab</code> (Obsolete) -&gt; <code>pickupModelReference</code>)</li> <li>SceneDef </li> </ul> <p>Reminder: developers must use the GUID address, not the  Addressable path.</p> <p>DirectorCard now uses <code>GetSpawnCard()</code>, which utilizes <code>AssetOrDirectReference&lt;T&gt;</code>. <code>GetSpawnCard()</code> returns the direct asset/reference from the DirectorCard field <code>spawnCardReference</code>, a field of type <code>AssetOrDirectReference&lt;T&gt;</code>. This feature can now used in constructing DCCS from scratch in editor. Modders can now input GUIDs into a DCCS as a substitute to a direct card reference.</p>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Core-API-Changelog-1.3.9/#ror2contentmanagementassetasyncreferencemanager","title":"RoR2.ContentManagement.AssetAsyncReferenceManager","text":"<p><code>AssetAsyncReferenceManager&lt;T&gt;</code> is a new static class that handles and releases given Asset GUIDs. This class is powerful in the sense that it allows access to a specific asset with a given GUID and it is personalized to RoR2's specific use cases. An important note is that <code>T</code> needs to be a specific type, there cannot be assumptions on what type of asset a given GUID is refering to.</p> <p>LoadAsset</p> <p>Signature:</p> <p><code>AssetAsyncReferenceManager&lt;T&gt;.LoadAsset(AssetReference&lt;T&gt; reference, AyncReferenceHandleUnloadType unloadType = AsyncReferenceHandleUnloadType.AtWill)</code></p> <p>Return type: <code>AsyncOperationHandle&lt;T&gt;</code></p> <p><code>LoadAsset</code> requires a GUID reference to an asset (<code>reference</code>) and UnloadType (covered later). The returned operation handle is asynchronous and will perform no operations if the targeted asset is already loaded. The operation handle can be paired with <code>.WaitForCompletion()</code> to force immediate asset access.</p> <p>UnloadAsset</p> <p>Signature:</p> <p><code>AssetAsyncReferenceManager&lt;T&gt;.UnloadAsset(AssetReference&lt;T&gt; reference)</code></p> <p>Return type: void</p> <p><code>UnloadAsset</code> requires a GUID reference to an asset (<code>reference</code>). A targetted asset will not be unloaded from memory if it is still referenced from different sources.</p>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Core-API-Changelog-1.3.9/#ror2contentmanagementasyncreferencehandleunloadtype","title":"RoR2.ContentManagement.AsyncReferenceHandleUnloadType","text":"<p>The <code>AsyncReferenceHandleUnloadType</code> defines how long a reference will exist will exist in memory. Each UnloadType has ranking priority; for example, the unload priority of <code>OnRunEnd</code> is higher priority than <code>AtWill</code>. Behaviors for each UnloadType is listed below in ascending priority:</p> <ul> <li><code>Preload</code>:</li> <li>Latches onto an asset in memory until its promoted to a higher UnloadType or the scene changes.</li> <li><code>PreloadInMenu</code>:</li> <li>Same as above, except it only unloads memory on scene transition when the scene is not a menu scene. Especially useful for loading Characters in the lobby screen: Character memory doesn't get dumped when you back out to the main menu.</li> <li><code>AtWill</code>:</li> <li>If there are no more active references, unload this asset from memory.</li> <li>Default UnloadType for <code>LoadAsset</code></li> <li>Reference count is significant for this type and beyond. Make sure to call <code>UnloadAsset</code> to allow the asset to be released.</li> <li><code>OnSceneUnload</code>:</li> <li>Unload on next scene load.</li> <li>Useful for Monsters.</li> <li><code>OnRunEnd</code>:</li> <li>Unload on run end; more specifically from a scene with a <code>Run</code> instance to a scene without one.</li> <li>Useful for Characters.</li> </ul> <p>An asset has a buffer window of around 5 seconds between it being a candidate for unloading and it actually unloading. Asset unloading can be intercepted by rerequesting the asset or changing UnloadType priority.</p> <p>An asset's UnloadType cannot be demoted. You cannot change an asset to go from <code>OnRunEnd</code> -&gt; <code>AtWill</code>.</p>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Core-API-Changelog-1.3.9/#itemdisplayruleset","title":"ItemDisplayRuleSet","text":"<p>IDRS items can now be loaded on demand- however, they still use direct references at the present moment. ItemDisplayRuleSets can now also accept a direct or addressable reference for both Key Assets and Display Prefabs.</p> <p>Do note that if you choose to remain on old system of loading assets directly into followerPrefab via Addressables for base game items then set <code>followerPrefabAddress</code> to <code>new AssetReferenceGameObject(\"\")</code> otherwise game will throw an error on item pickup and no display will be shown.</p>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Core-API-Changelog-1.3.9/#networkpreloadmanager","title":"NetworkPreloadManager","text":"<p>A networked singleton that handles preload requests. - Survivors   - <code>SendScenePreloadMessage(SceneDef sceneDef)</code>: Preloads the survivors in the transition to the lobby. - Scene Preload Requests   - <code>SendScenePreloadMessage(SceneDef sceneDef)</code>: Sends an asyncronous request all clients to start preloading a scene.   - <code>StartNewScenePreload(SceneDef sceneDef, bool preserveSceneInMenus)</code>: Preloads a local scene such as a menu. <code>preserveSceneInMenus</code> controls if a Scene gets released in a transition. - Characters   - <code>SendMasterPreloadRequest(List&lt;MasterCatalog.MasterIndex&gt; masterIndices)</code>: Given certain indices of the MasterCatalog, this will send a networked request to clients to load certain CharacterMasters.</p>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Core-API-Changelog-1.3.9/#soundbank-optimizations","title":"Soundbank Optimizations","text":"<p>Most sounds are now loaded when needed instead of all times. Stages and Survivors now load their own banks (<code>AkBank</code> component on the SceneInfo and CharacterBody respectively)</p> <p>About 2/3rds of the soundbanks where cut from being in memory at all times. This includes ALL survivor and stage soundbanks, plus the ones listed below. Items where not touched.</p> <p>A list of affected sound bank groups: -   Boss_Artifact -   Boss_FalseSon -   Boss_Grandparent -   Boss_Brother -   Boss_majorConstruct -   Boss_Gravekeeper -   Boss_RoboBall -   Boss_Scav -   Boss_voidRaid -   ArtifactShellBody -   Mob_child -   Mob_clayBruiser -   Mob_clayGrenadier -   Mob_halcyonite -   mob_lunarGolem -   Mob_lunarWisp -   Mob_voidBarnacle -   Mob_Vulture -   Mob_voidJailer</p>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Core-API-Changelog-1.3.9/#other-changes","title":"Other Changes","text":"<ul> <li>New Attribute for executing on game startup: <code>[InitDuringStartupPhase(GameInitPhase initPhase, int order)]</code> (under namespace <code>RoR2.</code>).</li> <li><code>RoR2.GameInitPhase</code> is a new enum describing the \"phase\" of the bootup sequence</li> <li><code>order</code> is the sorted execution order. An attribute with order \"0\" will execute before an attribute with order \"2\".</li> <li>Duplicate <code>[SearchableAttribute]</code> that did nothing has been removed.</li> <li>New <code>AddChild</code> function to <code>ChildLocator</code></li> <li>New <code>RoR2.PlaySoundOnEvent</code> class.</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Core-API-Changelog-1.3.9/#important-note","title":"Important note:","text":"<p>I (Jace) haven't had time to fully look through some of the more miscellaneous changes. If you feel like a change should be listed here, either ping \"jacecascade\" on discord or append it here directly. If you edit the document directly with changes, make sure to add yourself to the Credits.</p>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Core-API-Changelog-1.3.9/#credits","title":"Credits","text":"<ul> <li>JaceCascade</li> <li>Nebby1999</li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Updating-Guide/","title":"Updating Guide","text":""},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Updating-Guide/#nuget","title":"Nuget","text":"<pre><code>&lt;PackageReference Include=\"BepInEx.Core\" Version=\"5.*\" /&gt;\n&lt;PackageReference Include=\"UnityEngine.Modules\" Version=\"2021.3.33\" /&gt;\n&lt;PackageReference Include=\"RiskOfRain2.GameLibs\" Version=\"1.3.9-r.0\" /&gt;\n&lt;PackageReference Include=\"MMHOOK.RoR2\" Version=\"2025.6.3\" NoWarn=\"NU1701\" /&gt;\n&lt;PackageReference Include=\"RoR2BepInExPack\" Version=\"1.30.0\" /&gt;\n</code></pre>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Updating-Guide/#referencing-game-assets","title":"Referencing Game Assets","text":"<p>You'll notice a new face, RoR2BepInExPack. This has updated with a new namespace <code>RoR2BepInExPack.GameAssetPaths</code>, which is very rad.</p>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Updating-Guide/#tldr","title":"TL;DR:","text":"<p>instead of <pre><code>Addressables.LoadAssetAsync&lt;GameObject&gt;(\"RoR2/Junk/Commando/TracerBarrage.prefab\");\n</code></pre> We highly recommend doing <pre><code>Addressables.LoadAssetAsync&lt;GameObject&gt;(RoR2BepInExPack.GameAssetPaths.RoR2_Junk_Commando.TracerBarrage_prefab);\n</code></pre></p>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Updating-Guide/#the-benefits","title":"The Benefits","text":"<ol> <li>Autocomplete, baybee. </li> <li>If the path updates, your reference will no longer break. This is because the field in RoR2BepInExPack references the GUID, which is an unchanging identifier of the asset</li> </ol>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Updating-Guide/#tips-for-autocomplete","title":"Tips for Autocomplete","text":"<ul> <li>Start with <code>RoR2BepInExPack.GameAssetPaths</code> and type the category of what you're looking for so say I'm looking for mul-T stuff: </li> <li>now if I want a skin or i can just type skin </li> <li>Another example: say I want some material from Engineer stuff </li> </ul>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Updating-Guide/#long-explanation","title":"Long explanation","text":"<p>As the game updates, if you've been loading any game assets with addressables, you're bound to run into some issues with game paths changing, as the developers may move files to different folders or addressable groups. The solution? Use GUIDs instead of paths. Unlike paths, GUIDs are identifiers for assets that don't change when names or paths of the assets change. Moving forward, the developers are including a big .json of all the GUIDs in the game, so we have generated a library of classes in RoR2BepInExPack using those guids that we can now use to reference.</p>"},{"location":"Mod-Creation/Updating-Your-Mods/1.3.9-Memory-Optimization/Updating-Guide/#charactermodel-and-skin-stuff","title":"CharacterModel and Skin stuff","text":"<p>Read the changelog page for more information.</p> <p>If you were ever loading a character and messing with their renderers, you will now find that they are empty. No reference to meshes or materials. They are now all stored in their default skin, which all characters (including enemies) must now have. Some really old mods, for example, were loading commando's material by loading commando, going into his renderers, and grabbing the material from there. What you want to do is load any materials you're messing with directly from code, using the method above.</p> <p>Creating skins in code should work just fine. For custom characters, if you weren't depending on any existing materials, your skin should be fine. Reach out in the modding discord if you're having trouble with this, and we can update this paragraph.</p> <p>If you are cloning characters such as enemies and making your own variations on them, keep in mind that their renderers are also empty. You should load their skindef and make changes to the rendererinfos there, or load their materials directly if you were cloning them, etc.</p>"},{"location":"Playing/FAQ/","title":"FAQ","text":""},{"location":"Playing/FAQ/#foreword","title":"Foreword","text":"<p>Hi there, and welcome to the faq page. Thank you for taking your time reading this. In here you will hopefully find answers to your questions. If you're still looking for an answer or further details on a specific question, please do not be afraid to ask in the modding discord server in the channel #tech-support.</p> <p>Before anything, please remember that the team running this Discord server and the mod developers are doing this in their free time and for free. Please be respectful :smile:</p>"},{"location":"Playing/FAQ/#general","title":"General","text":""},{"location":"Playing/FAQ/#im-on-console-how-can-i-use-these-mods","title":"I'm on console how can I use these mods?","text":"<p>I am dearly sorry but currently there is no mod support for console. This would require considerable effort from hopoo and an agreement with each platform similar to what bethesda has, If you really want this on console then ask the Developers:</p> <ul> <li>Official Risk of Rain Twitter</li> <li>Dev Team Member \"Hopoo's\" Twitter</li> <li>HopooGames's Twitter</li> <li>HopooGames's email: contact@hopoogames.com</li> </ul>"},{"location":"Playing/FAQ/#what-do-the-risk-of-rain-developers-think-about-modding-do-they-support-it","title":"What do the Risk of Rain Developers think about modding, do they support it?","text":"<p>They've made an official statement here and have spoken about it in an interview with Woolie here. They haven't popped in to say hello to the modding discord nor do they provide an official modding API but they do support the modding community by trying not to break mods when updating the game and altering the code to make it more convenient for modders to slot in their mods. Their long term goal as stated in the interview is to stop mods breaking after every update.</p>"},{"location":"Playing/FAQ/#why-cant-i-play-prismatic-trials","title":"Why can't I play Prismatic trials?","text":"<p>The Developers have asked that modded users stay out of prismatic trials since modded players likely have a different gameplay experience from vanilla players thus shouldn't get leaderboard placement.</p>"},{"location":"Playing/FAQ/#can-i-still-play-modded-with-my-vanilla-friends","title":"Can I still play modded with my vanilla friends?","text":"<p>Yes you can by using the Unmodded Version mod, however this limits you to client-side and sever-side/host mods. Mods that add completely new characters, enemies, skills, etc will not work.</p>"},{"location":"Playing/FAQ/#will-mods-affect-my-ability-to-play-vanilla","title":"Will mods affect my ability to play vanilla?","text":""},{"location":"Playing/FAQ/#with-a-mod-manager","title":"With a mod manager","text":"<p>You can still play vanilla Risk of Rain 2 by launching via steam, \"Risk of Rain 2.exe\", a shortcut or clicking \"Start Vanilla\" inside a mod manager.</p>"},{"location":"Playing/FAQ/#without-a-mod-manager","title":"Without a mod manager","text":"<p>You can still play vanilla Risk of Rain 2 if you set up your shortcuts appropriately using this guide.</p>"},{"location":"Playing/FAQ/#what-mods-should-i-get","title":"What mods should I get?","text":"<p>Have a quick google or ask around on the discord's. There will be some varied opinions on what are the best mods and recommend mods but guides and some suggestions should help. Just open up the Thunderstore and start looking. Compile a list of what looks interesting, and if you still feel stuck, post that list to the Discord for more feedback.</p>"},{"location":"Playing/FAQ/#havent-played-in-a-good-while-whats-new","title":"Haven't played in a good while, what's new?","text":"<p>Look on Thunderstore sorting by last updated.</p>"},{"location":"Playing/FAQ/#how-do-i-configure-my-mods","title":"How do I configure my mods?","text":"<p>Configs are located in \"\\BepInEx\\config\" and can be opened with any text editor.</p>"},{"location":"Playing/FAQ/#i-have-no-config-files-in-bepinexconfig-how-do-i-get-them","title":"I have no config files in \"\\BepInEx\\config\" how do I get them?","text":"<p>You must launch the game with mods at least once for it to generate any configuration files so.. do that!</p>"},{"location":"Playing/FAQ/#i-think-i-broke-my-config-file-how-can-i-fix-it","title":"I think I broke my config file. How can I fix it?","text":"<p>Simply delete the config file and launch the game with mods again, It will generate a fresh copy for you to edit.</p>"},{"location":"Playing/FAQ/#installation","title":"Installation","text":""},{"location":"Playing/FAQ/#how-do-i-get-started-with-mods","title":"How do I get started with mods?","text":"<p>Please use the Beginners Guide.</p>"},{"location":"Playing/FAQ/#how-can-i-be-sure-my-install-works","title":"How can I be sure my install works?","text":"<p>When you start Risk of Rain 2, a console/command prompt should appear. If there is a red wall of text, then something is wrong and, hopefully, we can solve that once we get to the common errors.</p>"},{"location":"Playing/FAQ/#common-errors","title":"Common errors","text":""},{"location":"Playing/FAQ/#there-is-a-lot-of-red-text-in-the-bepinex-console-what-do-i-do","title":"There is a lot of red text in the BepInEx console! What do I do?","text":"<p>If the red text is along the lines of \"Viewable not defined\", you can ignore it.      If the red text says \"Missing dependencies for [NameOfMod] : -com.bepis.r2api\", then you're missing R2API. Please install it by following the instructions above.      If the red text says \"FileNotFoundException : Could not load file or assembly 'mmhook ...\", then you're missing a piece of R2API. You're probably missing the file in /BepInEx/monomod, which can be found in the R2API archive.      If this doesn't fix most of your errors, try deleting your managed folder and verifying the game through steam.      Lastly, if there is still excessive red text you can drop a message in the modding discord server in the channel #tech-support.</p>"},{"location":"Playing/FAQ/#im-locked-behind-the-steam-ui","title":"I'm locked behind the Steam UI!?","text":"<p>Yeah , sadly we don't even know why that happens. Sometimes it goes away by itself and then comes back. You can still invite your friends through the lobby IDs though.</p>"},{"location":"Playing/FAQ/#modname-is-throwing-errors","title":"\"ModName\" is throwing errors!","text":"<p>Before taking the pitchforks out, make sure you have all the dependencies and that every file is in the right folder. The mod might also just be outdated due to an update from the base game.      If you're 100% sure you installed the mod properly, you can tag the mod creator in #tech-support and report this error.</p>"},{"location":"Playing/FAQ/#somehow-all-damage-over-time-effects-are-way-too-op","title":"Somehow all damage over time effects are way too OP","text":"<p>You're probably using SeikoML compat layer, it's quite buggy and to be fair most mods that would require you to have this have bepinex equivalents , switch to those.</p>"},{"location":"Playing/FAQ/#everyone-in-the-party-just-dies-instantly","title":"Everyone in the party just dies instantly!","text":"<p>Most likely an error with a mod that tries to mess with dead players such as turning them into drones or other monsters.</p>"},{"location":"Playing/FAQ/#theres-no-teleporterchests","title":"There's no teleporter/chests!","text":"<p>You most likely installed a mod that is trying to spawn something or edit something that should spawn but doesn't exist. The game really doesn't like that and stops working at that point.</p>"},{"location":"Playing/FAQ/#when-i-try-to-play-with-my-friends-it-says-version-mismatch","title":"When I try to play with my friends it says \"Version Mismatch\"","text":"<p>Both of you need the same mod installation , alternatively you can install an ID spoofing mod to trick the game into thinking you are Vanilla and letting your friend connect. If you all use mods in the group , you won't need an ID spoofing mod , remove those or configure them to allow modded clients</p>"},{"location":"Playing/FAQ/#how-do-i-unlock-every-character-after-installing-a-survivor-mod","title":"How do I unlock every character after installing a survivor mod?","text":"<p>This is due to a badly installed R2API , probably missing the monomod part</p>"},{"location":"Playing/FAQ/#development","title":"Development","text":""},{"location":"Playing/FAQ/#how-do-i-start-modding-this-game","title":"How do I start modding this game?","text":"<p>You're on the modding wiki right now! Go click around and see some stuff. I'd recommend checking out the first mod tutorial page for starting out coding mods.</p>"},{"location":"Playing/FAQ/#where-do-i-ask-my-development-related-questions","title":"Where do I ask my development related questions?","text":"<p>In the modding server's development channel, #development. Don't forget people might be a little busy but they usually respond quickly.</p>"},{"location":"Playing/FAQ/#i-want-to-create-a-mod-that-uses-custom-assets","title":"I want to create a mod that uses custom Assets","text":"<p>It is extremely recommended that you use the Tool \"ThunderKit\" for developing with assets for the game, a guide regarding what thunderkit is and how it works can be found here Regardless, Most of the content will still require code, so be sure to also check out the first mod tutorial page for starting out coding mods.</p>"},{"location":"Playing/FAQ/#thunderstore","title":"Thunderstore","text":""},{"location":"Playing/FAQ/#the-site-is-blocked-and-i-cant-download-anything","title":"The site is blocked and I can't download anything","text":"<p>Ah yeah, BackBlaze (our host) has nodes that are sometimes blocked in Russia, sadly as of now all we can say is that you can still access it with a Proxy/VPN</p>"},{"location":"Playing/FAQ/#the-install-with-mod-manager-button-doesnt-work","title":"The \"install with Mod Manager\" button doesn't work","text":"<p>You need a mod manager that supports that functionality, there's a few on the Thunderstore.</p>"},{"location":"Playing/Getting-Started/","title":"Getting Started","text":""},{"location":"Playing/Getting-Started/#mod-manager","title":"Mod Manager","text":"<p>There are four managers that you can choose from currently. Three are for windows and one is for Linux. For now we will focus on r2modman, if you use Overwolf, you can use TMM</p> <p>For linux based systems you can use either r2modman or r2mod_cli</p>"},{"location":"Playing/Getting-Started/#r2modman-recommended","title":"R2MODMAN - Recommended","text":""},{"location":"Playing/Getting-Started/#installation","title":"Installation","text":"<ol> <li>Go to the Thunderstore download page.</li> <li> <p>Click \"Manual Download\" </p> </li> <li> <p>Extract the contents of the downloaded .zip file.</p> </li> <li>Run the \"r2modman Setup X.X.X.exe\" (The \"X.X.X\" is representative of the version number e.g. v1.1.1) and follow the steps in the installer (Do not install r2modman inside the Risk of Rain 2 folder.).</li> </ol>"},{"location":"Playing/Getting-Started/#updating","title":"Updating","text":"<p>r2modman will automatically download any available updates during use. If an update has been downloaded, it will be installed once you have closed the application.</p>"},{"location":"Playing/Getting-Started/#installing-mods","title":"Installing Mods","text":"<p>Installing mods on r2modman is very simple once you have created and selected a profile you can:</p> <ul> <li>Click \"Online\" then browse the mods that have appeared(I recommend sorting by \"Last Updated\"), click on a mod, click download, confirm \"Download with dependencies\" and you're done.</li> </ul> <p>OR</p> <ul> <li>Browse Thunderstore and click \"Install with Mod Manager\", confirm \"open r2modman?\" (Tick the box for always allow if you never want to see the prompt again) and you're done.</li> </ul> <p>\"A dependency in programming is an essential functionality, library or piece of code that's essential for a different part of the code to work. For example, a specific library that a given line of code depends on.\"<sup>source</sup> All mods are dependent on BepInEx (allows execution of custom code). An example would be a mod that adds a skin for a modded character, it would have to have the dependency on the modded character, otherwise the code wouldn't be able to run properly.</p>"},{"location":"Playing/Getting-Started/#updating-mods","title":"Updating Mods","text":"<p>Updating is once again very simple and can be done in two ways.</p> <p>One by one:</p> <p></p> <ol> <li>Open the profile for which mods you wish to update.</li> <li>Click \"Installed\" if it is not already open.</li> <li>Click on the mod you wish to update (Mods with updates available will be indicated by a cloud icon).</li> <li>Click \"Update\"</li> <li>Confirm \"Download with dependencies\"</li> </ol> <p>Alternatively, you can click on the cloud icon to update the mod without expanding the info.</p> <p>OR</p> <p>All at once:</p> <p></p> <ol> <li>Open the profile for which mods you wish to update.</li> <li>Click \"Settings\"</li> <li>Scroll down to the bottom of the \"All\" tab.</li> <li>Click \"Update all mods\" </li> <li>Confirm \"Update all\"</li> </ol> <p>It is recommended you update one by one so you can confirm which mods are being updated, mod changes and for general security.</p>"},{"location":"Playing/Getting-Started/#configuring-mods","title":"Configuring Mods","text":"<p>While some mods may have configuration in-game most have configuration files stored in \"\\BepInEx\\config\", You can alter the settings in these files by:</p> <p>r2modman Config Editor 1. Select the Profile whos mod settings you wish to configure. 2. Click on \"Config editor\".  3. Click on the mod you wish to configure. 4. Confirm \"Edit Config\"</p> <p>Remember to \"Save changes\" when you are done.</p> <p>Directly 1. Select the Profile whos mod settings you wish to configure. 2. Click on \"Settings\". 3. Click on the \"Locations\" tab. 4. Click \"Browse profile folder\" 5. Navigate to \"\\BepInEx\\config\" 6. Open the appropriate config for the mod you wish to configure with any text editor.</p> <p>Remember to save when you are done.</p>"},{"location":"Playing/Getting-Started/#playing","title":"Playing","text":"<p>Simple:</p> <ol> <li>Open the profile you wish to use.</li> <li>Click \"Start modded\"</li> <li>Wait a short while until the title screen appears.</li> <li>Play!</li> </ol>"},{"location":"Playing/Getting-Started/#sharing-your-mod-list","title":"Sharing your Mod List","text":"<p>Do you wish to share your list of mods and the configuration tweaks you've done for each one without laboriously telling your friends what to do? Well here is how:</p> <p>What you do:</p> <ol> <li>Select a Profile.</li> <li>Click on \"Settings\".</li> <li>Click on the \"Profile\" tab.</li> <li>Click \"Export profile as a code\".</li> <li>Share the code with your friend; Ctrl+v.</li> </ol> <p>What they do:</p> <p>If they are currently on their profile screen, they can go to Settings &gt; Profile &gt; Change profile </p> <ol> <li>Click \"Import\"</li> <li>Click \"From code\"</li> <li>Enter the code provided and confirm \"Import\"</li> <li>Wait for the mods and configs to download and you're done.</li> </ol> <p>The code will only last for an hour, if you desire to have a longer lasting way to share then use the file option instead</p>"},{"location":"Playing/Getting-Started/#switching-profiles","title":"Switching Profiles","text":"<p>Help, I'm trapped in the purgatory of this profile I selected!</p> <p>Don't worry, you change profile easily. 1. Click on \"Settings\". 2. Click on the \"Profile\" tab. 3. Click \"Change profile\" and you're free.</p>"},{"location":"Playing/Getting-Started/#othermiscellaneous","title":"Other/Miscellaneous","text":"<p>Dark Mode</p> <p>This very bright UI hurts my eyes make it stop! 1. Select a Profile. 2. Click on \"Settings\". 3. Click on the \"Other\" tab. 4. Click \"Switch theme\".</p>"},{"location":"Playing/Getting-Started/#troubleshooting","title":"Troubleshooting","text":"<p>If you are facing any errors with r2modman check here.</p> <p>I have previously installed mods manually before using r2modman</p> <p>This will likely cause problems, I highly recommend you use r2modman with a clean Risk of Rain 2 install, so delete your \"steamapps\\common\\Risk of Rain 2\" folder and verify your game files by: 1. Navigate to \"\\steamapps\\common\". 2. Delete your \"Risk of Rain 2\" folder. 3. Open Steam. 4. Click the \"LIBRARY\" tab. 5. Find and right click \"Risk of Rain 2\". 6. Click \"Properties\". 7. Click on the \"LOCAL FILES\" tab. 8. Click \"VERIFY INTEGRITY OF GAME FILES...\". 9. Wait and you're done, you can go back to r2modman now.</p> <p>Nothing works</p> <p>If issues persist and all the solutions fail: 1. Select the Profile you're experiencing producing problems with. 2. Click on \"Settings\". <code>Settings -&gt; Debugging -&gt; Toggle download cache</code> 3. Go back to profile selection and delete all your profiles so you can start over fresh. 4. In your first new profile repeat steps 2-3 then click \"Clean mod cache\". 5. Continue as normal with installing mods. 6. If everything is now working repeat steps 2-4, the cache should be fine now.</p>"},{"location":"Playing/Getting-Started/#manual-installation-not-recommended-average-user-please-use-a-mod-manager","title":"Manual Installation - Not Recommended - Average user please use a mod manager","text":"<p>You can install mods manually but it will cause you and developers great pain in the long run so for the sake of everyone's sanity we implore you to use a mod manager instead.</p> <p>If you happen to get issues with mods while you are doing a manual install and that you request for help in the modding discord, people will most likely to use a mod manager instead and come back only if you have issues while using one.</p> <p>This guide assumes that you are familiar with basic Windows OS use such as the file and folder systems and with the file system of your own computer. It also assumes you know how to download and install programs and unzip archive files.</p> <p>Most mods require BepInEx (The Modloader) and R2API typically, both of which can be found on the Thunderstore.</p> <p>Some mods might require other mods or libraries to work which can be seen in the \"This mod requires the following mods to function\" section of Thunderstore but we shall focus on these two for your manual installation.</p> <p></p>"},{"location":"Playing/Getting-Started/#bepinex","title":"BepInEx","text":"<ol> <li>Go to the Thunderstore download page.</li> <li>Click \"Manual Download\"</li> <li>Navigate to \"SteamLibrary\\steamapps\\common\\Risk of Rain 2\".</li> <li>Extract the contents of the downloaded .zip to the \"Risk of Rain 2\" folder.</li> </ol>"},{"location":"Playing/Getting-Started/#linux","title":"Linux","text":"<p>If you are installing on Linux, the usage of a mod manager like r2modman or r2mod_cli is EXTREMELY recommended as you need to modify a file so that doorstop (the software that makes BepInEx correctly initialize on game start) works properly.</p> <p>You can either use proton tricks or do it fully manually like below:</p> <p>You'll need to locate the user registry file that proton use. The issue is that depending on your linux based system it might not be always the same location, this is why using a mod manager is better as it takes care of that completly, if you still somehow want to do that manually, you can use the following <code>find</code> command for trying to find it: <pre><code>find / -type f -name \"user.reg\" -path \"*/steamapps/compatdata/632360/pfx/*\"\n</code></pre></p> <p>Once you found it, open it and look for the <code>[Software\\\\Wine\\\\DllOverrides]</code>, right under it, add the following line: <code>\"winhttp\"=\"native,builtin\"</code> </p>"},{"location":"Playing/Getting-Started/#r2api","title":"R2API","text":"<ol> <li>Go to the Thunderstore download page.</li> <li>Click \"Manual Download\"</li> <li>Navigate to \"SteamLibrary\\steamapps\\common\\Risk of Rain 2\\BepEx\".</li> <li>Extract the contents of the downloaded .zip to the \"BepInEx\" folder.</li> </ol>"},{"location":"Playing/Getting-Started/#mod-installation-updating","title":"Mod Installation &amp; Updating","text":"<p>Installation</p> <ol> <li>Firstly check the \"This mod requires the following mods to function\" section of the mods Thunderstore page and ensure you have all the required mods, if not then download those in addition to the mod.</li> <li>Navigate to \"SteamLibrary\\steamapps\\common\\Risk of Rain 2\\BepEx\\Plugins\".</li> <li>Extract contents of the downloaded mods .zip to the \"Plugins\" folder (If the mod's README.md/Thunderstore page contains instructions for a different install location please install there instead).</li> </ol> <p>Updating</p> <p>For updating mods repeat the same process as Installation and overwrite the existing files.</p>"},{"location":"Playing/Getting-Started/#disabling-mods","title":"Disabling Mods","text":"<p>To disable a single mod you must remove the .dll from the Plugins folder.</p> <p>To disable all your mods rename the winhttp.dll in your Risk Of Rain 2 folder to winhttp.dll.dis. Should you want the mods back, you just rename the file back to winhttp.dll.</p> <p>You can set up steam shortcuts to play both vanilla and modded by following this Guide!.</p>"},{"location":"Playing/Getting-Started/#mod-configuration","title":"Mod Configuration","text":"<p>While some mods may have configuration in-game most have configuration files stored in \"\\BepInEx\\config\", You can alter the settings in these files with any text editor.</p>"},{"location":"Playing/Getting-Started/#reporting-bugs-for-mods","title":"Reporting Bugs for Mods","text":"<p>Before you do anything check the \"Configuring Mods\" section; Your mod(s) may have settings you can change to solve your problems</p> <p>In order for someone to help you with your problem they will require:</p> <ul> <li>A clear and concise description of what you were doing and what happened. You may additionally provide a screenshot, gif or video clip if you think this will help.</li> <li> <p>A \"LogOutput.log\" file:</p> </li> <li> <p>Select the Profile you are experiences bugs or problems with.</p> </li> <li>Click on \"Settings\".</li> <li>Click on the \"Debug\" tab</li> <li>Click \"Copy LogOutput contents to clipboard\"</li> <li>Pasting(Ctrl+v) this directly into Discord or a .txt file then send that in Discord.</li> </ul> <p>ALTERNATE METHOD:</p> <ol> <li>Select the Profile you are experiences bugs or problems with.</li> <li>Click on \"Settings\".</li> <li>Click on the \"Locations\" tab.</li> <li>Click \"Browse profile folder\"</li> <li>Navigate to \"profiles\\X\\BepInEx\" (X will instead be the name of your profile).</li> <li>Drag or Copy+Paste(Ctrl+c &gt; Ctrl+v) this into Discord.</li> </ol> <p>If the files are too big for Discords 8mb limit then store the .txt/.log in a .zip archive (It is very good at compressing text file types) and send that</p> <p>Once you have both of these things please use the #tech-support section of the Official Risk of Rain 2 Modding Discord or and @ the developer (assuming you have a suspicion it's their mod causing it) with these otherwise post it without the @ and wait for a helpful user to respond OR contact the mod developer directly instead.</p>"},{"location":"Playing/Running-modded-and-unmodded-game-with-shortcuts/","title":"Running modded and unmodded game with shortcuts","text":"<p>This guide explains how to set up BepInEx to allow to run the game modded and unmodded with only shortcuts. </p> <p>This guide is only necesary if youre running a setup without a mod manager, If you are using a mod manager (Such as Thunderstore's official mod manager, or R2ModMan) the mod manager should have a button for booting up the vanilla game without deleting your modded setup .</p> <p>This way you can easily swap between vanilla and modded game without deleting or modifying any files.</p> <p>This guide requires you to have BepInEx installed.</p> <p>Do the following:</p> <ol> <li> <p>Go to Risk of Rain 2 installation folder (<code>&lt;steam directory&gt;\\SteamApps\\common\\Risk of Rain 2</code>) and delete <code>doorstop_config.ini</code>.</p> </li> <li> <p>Add Risk of Rain 2 shortcut to Steam.</p> <p>In Steam, select <code>Add a game &gt; Add a Non-Steam Game</code>:</p> <p></p> <p>In the opened dialog, click <code>Browse...</code> and select <code>Risk of Rain 2.exe</code> found in <code>&lt;steam directory&gt;\\SteamApps\\common\\Risk of Rain 2</code>. After selecting the executable, click <code>Add selected programs</code>, which will add a new shortcut to RoR 2 in your Steam library:</p> <p></p> </li> <li> <p>Modify command line arguments of the shortcut.</p> <p>Select the newly created shortcut, right click it and select <code>Properties</code>. You can now change the name of the shortcut to something else (i.e. <code>Risk of Rain 2 Modded</code>).</p> <p>Next, click <code>Set Launch Options</code> and paste in the following:</p> <pre><code>--doorstop-enable true --doorstop-target BepInEx\\core\\BepInEx.Preloader.dll\n</code></pre> </li> </ol> <p>You should now have the following set:</p> <p></p> <p>Finally, click <code>OK</code> and close the properties.</p> <p>If you have done everything correctly, you should now have two versions of Risk of Rain 2 in your library: the original one and the shortcut that enables BepInEx (and all the mods).</p>"},{"location":"Tools/BepInEx/","title":"BepInEx","text":"<p>BepInEx is a plugin / modding framework for Unity Mono, IL2CPP and .NET framework games. (XNA, FNA, MonoGame, etc.)</p> <p>We use it for loading mods into Risk of Rain 2, if you are an user who wants to install mods, refer to this guide</p> <p>If you want to use it for other games, refer to this README.</p>"},{"location":"Tools/Glossary/","title":"Glossary","text":""},{"location":"Tools/Glossary/#injectorspatchers","title":"Injectors/Patchers","text":"<ul> <li>BepInEx</li> </ul>"},{"location":"Tools/Glossary/#decompilers","title":"Decompilers","text":"<ul> <li>dnSpy</li> <li>Non-windows compatible decompiler, ILSpy</li> <li>dotPeek</li> </ul>"},{"location":"Tools/Glossary/#assembly-tools","title":"Assembly Tools","text":"<ul> <li>JustAssembly - find the differences between two DLLs</li> <li>Assembly Stripper - Strip CIL from Assemblies to prevent copyright infringement</li> </ul>"},{"location":"Tools/Glossary/#asset-tools","title":"Asset Tools","text":"<ul> <li>Asset Ripper</li> <li>Prefabs - way to get all the prefab script values</li> </ul>"},{"location":"Tools/Glossary/#libraries","title":"Libraries","text":"<ul> <li>R2API</li> </ul>"},{"location":"Tools/Glossary/#project-templates","title":"Project Templates","text":"<ul> <li>Example Plugin</li> </ul>"}]}